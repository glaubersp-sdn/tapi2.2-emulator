/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TapiCommonAdminStatePac;
import io.swagger.model.TapiCommonCapacity;
import io.swagger.model.TapiCommonCapacityValue;
import io.swagger.model.TapiCommonContext;
import io.swagger.model.TapiCommonContextServiceInterfacePoint;
import io.swagger.model.TapiCommonNameAndValue;
import io.swagger.model.TapiCommonServiceInterfacePointRef;
import io.swagger.model.TapiCommonTimeInterval;
import io.swagger.model.TapiCommonTimePeriod;
import io.swagger.model.TapiCommonTimeRange;
import io.swagger.model.TapiConnectivityCeplistConnectionEndPoint;
import io.swagger.model.TapiConnectivityConnection;
import io.swagger.model.TapiConnectivityConnectionEndPointRef;
import io.swagger.model.TapiConnectivityConnectionRef;
import io.swagger.model.TapiConnectivityConnectivityConstraint;
import io.swagger.model.TapiConnectivityConnectivityServiceEndPointRef;
import io.swagger.model.TapiConnectivityConnectivityServiceRef;
import io.swagger.model.TapiConnectivityConnectivitycontextConnectivityService;
import io.swagger.model.TapiConnectivityConnectivityServiceEndPoint;
import io.swagger.model.TapiConnectivityContextConnectivityContext;
import io.swagger.model.TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList;
import io.swagger.model.TapiConnectivityResilienceConstraint;
import io.swagger.model.TapiConnectivityRoute;
import io.swagger.model.TapiConnectivityRouteRef;
import io.swagger.model.TapiConnectivitySwitch;
import io.swagger.model.TapiConnectivitySwitchControl;
import io.swagger.model.TapiConnectivitySwitchControlRef;
import io.swagger.model.TapiEthBandwidthReport;
import io.swagger.model.TapiEthControlFrameFilter;
import io.swagger.model.TapiEthEthCfmLinkTracePac;
import io.swagger.model.TapiEthEthCfmLinkTraceResultData;
import io.swagger.model.TapiEthEthCfmMaintenanceAssociation;
import io.swagger.model.TapiEthEthCfmMaintenanceDomain;
import io.swagger.model.TapiEthEthConnectionEndPointSpec;
import io.swagger.model.TapiEthEthConnectivityService;
import io.swagger.model.TapiEthEthConnectivityServiceEndPointSpec;
import io.swagger.model.TapiEthEthCtpCommonPac;
import io.swagger.model.TapiEthEthCtpPac;
import io.swagger.model.TapiEthEthLinkTraceJob;
import io.swagger.model.TapiEthEthLinkTraceResultData;
import io.swagger.model.TapiEthEthLoopbackJob;
import io.swagger.model.TapiEthEthLoopbackResultData;
import io.swagger.model.TapiEthEthMegCommon;
import io.swagger.model.TapiEthEthMegSpec;
import io.swagger.model.TapiEthEthMepCommon;
import io.swagger.model.TapiEthEthMepSink;
import io.swagger.model.TapiEthEthMepSource;
import io.swagger.model.TapiEthEthMepSpec;
import io.swagger.model.TapiEthEthMipCommon;
import io.swagger.model.TapiEthEthMipSpec;
import io.swagger.model.TapiEthEthOamMepServicePoint;
import io.swagger.model.TapiEthEthOamMipServicePoint;
import io.swagger.model.TapiEthEthOamService;
import io.swagger.model.TapiEthEthOamTestLoopbackCommonPac;
import io.swagger.model.TapiEthEthOnDemand1DmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1DmSourcePerformanceData;
import io.swagger.model.TapiEthEthOnDemand1LmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1LmSourcePerformanceData;
import io.swagger.model.TapiEthEthOnDemandDmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandDualEndedMeasurementJob;
import io.swagger.model.TapiEthEthOnDemandLmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSink;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSource;
import io.swagger.model.TapiEthEthOnDemandSingleEndedMeasurementJob;
import io.swagger.model.TapiEthEthProActive1DmPerformanceData;
import io.swagger.model.TapiEthEthProActive1DmSourcePerformanceData;
import io.swagger.model.TapiEthEthProActive1LmPerformanceData;
import io.swagger.model.TapiEthEthProActive1LmSourcePerformanceData;
import io.swagger.model.TapiEthEthProActiveDmPerformanceData;
import io.swagger.model.TapiEthEthProActiveDualEndedMeasurementJob;
import io.swagger.model.TapiEthEthProActiveLmPerformanceData;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSink;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSource;
import io.swagger.model.TapiEthEthProActiveSingleEndedMeasurementJob;
import io.swagger.model.TapiEthEthServiceIntefacePointSpec;
import io.swagger.model.TapiEthEthTerminationCommonPac;
import io.swagger.model.TapiEthEthTerminationPac;
import io.swagger.model.TapiEthEthTestJob;
import io.swagger.model.TapiEthEthTestJobSinkPoint;
import io.swagger.model.TapiEthEthTestResultData;
import io.swagger.model.TapiEthEtyTerminationCommonPac;
import io.swagger.model.TapiEthEtyTerminationPac;
import io.swagger.model.TapiEthLinkTraceResult;
import io.swagger.model.TapiEthLldpChassisIdSubtype;
import io.swagger.model.TapiEthLldpPortIdSubtype;
import io.swagger.model.TapiEthMaintenanceAssociationName;
import io.swagger.model.TapiEthPriorityConfiguration;
import io.swagger.model.TapiEthPriorityMapping;
import io.swagger.model.TapiEthQueueConfiguration;
import io.swagger.model.TapiEthSamplesDmPerformanceParameters;
import io.swagger.model.TapiEthStatisticalDmPerformanceParameters;
import io.swagger.model.TapiEthStatisticalLmPerformanceParameters;
import io.swagger.model.TapiEthTotalCountersLmPerformanceParameters;
import io.swagger.model.TapiEthTrafficConditioningConfiguration;
import io.swagger.model.TapiEthTrafficConditioningPac;
import io.swagger.model.TapiEthTrafficShapingPac;
import io.swagger.model.TapiNotificationContextNotificationContext;
import io.swagger.model.TapiNotificationNameAndValueChange;
import io.swagger.model.TapiNotificationNotification;
import io.swagger.model.TapiNotificationNotificationChannel;
import io.swagger.model.TapiNotificationNotificationSubscriptionService;
import io.swagger.model.TapiNotificationNotificationcontextNotification;
import io.swagger.model.TapiNotificationSubscriptionFilter;
import io.swagger.model.TapiOamAlarmInfo;
import io.swagger.model.TapiOamContextOamContext;
import io.swagger.model.TapiOamCurrentdataHistoryData;
import io.swagger.model.TapiOamMegMep;
import io.swagger.model.TapiOamMegMip;
import io.swagger.model.TapiOamMegRef;
import io.swagger.model.TapiOamMepMipList;
import io.swagger.model.TapiOamMepRef;
import io.swagger.model.TapiOamMipRef;
import io.swagger.model.TapiOamOamJobRef;
import io.swagger.model.TapiOamOamProfile;
import io.swagger.model.TapiOamOamProfileRef;
import io.swagger.model.TapiOamOamServicePointRef;
import io.swagger.model.TapiOamOamcontextMeg;
import io.swagger.model.TapiOamOamcontextOamJob;
import io.swagger.model.TapiOamOamcontextOamService;
import io.swagger.model.TapiOamOamjobCurrentData;
import io.swagger.model.TapiOamOamserviceOamServicePoint;
import io.swagger.model.TapiOamPmDataPac;
import io.swagger.model.TapiOamPmParameterValue;
import io.swagger.model.TapiOamPmThresholdData;
import io.swagger.model.TapiOamTcaInfo;
import io.swagger.model.TapiOamThresholdParameter;
import io.swagger.model.TapiPathComputationPath;
import io.swagger.model.TapiPathComputationPathComputationContext;
import io.swagger.model.TapiPathComputationPathComputationService;
import io.swagger.model.TapiPathComputationPathObjectiveFunction;
import io.swagger.model.TapiPathComputationPathOptimizationConstraint;
import io.swagger.model.TapiPathComputationPathRef;
import io.swagger.model.TapiPathComputationPathServiceEndPoint;
import io.swagger.model.TapiPathComputationRoutingConstraint;
import io.swagger.model.TapiPathComputationTopologyConstraint;
import io.swagger.model.TapiPhotonicMediaApplicationIdentifier;
import io.swagger.model.TapiPhotonicMediaCentralFrequency;
import io.swagger.model.TapiPhotonicMediaCentralFrequencyBand;
import io.swagger.model.TapiPhotonicMediaFecProperties;
import io.swagger.model.TapiPhotonicMediaFrequencyConstraint;
import io.swagger.model.TapiPhotonicMediaLaserProperties;
import io.swagger.model.TapiPhotonicMediaMediaChannelConfigPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelNodeEdgePointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelPoolCapabilityPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelPropertiesPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiCapabilityPac;
import io.swagger.model.TapiPhotonicMediaOtsiConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiServerAdaptationPac;
import io.swagger.model.TapiPhotonicMediaOtsiServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationConfigPac;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationPac;
import io.swagger.model.TapiPhotonicMediaPowerManagementCapabilityPac;
import io.swagger.model.TapiPhotonicMediaPowerManagementConfigPac;
import io.swagger.model.TapiPhotonicMediaPowerProperties;
import io.swagger.model.TapiPhotonicMediaSpectrumBand;
import io.swagger.model.TapiPhotonicMediaTotalPowerThresholdPac;
import io.swagger.model.TapiTopologyCostCharacteristic;
import io.swagger.model.TapiTopologyInterRuleGroup;
import io.swagger.model.TapiTopologyLatencyCharacteristic;
import io.swagger.model.TapiTopologyLink;
import io.swagger.model.TapiTopologyLinkRef;
import io.swagger.model.TapiTopologyNepLayerProtocolCapability;
import io.swagger.model.TapiTopologyNetworkTopologyService;
import io.swagger.model.TapiTopologyNodeEdgePointRef;
import io.swagger.model.TapiTopologyNodeNodeEdgePoint;
import io.swagger.model.TapiTopologyNodeRef;
import io.swagger.model.TapiTopologyNodeRuleGroup;
import io.swagger.model.TapiTopologyNodeRuleGroupRef;
import io.swagger.model.TapiTopologyRiskCharacteristic;
import io.swagger.model.TapiTopologyRule;
import io.swagger.model.TapiTopologyTopologyContext;
import io.swagger.model.TapiTopologyTopologyNode;
import io.swagger.model.TapiTopologyTopologyRef;
import io.swagger.model.TapiTopologyTopologycontextTopology;
import io.swagger.model.TapiTopologyValidationMechanism;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkConstraint;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkContext;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkService;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkServiceEndPoint;
import io.swagger.model.TapiVirtualNetworkVirtualNwServiceRef;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-08-08T12:17:00.417-03:00[America/Sao_Paulo]")
@Api(value = "data", description = "the data API")
public interface DataApi {

    @ApiOperation(value = "returns tapi.topology.NodeRef", nickname = "dataContextConnectivityContextConnectionuuidBoundingNodeGet", notes = "none", response = TapiTopologyNodeRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/bounding-node/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRef> dataContextConnectivityContextConnectionuuidBoundingNodeGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.connectivity.Connection", nickname = "dataContextConnectivityContextConnectionuuidGet", notes = "none", response = TapiConnectivityConnection.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Connection", response = TapiConnectivityConnection.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnection> dataContextConnectivityContextConnectionuuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionRef", nickname = "dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet", notes = "An Connection object supports a recursive aggregation relationship such that the internal construction of an Connection can be exposed as multiple lower level Connection objects (partitioning).                  Aggregation is used as for the Node/Topology  to allow changes in hierarchy.                   Connection aggregation reflects Node/Topology aggregation.                   The FC represents a Cross-Connection in an NE. The Cross-Connection in an NE is not necessarily the lowest level of FC partitioning.", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/lower-connection={connection-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionRef> dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of lower-connection",required=true) @PathVariable("connection-uuid") String connectionUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.connectivity.Route", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdGet", notes = "none", response = TapiConnectivityRoute.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Route", response = TapiConnectivityRoute.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityRoute> dataContextConnectivityContextConnectionuuidRoutelocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.LinkRef", nickname = "dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet", notes = "none", response = TapiTopologyLinkRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/supported-client-link={topology-uuid},{link-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLinkRef> dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supported-client-link",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of supported-client-link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.connectivity.SwitchControl", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet", notes = "none", response = TapiConnectivitySwitchControl.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.SwitchControl", response = TapiConnectivitySwitchControl.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivitySwitchControl> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.connectivity.SwitchControlRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet", notes = "none", response = TapiConnectivitySwitchControlRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.SwitchControlRef", response = TapiConnectivitySwitchControlRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/sub-switch-control={connection-uuid},{sub-switch-control-switch-control-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivitySwitchControlRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of sub-switch-control",required=true) @PathVariable("connection-uuid") String connectionUuid,@ApiParam(value = "Id of sub-switch-control",required=true) @PathVariable("sub-switch-control-switch-control-uuid") String subSwitchControlSwitchControlUuid);


    @ApiOperation(value = "returns tapi.connectivity.Switch", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet", notes = "none", response = TapiConnectivitySwitch.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Switch", response = TapiConnectivitySwitch.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivitySwitch> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.connectivity.RouteRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet", notes = "none", response = TapiConnectivityRouteRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.RouteRef", response = TapiConnectivityRouteRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-route={connection-uuid},{route-local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityRouteRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of selected-route",required=true) @PathVariable("connection-uuid") String connectionUuid,@ApiParam(value = "Id of selected-route",required=true) @PathVariable("route-local-id") String routeLocalId);


    @ApiOperation(value = "creates tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServicePost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServicePost(@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivitycontextConnectivityService body);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet", notes = "none", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connection={connection-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionRef> dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of connection",required=true) @PathVariable("connection-uuid") String connectionUuid);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionGet", notes = "none", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceRef> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidGet", notes = "none", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceRef> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintGet", notes = "none", response = TapiConnectivityConnectivityConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityConstraint", response = TapiConnectivityConnectivityConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityConstraint> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityConstraint to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityConstraint body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityConstraint to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityConstraint body);


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimeRange> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "removes tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPoint body);


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "removes tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigDelete", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigGet", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", response = TapiEthControlFrameFilter.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthControlFrameFilter> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPost", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.ControlFrameFilter to be added to list"  )  @Valid @RequestBody TapiEthControlFrameFilter body);


    @ApiOperation(value = "creates or updates tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPut", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.ControlFrameFilter to be added or updated"  )  @Valid @RequestBody TapiEthControlFrameFilter body);


    @ApiOperation(value = "returns tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacGet", notes = "none", response = TapiEthEthCtpCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpCommonPac", response = TapiEthEthCtpCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCtpCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthCtpCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthCtpCommonPac body);


    @ApiOperation(value = "creates or updates tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthCtpCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthCtpCommonPac body);


    @ApiOperation(value = "creates tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListPost", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningConfiguration to be added to list"  )  @Valid @RequestBody TapiEthTrafficConditioningConfiguration body);


    @ApiOperation(value = "removes tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdDelete", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", response = TapiEthTrafficConditioningConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficConditioningConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "creates or updates tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdPut", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.TrafficConditioningConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthTrafficConditioningConfiguration body);


    @ApiOperation(value = "removes tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacGet", notes = "none", response = TapiEthTrafficConditioningPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficConditioningPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningPac to be added to list"  )  @Valid @RequestBody TapiEthTrafficConditioningPac body);


    @ApiOperation(value = "creates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListPost", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added to list"  )  @Valid @RequestBody TapiEthPriorityConfiguration body);


    @ApiOperation(value = "removes tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdDelete", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "creates or updates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdPut", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthPriorityConfiguration body);


    @ApiOperation(value = "creates or updates tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningPac to be added or updated"  )  @Valid @RequestBody TapiEthTrafficConditioningPac body);


    @ApiOperation(value = "removes tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacGet", notes = "none", response = TapiEthTrafficShapingPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficShapingPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficShapingPac to be added to list"  )  @Valid @RequestBody TapiEthTrafficShapingPac body);


    @ApiOperation(value = "creates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListPost", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added to list"  )  @Valid @RequestBody TapiEthPriorityConfiguration body);


    @ApiOperation(value = "removes tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdDelete", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "creates or updates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdPut", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthPriorityConfiguration body);


    @ApiOperation(value = "creates or updates tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficShapingPac to be added or updated"  )  @Valid @RequestBody TapiEthTrafficShapingPac body);


    @ApiOperation(value = "creates tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListPost", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.QueueConfiguration to be added to list"  )  @Valid @RequestBody TapiEthQueueConfiguration body);


    @ApiOperation(value = "removes tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdDelete", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", response = TapiEthQueueConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthQueueConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "creates or updates tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdPut", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.QueueConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthQueueConfiguration body);


    @ApiOperation(value = "removes tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacGet", notes = "none", response = TapiEthEthTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationCommonPac", response = TapiEthEthTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTerminationCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthTerminationCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthTerminationCommonPac body);


    @ApiOperation(value = "removes tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateDelete", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateGet", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", response = TapiEthPriorityMapping.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityMapping> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePost", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityMapping to be added to list"  )  @Valid @RequestBody TapiEthPriorityMapping body);


    @ApiOperation(value = "creates or updates tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePut", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityMapping to be added or updated"  )  @Valid @RequestBody TapiEthPriorityMapping body);


    @ApiOperation(value = "creates or updates tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthTerminationCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthTerminationCommonPac body);


    @ApiOperation(value = "removes tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacGet", notes = "none", response = TapiEthEtyTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationCommonPac", response = TapiEthEtyTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEtyTerminationCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EtyTerminationCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEtyTerminationCommonPac body);


    @ApiOperation(value = "creates or updates tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EtyTerminationCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEtyTerminationCommonPac body);


    @ApiOperation(value = "returns tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecGet", notes = "none", response = TapiEthEthConnectivityServiceEndPointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectivityServiceEndPointSpec", response = TapiEthEthConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiEthEthConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "creates or updates tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiEthEthConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "returns tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPoint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.connectivityservice.EndPoint", response = TapiConnectivityConnectivityServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceEndPoint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigGet", notes = "none", response = TapiPhotonicMediaMediaChannelConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConfigPac", response = TapiPhotonicMediaMediaChannelConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConfigPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConfigPac body);


    @ApiOperation(value = "removes tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body);


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigDelete", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerDelete", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerGet", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPost", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPut", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerDelete", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerGet", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPost", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPut", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigGet", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", response = TapiPhotonicMediaPowerManagementConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementConfigPac", response = TapiPhotonicMediaPowerManagementConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerManagementConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerDelete", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerGet", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPost", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPut", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerDelete", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerGet", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPost", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPut", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPost", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerManagementConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementConfigPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPut", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerManagementConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementConfigPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet", notes = "This attribute indicates the selected Application Identifier.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaApplicationIdentifier body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaApplicationIdentifier body);


    @ApiOperation(value = "removes tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaCentralFrequency> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaCentralFrequency body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaCentralFrequency body);


    @ApiOperation(value = "removes tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet", notes = "none", response = TapiPhotonicMediaOtsiTerminationConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationConfigPac", response = TapiPhotonicMediaOtsiTerminationConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiTerminationConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiTerminationConfigPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiTerminationConfigPac body);


    @ApiOperation(value = "removes tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet", notes = "Transmit power as requested.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPoint body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "removes tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceGet", notes = "none", response = TapiEthEthConnectivityService.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectivityService", response = TapiEthEthConnectivityService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthConnectivityService> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthConnectivityService to be added to list"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "creates or updates tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthConnectivityService to be added or updated"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "returns tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidGet", notes = "none", response = TapiConnectivityConnectivitycontextConnectivityService.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.connectivitycontext.ConnectivityService", response = TapiConnectivityConnectivitycontextConnectivityService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivitycontextConnectivityService> dataContextConnectivityContextConnectivityServiceuuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivitycontextConnectivityService body);


    @ApiOperation(value = "removes tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintGet", notes = "none", response = TapiConnectivityResilienceConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ResilienceConstraint", response = TapiConnectivityResilienceConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityResilienceConstraint> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ResilienceConstraint to be added to list"  )  @Valid @RequestBody TapiConnectivityResilienceConstraint body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ResilienceConstraint to be added or updated"  )  @Valid @RequestBody TapiConnectivityResilienceConstraint body);


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationRoutingConstraint> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "creates tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body);


    @ApiOperation(value = "creates or updates tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body);


    @ApiOperation(value = "creates tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "creates or updates tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body);


    @ApiOperation(value = "creates tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body);


    @ApiOperation(value = "removes tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdGet", notes = "none", response = TapiPathComputationTopologyConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationTopologyConstraint> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body);


    @ApiOperation(value = "removes tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextDelete", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextConnectivityContextDelete();


    @ApiOperation(value = "returns tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextGet", notes = "Augments the base TAPI Context with ConnectivityService information", response = TapiConnectivityContextConnectivityContext.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.context.ConnectivityContext", response = TapiConnectivityContextConnectivityContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityContextConnectivityContext> dataContextConnectivityContextGet();


    @ApiOperation(value = "creates tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextPost", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextConnectivityContextPost(@ApiParam(value = "tapi.connectivity.context.ConnectivityContext to be added to list"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "creates or updates tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextPut", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextConnectivityContextPut(@ApiParam(value = "tapi.connectivity.context.ConnectivityContext to be added or updated"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "removes tapi.common.Context", nickname = "dataContextDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextDelete();


    @ApiOperation(value = "returns tapi.common.Context", nickname = "dataContextGet", notes = "none", response = TapiCommonContext.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Context", response = TapiCommonContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonContext> dataContextGet();


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNamePost(@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNamevalueNameDelete(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNamevalueNamePut(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextDelete", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNotificationContextDelete();


    @ApiOperation(value = "returns tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextGet", notes = "Augments the base TAPI Context with NotificationService information", response = TapiNotificationContextNotificationContext.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.context.NotificationContext", response = TapiNotificationContextNotificationContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationContextNotificationContext> dataContextNotificationContextGet();


    @ApiOperation(value = "creates tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionPost(@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added to list"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionService body);


    @ApiOperation(value = "removes tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidGet", notes = "none", response = TapiNotificationNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationSubscriptionService", response = TapiNotificationNotificationSubscriptionService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationSubscriptionService> dataContextNotificationContextNotifSubscriptionuuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "returns tapi.notification.NotificationChannel", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet", notes = "none", response = TapiNotificationNotificationChannel.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationChannel", response = TapiNotificationNotificationChannel.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification-channel/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationChannel> dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/additional-info={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/changed-attributes={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNameAndValueChange> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.Notification", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet", notes = "none", response = TapiNotificationNotification.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotification.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotification> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/target-object-name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added or updated"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionService body);


    @ApiOperation(value = "removes tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet", notes = "none", response = TapiNotificationSubscriptionFilter.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.SubscriptionFilter", response = TapiNotificationSubscriptionFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationSubscriptionFilter> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added to list"  )  @Valid @RequestBody TapiNotificationSubscriptionFilter body);


    @ApiOperation(value = "creates or updates tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added or updated"  )  @Valid @RequestBody TapiNotificationSubscriptionFilter body);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/additional-info={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.oam.AlarmInfo", nickname = "dataContextNotificationContextNotificationuuidAlarmInfoGet", notes = "none", response = TapiOamAlarmInfo.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.AlarmInfo", response = TapiOamAlarmInfo.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/alarm-info/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamAlarmInfo> dataContextNotificationContextNotificationuuidAlarmInfoGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/changed-attributes={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNameAndValueChange> dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.notification.notificationcontext.Notification", nickname = "dataContextNotificationContextNotificationuuidGet", notes = "none", response = TapiNotificationNotificationcontextNotification.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.notificationcontext.Notification", response = TapiNotificationNotificationcontextNotification.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiNotificationNotificationcontextNotification> dataContextNotificationContextNotificationuuidGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/target-object-name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.oam.TcaInfo", nickname = "dataContextNotificationContextNotificationuuidTcaInfoGet", notes = "none", response = TapiOamTcaInfo.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.TcaInfo", response = TapiOamTcaInfo.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamTcaInfo> dataContextNotificationContextNotificationuuidTcaInfoGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.OamJobRef", nickname = "dataContextNotificationContextNotificationuuidTcaInfoOamJobGet", notes = "MEF 35.1                  Identification of the PM Session for which the TCA Function was configured.", response = TapiOamOamJobRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamJobRef", response = TapiOamOamJobRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/oam-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamJobRef> dataContextNotificationContextNotificationuuidTcaInfoOamJobGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.ThresholdParameter", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterGet", notes = "none", response = TapiOamThresholdParameter.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.ThresholdParameter", response = TapiOamThresholdParameter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamThresholdParameter> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterAboveThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-above-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterAboveThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterBelowThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-below-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterBelowThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterClearThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-clear-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterClearThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextPost", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextNotificationContextPost(@ApiParam(value = "tapi.notification.context.NotificationContext to be added to list"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "creates or updates tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextPut", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextNotificationContextPut(@ApiParam(value = "tapi.notification.context.NotificationContext to be added or updated"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "removes tapi.oam.context.OamContext", nickname = "dataContextOamContextDelete", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextDelete();


    @ApiOperation(value = "returns tapi.oam.context.OamContext", nickname = "dataContextOamContextGet", notes = "Augments the base TAPI Context with OamService information", response = TapiOamContextOamContext.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.context.OamContext", response = TapiOamContextOamContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamContextOamContext> dataContextOamContextGet();


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationGet", notes = "none", response = TapiEthEthCfmMaintenanceAssociation.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceAssociation", response = TapiEthEthCfmMaintenanceAssociation.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-association/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmMaintenanceAssociation> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationMaintenanceAssociationNameGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", response = TapiEthMaintenanceAssociationName.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.MaintenanceAssociationName", response = TapiEthMaintenanceAssociationName.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-association/maintenance-association-name/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthMaintenanceAssociationName> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationMaintenanceAssociationNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceDomainGet", notes = "none", response = TapiEthEthCfmMaintenanceDomain.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceDomain", response = TapiEthEthCfmMaintenanceDomain.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-domain/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmMaintenanceDomain> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceDomainGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthMegCommon", nickname = "dataContextOamContextMeguuidEthMegSpecEthMegCommonGet", notes = "none", response = TapiEthEthMegCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegCommon", response = TapiEthEthMegCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-meg-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMegCommon> dataContextOamContextMeguuidEthMegSpecEthMegCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthMegSpec", nickname = "dataContextOamContextMeguuidEthMegSpecGet", notes = "none", response = TapiEthEthMegSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegSpec", response = TapiEthEthMegSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMegSpec> dataContextOamContextMeguuidEthMegSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.oamcontext.Meg", nickname = "dataContextOamContextMeguuidGet", notes = "none", response = TapiOamOamcontextMeg.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.Meg", response = TapiOamOamcontextMeg.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamcontextMeg> dataContextOamContextMeguuidGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthMepCommon", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet", notes = "none", response = TapiEthEthMepCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepCommon> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.BandwidthReport", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet", notes = "This attribute models the content of the bandwidth report received by the MEP Sink from the peer MEP Source.", response = TapiEthBandwidthReport.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/bandwidth-report/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthBandwidthReport> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepSink", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet", notes = "none", response = TapiEthEthMepSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSink", response = TapiEthEthMepSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepSink> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepSource", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourceGet", notes = "none", response = TapiEthEthMepSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSource", response = TapiEthEthMepSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepSource> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourceGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepSpec", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecGet", notes = "none", response = TapiEthEthMepSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSpec", response = TapiEthEthMepSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepSpec> dataContextOamContextMeguuidMeplocalIdEthMepSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.meg.Mep", nickname = "dataContextOamContextMeguuidMeplocalIdGet", notes = "1. ME may have 0 MEPs (case of transit domains where at least 1 MIP is present)                  2. ME may have 1 MEP (case of edge domaind, where the peer MEP is ouside the managed domain)                  3. ME may have 2 MEPs", response = TapiOamMegMep.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.meg.Mep", response = TapiOamMegMep.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMegMep> dataContextOamContextMeguuidMeplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidMeplocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidMeplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.eth.EthMipCommon", nickname = "dataContextOamContextMeguuidMiplocalIdEthMipSpecEthMipCommonGet", notes = "none", response = TapiEthEthMipCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipCommon", response = TapiEthEthMipCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/eth-mip-spec/eth-mip-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMipCommon> dataContextOamContextMeguuidMiplocalIdEthMipSpecEthMipCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMipSpec", nickname = "dataContextOamContextMeguuidMiplocalIdEthMipSpecGet", notes = "none", response = TapiEthEthMipSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipSpec", response = TapiEthEthMipSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/eth-mip-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMipSpec> dataContextOamContextMeguuidMiplocalIdEthMipSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.meg.Mip", nickname = "dataContextOamContextMeguuidMiplocalIdGet", notes = "ME may 0, 1, or more MIPs", response = TapiOamMegMip.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.meg.Mip", response = TapiOamMegMip.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMegMip> dataContextOamContextMeguuidMiplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidMiplocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidMiplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobPost(@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added to list"  )  @Valid @RequestBody TapiOamOamcontextOamJob body);


    @ApiOperation(value = "returns tapi.common.TimeInterval", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimeGet", notes = "none", response = TapiCommonTimeInterval.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeInterval", response = TapiCommonTimeInterval.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/elapsed-time/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimeInterval> dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimeGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimePeriodunitGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/elapsed-time/period={unit}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimePeriodunitGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of period",required=true) @PathVariable("unit") String unit);


    @ApiOperation(value = "returns tapi.eth.LldpChassisIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberChassisIdGet", notes = "MEF 38:                  The chassis-id-subtype contains the chassis ID entity that is listed in the chassis ID field. This is a combination of the 'Chassis ID Subtype' and 'chsssis ID' fields.                  IEEE P802.1Qcx/D0.3:                  The Chassis ID returned in the Sender ID TLV of the LTR, if any.                  The format of a chassis identifier string. Objects of this type are always used with an associated lldp-chassis-is-subtype object, which identifies the format of the particular lldp-chassis-id object instance.                  If the associated lldp-chassis-id-subtype object has a value of chassis-component, then the octet string identifies a particular instance of the entPhysicalAlias object (defined in IETF RFC 2737) for a chassis component (i.e., an entPhysicalClass value of chassis(3)).                  If the associated lldp-chassis-id-subtype object has a value of interface-alias, then the octet string identifies a particular instance of the ifAlias object (defined in IETF RFC 2863) for an interface on the containing chassis.                  If the particular ifAlias object does not contain any values, another chassis identifier type should be used.", response = TapiEthLldpChassisIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpChassisIdSubtype", response = TapiEthLldpChassisIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/chassis-id/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthLldpChassisIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberChassisIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber);


    @ApiOperation(value = "returns tapi.eth.LldpPortIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberEgressPortIdGet", notes = "MEF 38:                  IEEE P802.1Qcx/D0.3:                  Egress Port ID.                  IEEE P802.1Qcx/D0.3:                  If the egressActionField attribute contains the value EGRESS-NO-TLV, then the contents of this attribute are meaningless.", response = TapiEthLldpPortIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpPortIdSubtype", response = TapiEthLldpPortIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/egress-port-id/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthLldpPortIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberEgressPortIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber);


    @ApiOperation(value = "returns tapi.eth.EthCfmLinkTraceResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberGet", notes = "none", response = TapiEthEthCfmLinkTraceResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmLinkTraceResultData", response = TapiEthEthCfmLinkTraceResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmLinkTraceResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber);


    @ApiOperation(value = "returns tapi.eth.LldpPortIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberIngressPortIdGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  Ingress Port ID.                  IEEE P802.1Qcx/D0.3:                  If the ingressActionField attribute contains the value INGRESS-NO-TLV, then the contents of this attribute are meaningless.", response = TapiEthLldpPortIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpPortIdSubtype", response = TapiEthLldpPortIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/ingress-port-id/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthLldpPortIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberIngressPortIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber);


    @ApiOperation(value = "returns tapi.eth.EthLinkTraceResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataGet", notes = "none", response = TapiEthEthLinkTraceResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceResultData", response = TapiEthEthLinkTraceResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthLinkTraceResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.LinkTraceResult", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataResultListsourceAddressGet", notes = "G.8052: This parameter returns the results of the LT process. It contains a list of the result received from the individual LTR frames.                  The result from the individual LTR frame include the Source Mac Address, the TTL, and TLV.", response = TapiEthLinkTraceResult.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LinkTraceResult", response = TapiEthLinkTraceResult.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/result-list={source-address}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthLinkTraceResult> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataResultListsourceAddressGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of result-list",required=true) @PathVariable("source-address") String sourceAddress);


    @ApiOperation(value = "returns tapi.eth.EthLoopbackResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLoopbackResultDataGet", notes = "none", response = TapiEthEthLoopbackResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLoopbackResultData", response = TapiEthEthLoopbackResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-loopback-result-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthLoopbackResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLoopbackResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/samples-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmSourcePerformanceData", response = TapiEthEthOnDemand1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmSourcePerformanceData", response = TapiEthEthOnDemand1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/samples-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/samples-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmSourcePerformanceData", response = TapiEthEthProActive1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmSourcePerformanceData", response = TapiEthEthProActive1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActiveDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthProActiveLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthTestResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthTestResultDataGet", notes = "none", response = TapiEthEthTestResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestResultData", response = TapiEthEthTestResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-test-result-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTestResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthTestResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.oamjob.CurrentData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdGet", notes = "Granularity period of the CurrentData identifies the specific CurrentData instance in the scope of this OamJob.                  For example, typically at least                  one 15min and                  one 24hr;                  optionally one additional configurable (< 15min)", response = TapiOamOamjobCurrentData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamjob.CurrentData", response = TapiOamOamjobCurrentData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamjobCurrentData> dataContextOamContextOamJobuuidCurrentDatalocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/samples-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmSourcePerformanceData", response = TapiEthEthOnDemand1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmSourcePerformanceData", response = TapiEthEthOnDemand1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemand1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/samples-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/samples-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmSourcePerformanceData", response = TapiEthEthProActive1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmSourcePerformanceData", response = TapiEthEthProActive1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-source-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActive1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActiveDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.EthProActiveLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.oam.currentdata.HistoryData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdGet", notes = "in case of 24hr Current Data, at least 1 History Data.                  In case of 15min Current Data, at least 16 History Data.                  In case of <15min, the number of History Data shall be able to cover a span of 4 hours.", response = TapiOamCurrentdataHistoryData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.currentdata.HistoryData", response = TapiOamCurrentdataHistoryData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamCurrentdataHistoryData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.oam.PmDataPac", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGet", notes = "none", response = TapiOamPmDataPac.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmDataPac", response = TapiOamPmDataPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/pm-data-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmDataPac> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/pm-data-pac/granularity-period/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidCurrentDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.oam.PmDataPac", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGet", notes = "none", response = TapiOamPmDataPac.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmDataPac", response = TapiOamPmDataPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/pm-data-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmDataPac> dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/pm-data-pac/granularity-period/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacGet", notes = "none", response = TapiEthEthCfmLinkTracePac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmLinkTracePac", response = TapiEthEthCfmLinkTracePac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmLinkTracePac> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmLinkTracePac to be added to list"  )  @Valid @RequestBody TapiEthEthCfmLinkTracePac body);


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmLinkTracePac to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmLinkTracePac body);


    @ApiOperation(value = "returns tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobGet", notes = "none", response = TapiEthEthLinkTraceJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceJob", response = TapiEthEthLinkTraceJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthLinkTraceJob> dataContextOamContextOamJobuuidEthLinkTraceJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added to list"  )  @Valid @RequestBody TapiEthEthLinkTraceJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added or updated"  )  @Valid @RequestBody TapiEthEthLinkTraceJob body);


    @ApiOperation(value = "removes tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacGet", notes = "none", response = TapiEthEthOamTestLoopbackCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamTestLoopbackCommonPac", response = TapiEthEthOamTestLoopbackCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOamTestLoopbackCommonPac> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body);


    @ApiOperation(value = "returns tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobGet", notes = "none", response = TapiEthEthLoopbackJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLoopbackJob", response = TapiEthEthLoopbackJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthLoopbackJob> dataContextOamContextOamJobuuidEthLoopbackJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added to list"  )  @Valid @RequestBody TapiEthEthLoopbackJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added or updated"  )  @Valid @RequestBody TapiEthEthLoopbackJob body);


    @ApiOperation(value = "removes tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSink", response = TapiEthEthOnDemandMeasurementJobControlSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSink> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSink body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSink body);


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSource> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobGet", notes = "none", response = TapiEthEthOnDemandDualEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDualEndedMeasurementJob", response = TapiEthEthOnDemandDualEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandDualEndedMeasurementJob> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandDualEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandDualEndedMeasurementJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandDualEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandDualEndedMeasurementJob body);


    @ApiOperation(value = "removes tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSource> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body);


    @ApiOperation(value = "returns tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobGet", notes = "none", response = TapiEthEthOnDemandSingleEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandSingleEndedMeasurementJob", response = TapiEthEthOnDemandSingleEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOnDemandSingleEndedMeasurementJob> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandSingleEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandSingleEndedMeasurementJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandSingleEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandSingleEndedMeasurementJob body);


    @ApiOperation(value = "removes tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSink", response = TapiEthEthProActiveMeasurementJobControlSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveMeasurementJobControlSink> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSink body);


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSink body);


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveMeasurementJobControlSource> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body);


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body);


    @ApiOperation(value = "returns tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobGet", notes = "none", response = TapiEthEthProActiveDualEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDualEndedMeasurementJob", response = TapiEthEthProActiveDualEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveDualEndedMeasurementJob> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveDualEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveDualEndedMeasurementJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveDualEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveDualEndedMeasurementJob body);


    @ApiOperation(value = "removes tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveMeasurementJobControlSource> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body);


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body);


    @ApiOperation(value = "returns tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobGet", notes = "none", response = TapiEthEthProActiveSingleEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveSingleEndedMeasurementJob", response = TapiEthEthProActiveSingleEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthProActiveSingleEndedMeasurementJob> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveSingleEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveSingleEndedMeasurementJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveSingleEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveSingleEndedMeasurementJob body);


    @ApiOperation(value = "removes tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacGet", notes = "none", response = TapiEthEthOamTestLoopbackCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamTestLoopbackCommonPac", response = TapiEthEthOamTestLoopbackCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOamTestLoopbackCommonPac> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body);


    @ApiOperation(value = "removes tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointGet", notes = "none", response = TapiEthEthTestJobSinkPoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestJobSinkPoint", response = TapiEthEthTestJobSinkPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTestJobSinkPoint> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJobSinkPoint to be added to list"  )  @Valid @RequestBody TapiEthEthTestJobSinkPoint body);


    @ApiOperation(value = "creates or updates tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJobSinkPoint to be added or updated"  )  @Valid @RequestBody TapiEthEthTestJobSinkPoint body);


    @ApiOperation(value = "returns tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobGet", notes = "none", response = TapiEthEthTestJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestJob", response = TapiEthEthTestJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTestJob> dataContextOamContextOamJobuuidEthTestJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJob to be added to list"  )  @Valid @RequestBody TapiEthEthTestJob body);


    @ApiOperation(value = "creates or updates tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJob to be added or updated"  )  @Valid @RequestBody TapiEthEthTestJob body);


    @ApiOperation(value = "returns tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidGet", notes = "none", response = TapiOamOamcontextOamJob.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamJob", response = TapiOamOamcontextOamJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamcontextOamJob> dataContextOamContextOamJobuuidGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidNamePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidNamevalueNamePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfileDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfileDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfileGet", notes = "none", response = TapiOamOamProfileRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamProfileRef> dataContextOamContextOamJobuuidOamProfileGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfilePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfilePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfileRef to be added to list"  )  @Valid @RequestBody TapiOamOamProfileRef body);


    @ApiOperation(value = "creates or updates tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfilePut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfilePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfileRef to be added or updated"  )  @Valid @RequestBody TapiOamOamProfileRef body);


    @ApiOperation(value = "creates tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamServicePointRef to be added to list"  )  @Valid @RequestBody TapiOamOamServicePointRef body);


    @ApiOperation(value = "removes tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId);


    @ApiOperation(value = "returns tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdGet", notes = "none", response = TapiOamOamServicePointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamServicePointRef", response = TapiOamOamServicePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamServicePointRef> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId);


    @ApiOperation(value = "creates or updates tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId,@ApiParam(value = "tapi.oam.OamServicePointRef to be added or updated"  )  @Valid @RequestBody TapiOamOamServicePointRef body);


    @ApiOperation(value = "creates or updates tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added or updated"  )  @Valid @RequestBody TapiOamOamcontextOamJob body);


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidScheduleDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamJobuuidScheduleDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimeRange> dataContextOamContextOamJobuuidScheduleGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidSchedulePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamJobuuidSchedulePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidSchedulePut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamJobuuidSchedulePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "creates tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfilePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfilePost(@ApiParam(value = "tapi.oam.OamProfile to be added to list"  )  @Valid @RequestBody TapiOamOamProfile body);


    @ApiOperation(value = "removes tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidGet", notes = "none", response = TapiOamOamProfile.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamProfile", response = TapiOamOamProfile.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamProfile> dataContextOamContextOamProfileuuidGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamProfileuuidNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDataPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.PmThresholdData to be added to list"  )  @Valid @RequestBody TapiOamPmThresholdData body);


    @ApiOperation(value = "removes tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet", notes = "none", response = TapiOamPmThresholdData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmThresholdData", response = TapiOamPmThresholdData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmThresholdData> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.TimePeriod to be added to list"  )  @Valid @RequestBody TapiCommonTimePeriod body);


    @ApiOperation(value = "creates or updates tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.TimePeriod to be added or updated"  )  @Valid @RequestBody TapiCommonTimePeriod body);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.PmThresholdData to be added or updated"  )  @Valid @RequestBody TapiOamPmThresholdData body);


    @ApiOperation(value = "creates tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.ThresholdParameter to be added to list"  )  @Valid @RequestBody TapiOamThresholdParameter body);


    @ApiOperation(value = "removes tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "returns tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationGet", notes = "none", response = TapiOamThresholdParameter.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.ThresholdParameter", response = TapiOamThresholdParameter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamThresholdParameter> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation);


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body);


    @ApiOperation(value = "creates or updates tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.ThresholdParameter to be added or updated"  )  @Valid @RequestBody TapiOamThresholdParameter body);


    @ApiOperation(value = "creates or updates tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamProfileuuidPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfile to be added or updated"  )  @Valid @RequestBody TapiOamOamProfile body);


    @ApiOperation(value = "creates tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServicePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServicePost(@ApiParam(value = "tapi.oam.oamcontext.OamService to be added to list"  )  @Valid @RequestBody TapiOamOamcontextOamService body);


    @ApiOperation(value = "removes tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServiceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationGet", notes = "none", response = TapiEthEthCfmMaintenanceAssociation.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceAssociation", response = TapiEthEthCfmMaintenanceAssociation.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmMaintenanceAssociation> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameDelete", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", response = TapiEthMaintenanceAssociationName.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.MaintenanceAssociationName", response = TapiEthMaintenanceAssociationName.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthMaintenanceAssociationName> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePost", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.MaintenanceAssociationName to be added to list"  )  @Valid @RequestBody TapiEthMaintenanceAssociationName body);


    @ApiOperation(value = "creates or updates tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePut", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.MaintenanceAssociationName to be added or updated"  )  @Valid @RequestBody TapiEthMaintenanceAssociationName body);


    @ApiOperation(value = "creates tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceAssociation to be added to list"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceAssociation body);


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceAssociation to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceAssociation body);


    @ApiOperation(value = "removes tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainGet", notes = "none", response = TapiEthEthCfmMaintenanceDomain.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceDomain", response = TapiEthEthCfmMaintenanceDomain.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCfmMaintenanceDomain> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceDomain to be added to list"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceDomain body);


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceDomain to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceDomain body);


    @ApiOperation(value = "removes tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonGet", notes = "none", response = TapiEthEthMegCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegCommon", response = TapiEthEthMegCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMegCommon> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthMegCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMegCommon body);


    @ApiOperation(value = "creates or updates tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthMegCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMegCommon body);


    @ApiOperation(value = "returns tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServiceGet", notes = "none", response = TapiEthEthOamService.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamService", response = TapiEthEthOamService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOamService> dataContextOamContextOamServiceuuidEthOamServiceGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServicePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServicePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamService to be added to list"  )  @Valid @RequestBody TapiEthEthOamService body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServicePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServicePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamService to be added or updated"  )  @Valid @RequestBody TapiEthEthOamService body);


    @ApiOperation(value = "returns tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidGet", notes = "none", response = TapiOamOamcontextOamService.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamService", response = TapiOamOamcontextOamService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamcontextOamService> dataContextOamContextOamServiceuuidGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.oam.MegRef", nickname = "dataContextOamContextOamServiceuuidMegGet", notes = "none", response = TapiOamMegRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MegRef", response = TapiOamMegRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/meg/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMegRef> dataContextOamContextOamServiceuuidMegGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamServiceuuidNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamservice.OamServicePoint to be added to list"  )  @Valid @RequestBody TapiOamOamserviceOamServicePoint body);


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body);


    @ApiOperation(value = "removes tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonGet", notes = "none", response = TapiEthEthMepCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepCommon> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMepCommon body);


    @ApiOperation(value = "creates or updates tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMepCommon body);


    @ApiOperation(value = "returns tapi.eth.BandwidthReport", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkBandwidthReportGet", notes = "This attribute models the content of the bandwidth report received by the MEP Sink from the peer MEP Source.", response = TapiEthBandwidthReport.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/bandwidth-report/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthBandwidthReport> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkBandwidthReportGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkGet", notes = "none", response = TapiEthEthMepSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSink", response = TapiEthEthMepSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepSink> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSink to be added to list"  )  @Valid @RequestBody TapiEthEthMepSink body);


    @ApiOperation(value = "creates or updates tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSink to be added or updated"  )  @Valid @RequestBody TapiEthEthMepSink body);


    @ApiOperation(value = "removes tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceGet", notes = "none", response = TapiEthEthMepSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSource", response = TapiEthEthMepSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMepSource> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSource to be added to list"  )  @Valid @RequestBody TapiEthEthMepSource body);


    @ApiOperation(value = "creates or updates tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSource to be added or updated"  )  @Valid @RequestBody TapiEthEthMepSource body);


    @ApiOperation(value = "returns tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointGet", notes = "none", response = TapiEthEthOamMepServicePoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamMepServicePoint", response = TapiEthEthOamMepServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOamMepServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMepServicePoint to be added to list"  )  @Valid @RequestBody TapiEthEthOamMepServicePoint body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMepServicePoint to be added or updated"  )  @Valid @RequestBody TapiEthEthOamMepServicePoint body);


    @ApiOperation(value = "removes tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "removes tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonGet", notes = "none", response = TapiEthEthMipCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipCommon", response = TapiEthEthMipCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthMipCommon> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMipCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMipCommon body);


    @ApiOperation(value = "creates or updates tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMipCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMipCommon body);


    @ApiOperation(value = "returns tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointGet", notes = "none", response = TapiEthEthOamMipServicePoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamMipServicePoint", response = TapiEthEthOamMipServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthOamMipServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMipServicePoint to be added to list"  )  @Valid @RequestBody TapiEthEthOamMipServicePoint body);


    @ApiOperation(value = "creates or updates tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMipServicePoint to be added or updated"  )  @Valid @RequestBody TapiEthEthOamMipServicePoint body);


    @ApiOperation(value = "returns tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdGet", notes = "none", response = TapiOamOamserviceOamServicePoint.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamservice.OamServicePoint", response = TapiOamOamserviceOamServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamOamserviceOamServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.MepRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdMepGet", notes = "none", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/mep/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMepRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdMepGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.oam.MipRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdMipGet", notes = "none", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/mip/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMipRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdMipGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.oamservice.OamServicePoint to be added or updated"  )  @Valid @RequestBody TapiOamOamserviceOamServicePoint body);


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "creates or updates tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextOamServiceuuidPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamcontext.OamService to be added or updated"  )  @Valid @RequestBody TapiOamOamcontextOamService body);


    @ApiOperation(value = "creates tapi.oam.context.OamContext", nickname = "dataContextOamContextPost", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextOamContextPost(@ApiParam(value = "tapi.oam.context.OamContext to be added to list"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "creates or updates tapi.oam.context.OamContext", nickname = "dataContextOamContextPut", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextOamContextPut(@ApiParam(value = "tapi.oam.context.OamContext to be added or updated"  )  @Valid @RequestBody Object body);


    @ApiOperation(value = "removes tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextDelete", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextDelete();


    @ApiOperation(value = "returns tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextGet", notes = "Augments the base TAPI Context with PathComputationService information", response = TapiPathComputationPathComputationContext.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationContext", response = TapiPathComputationPathComputationContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathComputationContext> dataContextPathComputationContextGet();


    @ApiOperation(value = "creates tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServicePost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServicePost(@ApiParam(value = "tapi.path.computation.PathComputationService to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationService body);


    @ApiOperation(value = "removes tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPoint body);


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "removes tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet", notes = "none", response = TapiPathComputationPathServiceEndPoint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathServiceEndPoint", response = TapiPathComputationPathServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathServiceEndPoint> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPoint body);


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body);


    @ApiOperation(value = "returns tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidGet", notes = "none", response = TapiPathComputationPathComputationService.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationService", response = TapiPathComputationPathComputationService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathComputationService> dataContextPathComputationContextPathCompServiceuuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet", notes = "none", response = TapiPathComputationPathObjectiveFunction.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathObjectiveFunction", response = TapiPathComputationPathObjectiveFunction.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathObjectiveFunction> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added to list"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunction body);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunction body);


    @ApiOperation(value = "removes tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet", notes = "none", response = TapiPathComputationPathOptimizationConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathOptimizationConstraint", response = TapiPathComputationPathOptimizationConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathOptimizationConstraint> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraint body);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraint body);


    @ApiOperation(value = "returns tapi.path.computation.PathRef", nickname = "dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet", notes = "none", response = TapiPathComputationPathRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/path={path-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPathRef> dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of path",required=true) @PathVariable("path-uuid") String pathUuid);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathComputationService to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationService body);


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationRoutingConstraint> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "creates tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body);


    @ApiOperation(value = "creates or updates tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body);


    @ApiOperation(value = "creates tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "creates or updates tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body);


    @ApiOperation(value = "creates tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body);


    @ApiOperation(value = "removes tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet", notes = "none", response = TapiPathComputationTopologyConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationTopologyConstraint> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body);


    @ApiOperation(value = "returns tapi.path.computation.Path", nickname = "dataContextPathComputationContextPathuuidGet", notes = "none", response = TapiPathComputationPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.Path", response = TapiPathComputationPath.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationPath> dataContextPathComputationContextPathuuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.topology.LinkRef", nickname = "dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet", notes = "none", response = TapiTopologyLinkRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/link={topology-uuid},{link-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLinkRef> dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathuuidNamevalueNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPathComputationRoutingConstraint> dataContextPathComputationContextPathuuidRoutingConstraintGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "creates tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextPost", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPathComputationContextPost(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationContext body);


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextPut", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPathComputationContextPut(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationContext body);


    @ApiOperation(value = "creates tapi.common.Context", nickname = "dataContextPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextPost(@ApiParam(value = "tapi.common.Context to be added to list"  )  @Valid @RequestBody TapiCommonContext body);


    @ApiOperation(value = "creates or updates tapi.common.Context", nickname = "dataContextPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextPut(@ApiParam(value = "tapi.common.Context to be added or updated"  )  @Valid @RequestBody TapiCommonContext body);


    @ApiOperation(value = "creates tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointPost(@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added to list"  )  @Valid @RequestBody TapiCommonContextServiceInterfacePoint body);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextServiceInterfacePointuuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextServiceInterfacePointuuidAvailableCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecGet", notes = "none", response = TapiEthEthServiceIntefacePointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthServiceIntefacePointSpec", response = TapiEthEthServiceIntefacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthServiceIntefacePointSpec> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthServiceIntefacePointSpec to be added to list"  )  @Valid @RequestBody TapiEthEthServiceIntefacePointSpec body);


    @ApiOperation(value = "creates or updates tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthServiceIntefacePointSpec to be added or updated"  )  @Valid @RequestBody TapiEthEthServiceIntefacePointSpec body);


    @ApiOperation(value = "returns tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidGet", notes = "none", response = TapiCommonContextServiceInterfacePoint.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.context.ServiceInterfacePoint", response = TapiCommonContextServiceInterfacePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonContextServiceInterfacePoint> dataContextServiceInterfacePointuuidGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelServiceInterfacePointSpec> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet", notes = "none", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelPoolCapabilityPac> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelServiceInterfacePointSpec body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityGet", notes = "none", response = TapiPhotonicMediaPowerManagementCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementCapabilityPac", response = TapiPhotonicMediaPowerManagementCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerManagementCapabilityPac> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelServiceInterfacePointSpec body);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidNamePost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidNamevalueNameDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextServiceInterfacePointuuidNamevalueNameGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidNamevalueNamePut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiServiceInterfacePointSpec", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiServiceInterfacePointSpec> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet", notes = "none", response = TapiPhotonicMediaOtsiCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiCapabilityPac", response = TapiPhotonicMediaOtsiCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiCapabilityPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierapplicationCodeGet", notes = "The list of supportable ApplicationIdentifiers.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-application-identifier={application-code}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierapplicationCodeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-application-identifier",required=true) @PathVariable("application-code") String applicationCode);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-central-frequency-band/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequencyBand", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandGet", notes = "Each spectrum band supported for otsi trasmitter to be tuned on, is specified                  as per it's lower and upper central frequencies supported and its frequency constraints,                  consisting in the frequency Grid and the AdjustmentGranularity, used to uniquely identify all                  central frequencies supported within the band.", response = TapiPhotonicMediaCentralFrequencyBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequencyBand", response = TapiPhotonicMediaCentralFrequencyBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-central-frequency-band/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaCentralFrequencyBand> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.TotalPowerThresholdPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet", notes = "none", response = TapiPhotonicMediaTotalPowerThresholdPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.TotalPowerThresholdPac", response = TapiPhotonicMediaTotalPowerThresholdPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/total-power-warn-threshold/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaTotalPowerThresholdPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiServiceInterfacePointSpec body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityGet", notes = "none", response = TapiPhotonicMediaPowerManagementCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementCapabilityPac", response = TapiPhotonicMediaPowerManagementCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerManagementCapabilityPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body);


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiServiceInterfacePointSpec body);


    @ApiOperation(value = "creates or updates tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextServiceInterfacePointuuidPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added or updated"  )  @Valid @RequestBody TapiCommonContextServiceInterfacePoint body);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextServiceInterfacePointuuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextServiceInterfacePointuuidTotalPotentialCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "removes tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextDelete", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextTopologyContextDelete();


    @ApiOperation(value = "returns tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextGet", notes = "Augments the base TAPI Context with TopologyService information", response = TapiTopologyTopologyContext.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyContext", response = TapiTopologyTopologyContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyContext> dataContextTopologyContextGet();


    @ApiOperation(value = "returns tapi.topology.NetworkTopologyService", nickname = "dataContextTopologyContextNwTopologyServiceGet", notes = "none", response = TapiTopologyNetworkTopologyService.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NetworkTopologyService", response = TapiTopologyNetworkTopologyService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNetworkTopologyService> dataContextTopologyContextNwTopologyServiceGet();


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextNwTopologyServiceNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextNwTopologyServiceNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/topology={topology-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyRef> dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("topology-uuid") String topologyUuid);


    @ApiOperation(value = "creates tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextPost", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/topology-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextTopologyContextPost(@ApiParam(value = "tapi.topology.TopologyContext to be added to list"  )  @Valid @RequestBody TapiTopologyTopologyContext body);


    @ApiOperation(value = "creates or updates tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextPut", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextTopologyContextPut(@ApiParam(value = "tapi.topology.TopologyContext to be added or updated"  )  @Valid @RequestBody TapiTopologyTopologyContext body);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/boundary-node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.topologycontext.Topology", nickname = "dataContextTopologyContextTopologyuuidGet", notes = "none", response = TapiTopologyTopologycontextTopology.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.topologycontext.Topology", response = TapiTopologyTopologycontextTopology.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologycontextTopology> dataContextTopologyContextTopologyuuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.Link", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidGet", notes = "none", response = TapiTopologyLink.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Link", response = TapiTopologyLink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLink> dataContextTopologyContextTopologyuuidLinklinkUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid);


    @ApiOperation(value = "returns tapi.topology.ValidationMechanism", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet", notes = "Provides details of the specific validation mechanism(s) used to confirm the presence of an intended topologicalEntity.", response = TapiTopologyValidationMechanism.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ValidationMechanism", response = TapiTopologyValidationMechanism.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/validation-mechanism={validation-mechanism}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyValidationMechanism> dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of validation-mechanism",required=true) @PathVariable("validation-mechanism") String validationMechanism);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/encap-topology/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyRef> dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.topology.Node", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidGet", notes = "none", response = TapiTopologyTopologyNode.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.topology.Node", response = TapiTopologyTopologyNode.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyNode> dataContextTopologyContextTopologyuuidNodenodeUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidaggregatedNodeEdgePointNodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{aggregated-node-edge-point-node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidaggregatedNodeEdgePointNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-edge-point-uuid") String aggregatedNodeEdgePointNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.NepLayerProtocolCapability", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet", notes = "none", response = TapiTopologyNepLayerProtocolCapability.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NepLayerProtocolCapability", response = TapiTopologyNepLayerProtocolCapability.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-cep-layer-protocol={layer-protocol-qualifier}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNepLayerProtocolCapability> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-cep-layer-protocol",required=true) @PathVariable("layer-protocol-qualifier") String layerProtocolQualifier);


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidaggregatedConnectionEndPointNodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/aggregated-connection-end-point={topology-uuid},{aggregated-connection-end-point-node-uuid},{aggregated-connection-end-point-node-edge-point-uuid},{aggregated-connection-end-point-connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidaggregatedConnectionEndPointNodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-node-uuid") String aggregatedConnectionEndPointNodeUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-node-edge-point-uuid") String aggregatedConnectionEndPointNodeEdgePointUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-connection-end-point-uuid") String aggregatedConnectionEndPointConnectionEndPointUuid);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidclientNodeEdgePointNodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/client-node-edge-point={topology-uuid},{client-node-edge-point-node-uuid},{client-node-edge-point-node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidclientNodeEdgePointNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("client-node-edge-point-node-uuid") String clientNodeEdgePointNodeUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("client-node-edge-point-node-edge-point-uuid") String clientNodeEdgePointNodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.eth.ControlFrameFilter", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacFilterConfigGet", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", response = TapiEthControlFrameFilter.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/filter-config/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthControlFrameFilter> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacFilterConfigGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EthCtpCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacGet", notes = "none", response = TapiEthEthCtpCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpCommonPac", response = TapiEthEthCtpCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCtpCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", response = TapiEthTrafficConditioningConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficConditioningConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacGet", notes = "none", response = TapiEthTrafficConditioningPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficConditioningPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.TrafficShapingPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacGet", notes = "none", response = TapiEthTrafficShapingPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthTrafficShapingPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.QueueConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", response = TapiEthQueueConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthQueueConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId);


    @ApiOperation(value = "returns tapi.eth.EthCtpPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet", notes = "none", response = TapiEthEthCtpPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpPac", response = TapiEthEthCtpPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthCtpPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EthTerminationCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacGet", notes = "none", response = TapiEthEthTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationCommonPac", response = TapiEthEthTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/eth-termination-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTerminationCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.PriorityMapping", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacPriorityRegenerateGet", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", response = TapiEthPriorityMapping.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/eth-termination-common-pac/priority-regenerate/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthPriorityMapping> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacPriorityRegenerateGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EthTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet", notes = "none", response = TapiEthEthTerminationPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationPac", response = TapiEthEthTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EtyTerminationCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermEtyTerminationCommonPacGet", notes = "none", response = TapiEthEtyTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationCommonPac", response = TapiEthEtyTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/ety-term/ety-termination-common-pac/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEtyTerminationCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermEtyTerminationCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EtyTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet", notes = "none", response = TapiEthEtyTerminationPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationPac", response = TapiEthEtyTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/ety-term/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEtyTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.eth.EthConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet", notes = "Augments the base LayerProtocol information in ConnectionEndPoint with ETH-specific information", response = TapiEthEthConnectionEndPointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectionEndPointSpec", response = TapiEthEthConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiEthEthConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.connectivity.ceplist.ConnectionEndPoint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityCeplistConnectionEndPoint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ceplist.ConnectionEndPoint", response = TapiConnectivityCeplistConnectionEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityCeplistConnectionEndPoint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConnectionEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPropertiesPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet", notes = "none", response = TapiPhotonicMediaMediaChannelPropertiesPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelPropertiesPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-egress/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-ingress/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.oam.MepMipList", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet", notes = "none", response = TapiOamMepMipList.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepMipList", response = TapiOamMepMipList.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMepMipList> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.oam.MepRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet", notes = "none", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mep={meg-uuid},{mep-local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMepRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("meg-uuid") String megUuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("mep-local-id") String mepLocalId);


    @ApiOperation(value = "returns tapi.oam.MipRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet", notes = "none", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mip={meg-uuid},{mip-local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiOamMipRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("meg-uuid") String megUuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("mip-local-id") String mipLocalId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FecProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterFecParametersGet", notes = "none", response = TapiPhotonicMediaFecProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FecProperties", response = TapiPhotonicMediaFecProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/otsi-adapter/fec-parameters/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFecProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterFecParametersGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiServerAdaptationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet", notes = "none", response = TapiPhotonicMediaOtsiServerAdaptationPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiServerAdaptationPac", response = TapiPhotonicMediaOtsiServerAdaptationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/otsi-adapter/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiServerAdaptationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet", notes = "Augments the base LayerProtocol information in ConnectionEndPoint with OCH-specific information", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectionEndPointSpec", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.OtsiTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet", notes = "none", response = TapiPhotonicMediaOtsiTerminationPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationPac", response = TapiPhotonicMediaOtsiTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaOtsiTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.LaserProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet", notes = "Laser properties.", response = TapiPhotonicMediaLaserProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.LaserProperties", response = TapiPhotonicMediaLaserProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/laser-properties/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaLaserProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/received-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet", notes = "This attribute indicates the selected Application Identifier that is used by the OCh trail termination function. The syntax of ApplicationIdentifier is a pair {ApplicationIdentifierType, PrintableString}. The value of ApplicationIdentifierType is either STANDARD or PROPRIETARY. The value of PrintableString represents the standard application code as defined in the ITU-T Recommendations or a vendor-specific proprietary code. If the ApplicationIdentifierType is STANDARD the value of PrintableString represents a standard application code as defined in the ITU-T Recommendations. If the ApplicationIdentifierType is PROPRIETARY, the first six characters of the PrintableString must contain the Hexadecimal representation of an OUI assigned to the vendor whose implementation generated the Application Identifier; the remaining octets of the PrintableString are unspecified. The value of this attribute of an object instance has to be one of the values identified in the attribute SupportableApplicationIdentifierList of the same object instance. The values and value ranges of the optical interface parameters of a standard application code must be consistent with those values specified in the ITU-T Recommendation for that application code.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-application-identifier/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequency", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet", notes = "none", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaCentralFrequency> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet", notes = "Measured power at the Transmitter.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/transmited-power/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/parent-node-edge-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid);


    @ApiOperation(value = "returns tapi.connectivity.context.topologycontext.topology.node.nodeedgepoint.CepList", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListGet", notes = "none", response = TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.context.topologycontext.topology.node.nodeedgepoint.CepList", response = TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.node.NodeEdgePoint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeNodeEdgePoint.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.node.NodeEdgePoint", response = TapiTopologyNodeNodeEdgePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeNodeEdgePoint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet", notes = "NodeEdgePoint mapped to more than ServiceInterfacePoint (slicing/virtualizing) or a ServiceInterfacePoint mapped to more than one NodeEdgePoint (load balancing/Resilience) should be considered experimental", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/mapped-service-interface-point={service-interface-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of mapped-service-interface-point",required=true) @PathVariable("service-interface-point-uuid") String serviceInterfacePointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelNodeEdgePointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecGet", notes = "Augments the base LayerProtocol information in NodeEdgePoint with OCH-specific information", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelNodeEdgePointSpec", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelNodeEdgePointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet", notes = "none", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaMediaChannelPoolCapabilityPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/composed-rule-group={topology-uuid},{composed-rule-group-node-uuid},{composed-rule-group-node-rule-group-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroupRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-uuid") String composedRuleGroupNodeUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-rule-group-uuid") String composedRuleGroupNodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroup", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroup.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroup", response = TapiTopologyNodeRuleGroup.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroup> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/associated-node-rule-group={topology-uuid},{associated-node-rule-group-node-uuid},{associated-node-rule-group-node-rule-group-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeRuleGroupRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-uuid") String associatedNodeRuleGroupNodeUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-rule-group-uuid") String associatedNodeRuleGroupNodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.InterRuleGroup", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet", notes = "none", response = TapiTopologyInterRuleGroup.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.InterRuleGroup", response = TapiTopologyInterRuleGroup.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyInterRuleGroup> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet", notes = "none", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRule> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/node-edge-point={topology-uuid},{node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-node-uuid") String nodeEdgePointNodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid);


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName);


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet", notes = "none", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyRule> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid);


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextDelete", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextDelete();


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextGet", notes = "Augments the base TAPI Context with VirtualNetworkService information", response = TapiVirtualNetworkVirtualNetworkContext.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkContext", response = TapiVirtualNetworkVirtualNetworkContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiVirtualNetworkVirtualNetworkContext> dataContextVirtualNetworkContextGet();


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextPost", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextPost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkContext body);


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextPut", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextPut(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkContext body);


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServicePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServicePost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkService body);


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkServiceEndPoint body);


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkServiceEndPoint", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiVirtualNetworkVirtualNetworkServiceEndPoint> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkServiceEndPoint body);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkService.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkService", response = TapiVirtualNetworkVirtualNetworkService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiVirtualNetworkVirtualNetworkService> dataContextVirtualNetworkContextVirtualNwServiceuuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkService body);


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonTimeRange> dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body);


    @ApiOperation(value = "removes tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "returns tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet", notes = "none", response = TapiCommonAdminStatePac.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.AdminStatePac", response = TapiCommonAdminStatePac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonAdminStatePac> dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.AdminStatePac to be added to list"  )  @Valid @RequestBody TapiCommonAdminStatePac body);


    @ApiOperation(value = "creates or updates tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.AdminStatePac to be added or updated"  )  @Valid @RequestBody TapiCommonAdminStatePac body);


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/topology/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyTopologyRef> dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid);


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkConstraint body);


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyCostCharacteristic> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName);


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body);


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNwServiceRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet", notes = "none", response = TapiVirtualNetworkVirtualNwServiceRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNwServiceRef", response = TapiVirtualNetworkVirtualNwServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/diversity-exclusion={virtual-nw-service-uuid}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiVirtualNetworkVirtualNwServiceRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("virtual-nw-service-uuid") String virtualNwServiceUuid);


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkConstraint.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkConstraint", response = TapiVirtualNetworkVirtualNetworkConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiVirtualNetworkVirtualNetworkConstraint> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName);


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body);


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName);


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body);


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkConstraint body);


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacity> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body);


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonCapacityValue> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/sink-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/src-service-end-point/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId);

}
