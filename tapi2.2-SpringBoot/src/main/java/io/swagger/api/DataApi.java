/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TapiCommonAdminStatePac;
import io.swagger.model.TapiCommonCapacity;
import io.swagger.model.TapiCommonCapacityValue;
import io.swagger.model.TapiCommonContext;
import io.swagger.model.TapiCommonContextServiceInterfacePoint;
import io.swagger.model.TapiCommonNameAndValue;
import io.swagger.model.TapiCommonServiceInterfacePointRef;
import io.swagger.model.TapiCommonTimeInterval;
import io.swagger.model.TapiCommonTimePeriod;
import io.swagger.model.TapiCommonTimeRange;
import io.swagger.model.TapiConnectivityCeplistConnectionEndPoint;
import io.swagger.model.TapiConnectivityConnection;
import io.swagger.model.TapiConnectivityConnectionEndPointRef;
import io.swagger.model.TapiConnectivityConnectionRef;
import io.swagger.model.TapiConnectivityConnectivityConstraint;
import io.swagger.model.TapiConnectivityConnectivityServiceEndPointRef;
import io.swagger.model.TapiConnectivityConnectivityServiceRef;
import io.swagger.model.TapiConnectivityConnectivitycontextConnectivityService;
import io.swagger.model.TapiConnectivityConnectivityServiceEndPoint;
import io.swagger.model.TapiConnectivityContextConnectivityContext;
import io.swagger.model.TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList;
import io.swagger.model.TapiConnectivityResilienceConstraint;
import io.swagger.model.TapiConnectivityRoute;
import io.swagger.model.TapiConnectivityRouteRef;
import io.swagger.model.TapiConnectivitySwitch;
import io.swagger.model.TapiConnectivitySwitchControl;
import io.swagger.model.TapiConnectivitySwitchControlRef;
import io.swagger.model.TapiEquipmentAbstractStrand;
import io.swagger.model.TapiEquipmentAbstractStrandRef;
import io.swagger.model.TapiEquipmentAccessPort;
import io.swagger.model.TapiEquipmentAccessPortRef;
import io.swagger.model.TapiEquipmentActualEquipment;
import io.swagger.model.TapiEquipmentActualHolder;
import io.swagger.model.TapiEquipmentActualNonFieldReplaceableModule;
import io.swagger.model.TapiEquipmentCommonActualProperties;
import io.swagger.model.TapiEquipmentCommonEquipmentProperties;
import io.swagger.model.TapiEquipmentCommonHolderProperties;
import io.swagger.model.TapiEquipmentConnectorPinAddress;
import io.swagger.model.TapiEquipmentDevice;
import io.swagger.model.TapiEquipmentEquipment;
import io.swagger.model.TapiEquipmentEquipmentRef;
import io.swagger.model.TapiEquipmentExpectedEquipment;
import io.swagger.model.TapiEquipmentExpectedHolder;
import io.swagger.model.TapiEquipmentExpectedNonFieldReplaceableModule;
import io.swagger.model.TapiEquipmentHolder;
import io.swagger.model.TapiEquipmentPhysicalContext;
import io.swagger.model.TapiEquipmentPhysicalSpan;
import io.swagger.model.TapiEquipmentPhysicalSpanRef;
import io.swagger.model.TapiEquipmentSupportingAccessPort;
import io.swagger.model.TapiEquipmentSupportingPhysicalSpan;
import io.swagger.model.TapiEthBandwidthReport;
import io.swagger.model.TapiEthControlFrameFilter;
import io.swagger.model.TapiEthEthCfmLinkTracePac;
import io.swagger.model.TapiEthEthCfmLinkTraceResultData;
import io.swagger.model.TapiEthEthCfmMaintenanceAssociation;
import io.swagger.model.TapiEthEthCfmMaintenanceDomain;
import io.swagger.model.TapiEthEthConnectionEndPointSpec;
import io.swagger.model.TapiEthEthConnectivityService;
import io.swagger.model.TapiEthEthConnectivityServiceEndPointSpec;
import io.swagger.model.TapiEthEthCtpCommonPac;
import io.swagger.model.TapiEthEthCtpPac;
import io.swagger.model.TapiEthEthLinkTraceJob;
import io.swagger.model.TapiEthEthLinkTraceResultData;
import io.swagger.model.TapiEthEthLoopbackJob;
import io.swagger.model.TapiEthEthLoopbackResultData;
import io.swagger.model.TapiEthEthMegCommon;
import io.swagger.model.TapiEthEthMegSpec;
import io.swagger.model.TapiEthEthMepCommon;
import io.swagger.model.TapiEthEthMepSink;
import io.swagger.model.TapiEthEthMepSource;
import io.swagger.model.TapiEthEthMepSpec;
import io.swagger.model.TapiEthEthMipCommon;
import io.swagger.model.TapiEthEthMipSpec;
import io.swagger.model.TapiEthEthOamMepServicePoint;
import io.swagger.model.TapiEthEthOamMipServicePoint;
import io.swagger.model.TapiEthEthOamService;
import io.swagger.model.TapiEthEthOamTestLoopbackCommonPac;
import io.swagger.model.TapiEthEthOnDemand1DmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1DmSourcePerformanceData;
import io.swagger.model.TapiEthEthOnDemand1LmPerformanceData;
import io.swagger.model.TapiEthEthOnDemand1LmSourcePerformanceData;
import io.swagger.model.TapiEthEthOnDemandDmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandDualEndedMeasurementJob;
import io.swagger.model.TapiEthEthOnDemandLmPerformanceData;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSink;
import io.swagger.model.TapiEthEthOnDemandMeasurementJobControlSource;
import io.swagger.model.TapiEthEthOnDemandSingleEndedMeasurementJob;
import io.swagger.model.TapiEthEthProActive1DmPerformanceData;
import io.swagger.model.TapiEthEthProActive1DmSourcePerformanceData;
import io.swagger.model.TapiEthEthProActive1LmPerformanceData;
import io.swagger.model.TapiEthEthProActive1LmSourcePerformanceData;
import io.swagger.model.TapiEthEthProActiveDmPerformanceData;
import io.swagger.model.TapiEthEthProActiveDualEndedMeasurementJob;
import io.swagger.model.TapiEthEthProActiveLmPerformanceData;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSink;
import io.swagger.model.TapiEthEthProActiveMeasurementJobControlSource;
import io.swagger.model.TapiEthEthProActiveSingleEndedMeasurementJob;
import io.swagger.model.TapiEthEthServiceIntefacePointSpec;
import io.swagger.model.TapiEthEthTerminationCommonPac;
import io.swagger.model.TapiEthEthTerminationPac;
import io.swagger.model.TapiEthEthTestJob;
import io.swagger.model.TapiEthEthTestJobSinkPoint;
import io.swagger.model.TapiEthEthTestResultData;
import io.swagger.model.TapiEthEtyTerminationCommonPac;
import io.swagger.model.TapiEthEtyTerminationPac;
import io.swagger.model.TapiEthLinkTraceResult;
import io.swagger.model.TapiEthLldpChassisIdSubtype;
import io.swagger.model.TapiEthLldpPortIdSubtype;
import io.swagger.model.TapiEthMaintenanceAssociationName;
import io.swagger.model.TapiEthPriorityConfiguration;
import io.swagger.model.TapiEthPriorityMapping;
import io.swagger.model.TapiEthQueueConfiguration;
import io.swagger.model.TapiEthSamplesDmPerformanceParameters;
import io.swagger.model.TapiEthStatisticalDmPerformanceParameters;
import io.swagger.model.TapiEthStatisticalLmPerformanceParameters;
import io.swagger.model.TapiEthTotalCountersLmPerformanceParameters;
import io.swagger.model.TapiEthTrafficConditioningConfiguration;
import io.swagger.model.TapiEthTrafficConditioningPac;
import io.swagger.model.TapiEthTrafficShapingPac;
import io.swagger.model.TapiNotificationContextNotificationContext;
import io.swagger.model.TapiNotificationNameAndValueChange;
import io.swagger.model.TapiNotificationNotification;
import io.swagger.model.TapiNotificationNotificationChannel;
import io.swagger.model.TapiNotificationNotificationSubscriptionService;
import io.swagger.model.TapiNotificationNotificationcontextNotification;
import io.swagger.model.TapiNotificationSubscriptionFilter;
import io.swagger.model.TapiOamAlarmInfo;
import io.swagger.model.TapiOamContextOamContext;
import io.swagger.model.TapiOamCurrentdataHistoryData;
import io.swagger.model.TapiOamMegMep;
import io.swagger.model.TapiOamMegMip;
import io.swagger.model.TapiOamMegRef;
import io.swagger.model.TapiOamMepMipList;
import io.swagger.model.TapiOamMepRef;
import io.swagger.model.TapiOamMipRef;
import io.swagger.model.TapiOamOamJobRef;
import io.swagger.model.TapiOamOamProfile;
import io.swagger.model.TapiOamOamProfileRef;
import io.swagger.model.TapiOamOamServicePointRef;
import io.swagger.model.TapiOamOamcontextMeg;
import io.swagger.model.TapiOamOamcontextOamJob;
import io.swagger.model.TapiOamOamcontextOamService;
import io.swagger.model.TapiOamOamjobCurrentData;
import io.swagger.model.TapiOamOamserviceOamServicePoint;
import io.swagger.model.TapiOamPmDataPac;
import io.swagger.model.TapiOamPmParameterValue;
import io.swagger.model.TapiOamPmThresholdData;
import io.swagger.model.TapiOamTcaInfo;
import io.swagger.model.TapiOamThresholdParameter;
import io.swagger.model.TapiOduDegThr;
import io.swagger.model.TapiOduOduCommonPac;
import io.swagger.model.TapiOduOduConnectionEndPointSpec;
import io.swagger.model.TapiOduOduConnectivityServiceEndPointSpec;
import io.swagger.model.TapiOduOduCtpPac;
import io.swagger.model.TapiOduOduDefectPac;
import io.swagger.model.TapiOduOduMegSpec;
import io.swagger.model.TapiOduOduMepPac;
import io.swagger.model.TapiOduOduMepSpec;
import io.swagger.model.TapiOduOduMipPac;
import io.swagger.model.TapiOduOduMipSpec;
import io.swagger.model.TapiOduOduNcmPac;
import io.swagger.model.TapiOduOduNodeEdgePointSpec;
import io.swagger.model.TapiOduOduPayloadType;
import io.swagger.model.TapiOduOduPmPac;
import io.swagger.model.TapiOduOduPoolPac;
import io.swagger.model.TapiOduOduProtectionPac;
import io.swagger.model.TapiOduOduTcmMepPac;
import io.swagger.model.TapiOduOduTcmMipPac;
import io.swagger.model.TapiOduOduTerminationAndClientAdaptationPac;
import io.swagger.model.TapiOduUasChoice;
import io.swagger.model.TapiPathComputationPath;
import io.swagger.model.TapiPathComputationPathComputationContext;
import io.swagger.model.TapiPathComputationPathComputationService;
import io.swagger.model.TapiPathComputationPathObjectiveFunction;
import io.swagger.model.TapiPathComputationPathOptimizationConstraint;
import io.swagger.model.TapiPathComputationPathRef;
import io.swagger.model.TapiPathComputationPathServiceEndPoint;
import io.swagger.model.TapiPathComputationRoutingConstraint;
import io.swagger.model.TapiPathComputationTopologyConstraint;
import io.swagger.model.TapiPhotonicMediaApplicationIdentifier;
import io.swagger.model.TapiPhotonicMediaCentralFrequency;
import io.swagger.model.TapiPhotonicMediaCentralFrequencyBand;
import io.swagger.model.TapiPhotonicMediaFecProperties;
import io.swagger.model.TapiPhotonicMediaFrequencyConstraint;
import io.swagger.model.TapiPhotonicMediaLaserProperties;
import io.swagger.model.TapiPhotonicMediaMediaChannelConfigPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelNodeEdgePointSpec;
import io.swagger.model.TapiPhotonicMediaMediaChannelPoolCapabilityPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelPropertiesPac;
import io.swagger.model.TapiPhotonicMediaMediaChannelServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiCapabilityPac;
import io.swagger.model.TapiPhotonicMediaOtsiConnectionEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiServerAdaptationPac;
import io.swagger.model.TapiPhotonicMediaOtsiServiceInterfacePointSpec;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationConfigPac;
import io.swagger.model.TapiPhotonicMediaOtsiTerminationPac;
import io.swagger.model.TapiPhotonicMediaPowerManagementCapabilityPac;
import io.swagger.model.TapiPhotonicMediaPowerManagementConfigPac;
import io.swagger.model.TapiPhotonicMediaPowerProperties;
import io.swagger.model.TapiPhotonicMediaSpectrumBand;
import io.swagger.model.TapiPhotonicMediaTotalPowerThresholdPac;
import io.swagger.model.TapiTopologyCostCharacteristic;
import io.swagger.model.TapiTopologyInterRuleGroup;
import io.swagger.model.TapiTopologyLatencyCharacteristic;
import io.swagger.model.TapiTopologyLink;
import io.swagger.model.TapiTopologyLinkRef;
import io.swagger.model.TapiTopologyNepLayerProtocolCapability;
import io.swagger.model.TapiTopologyNetworkTopologyService;
import io.swagger.model.TapiTopologyNodeEdgePointRef;
import io.swagger.model.TapiTopologyNodeNodeEdgePoint;
import io.swagger.model.TapiTopologyNodeRef;
import io.swagger.model.TapiTopologyNodeRuleGroup;
import io.swagger.model.TapiTopologyNodeRuleGroupRef;
import io.swagger.model.TapiTopologyRiskCharacteristic;
import io.swagger.model.TapiTopologyRule;
import io.swagger.model.TapiTopologyTopologyContext;
import io.swagger.model.TapiTopologyTopologyNode;
import io.swagger.model.TapiTopologyTopologyRef;
import io.swagger.model.TapiTopologyTopologycontextTopology;
import io.swagger.model.TapiTopologyValidationMechanism;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkConstraint;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkContext;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkService;
import io.swagger.model.TapiVirtualNetworkVirtualNetworkServiceEndPoint;
import io.swagger.model.TapiVirtualNetworkVirtualNwServiceRef;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import java.io.IOException;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-07T12:33:48.081-03:00[America/Sao_Paulo]")
@Api(value = "data", description = "the data API")
public interface DataApi {

    Logger log = LoggerFactory.getLogger(DataApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "returns tapi.topology.NodeRef", nickname = "dataContextConnectivityContextConnectionuuidBoundingNodeGet", notes = "none", response = TapiTopologyNodeRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRef", response = TapiTopologyNodeRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/bounding-node/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeRef> dataContextConnectivityContextConnectionuuidBoundingNodeGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectionEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.Connection", nickname = "dataContextConnectivityContextConnectionuuidGet", notes = "none", response = TapiConnectivityConnection.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Connection", response = TapiConnectivityConnection.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnection> dataContextConnectivityContextConnectionuuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnection.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionRef", nickname = "dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet", notes = "An Connection object supports a recursive aggregation relationship such that the internal construction of an Connection can be exposed as multiple lower level Connection objects (partitioning).                  Aggregation is used as for the Node/Topology  to allow changes in hierarchy.                   Connection aggregation reflects Node/Topology aggregation.                   The FC represents a Cross-Connection in an NE. The Cross-Connection in an NE is not necessarily the lowest level of FC partitioning.", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/lower-connection={connection-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionRef> dataContextConnectivityContextConnectionuuidLowerConnectionconnectionUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of lower-connection",required=true) @PathVariable("connection-uuid") String connectionUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connection-uuid\" : \"connection-uuid\"\n}", TapiConnectivityConnectionRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidRoutelocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectionEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.Route", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdGet", notes = "none", response = TapiConnectivityRoute.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Route", response = TapiConnectivityRoute.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityRoute> dataContextConnectivityContextConnectionuuidRoutelocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityRoute.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/route={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidRoutelocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of route",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LinkRef", nickname = "dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet", notes = "none", response = TapiTopologyLinkRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/supported-client-link={topology-uuid},{link-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLinkRef> dataContextConnectivityContextConnectionuuidSupportedClientLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supported-client-link",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of supported-client-link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyLinkRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.SwitchControl", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet", notes = "none", response = TapiConnectivitySwitchControl.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.SwitchControl", response = TapiConnectivitySwitchControl.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivitySwitchControl> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivitySwitchControl.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.SwitchControlRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet", notes = "none", response = TapiConnectivitySwitchControlRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.SwitchControlRef", response = TapiConnectivitySwitchControlRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/sub-switch-control={connection-uuid},{sub-switch-control-switch-control-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivitySwitchControlRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSubSwitchControlconnectionUuidsubSwitchControlSwitchControlUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of sub-switch-control",required=true) @PathVariable("connection-uuid") String connectionUuid,@ApiParam(value = "Id of sub-switch-control",required=true) @PathVariable("sub-switch-control-switch-control-uuid") String subSwitchControlSwitchControlUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivitySwitchControlRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.Switch", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet", notes = "none", response = TapiConnectivitySwitch.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.Switch", response = TapiConnectivitySwitch.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivitySwitch> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivitySwitch.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdNamevalueNameGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of selected-connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectionEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.RouteRef", nickname = "dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet", notes = "none", response = TapiConnectivityRouteRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.RouteRef", response = TapiConnectivityRouteRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connection={uuid}/switch-control={switch-control-uuid}/switch={local-id}/selected-route={connection-uuid},{route-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityRouteRef> dataContextConnectivityContextConnectionuuidSwitchControlswitchControlUuidSwitchlocalIdSelectedRouteconnectionUuidrouteLocalIdGet(@ApiParam(value = "Id of connection",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of switch-control",required=true) @PathVariable("switch-control-uuid") String switchControlUuid,@ApiParam(value = "Id of switch",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of selected-route",required=true) @PathVariable("connection-uuid") String connectionUuid,@ApiParam(value = "Id of selected-route",required=true) @PathVariable("route-local-id") String routeLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityRouteRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServicePost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServicePost(@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivitycontextConnectivityService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet", notes = "none", response = TapiConnectivityConnectionRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionRef", response = TapiConnectivityConnectionRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connection={connection-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionRef> dataContextConnectivityContextConnectivityServiceuuidConnectionconnectionUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of connection",required=true) @PathVariable("connection-uuid") String connectionUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connection-uuid\" : \"connection-uuid\"\n}", TapiConnectivityConnectionRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionGet", notes = "none", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceRef> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connectivity-service-uuid\" : \"connectivity-service-uuid\"\n}", TapiConnectivityConnectivityServiceRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/coroute-inclusion/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintCorouteInclusionPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidGet", notes = "none", response = TapiConnectivityConnectivityServiceRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceRef", response = TapiConnectivityConnectivityServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceRef> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connectivity-service-uuid\" : \"connectivity-service-uuid\"\n}", TapiConnectivityConnectivityServiceRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/diversity-exclusion={connectivity-service-uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintDiversityExclusionconnectivityServiceUuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("connectivity-service-uuid") String connectivityServiceUuid,@ApiParam(value = "tapi.connectivity.ConnectivityServiceRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintGet", notes = "none", response = TapiConnectivityConnectivityConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityConstraint", response = TapiConnectivityConnectivityConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityConstraint> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"requested-capacity\" : {\n    \"total-size\" : {\n      \"unit\" : \"TB\",\n      \"value\" : 0\n    }\n  },\n  \"schedule\" : {\n    \"start-time\" : \"start-time\",\n    \"end-time\" : \"end-time\"\n  },\n  \"diversity-exclusion\" : [ null, null ],\n  \"service-level\" : \"service-level\",\n  \"service-type\" : \"POINT_TO_POINT_CONNECTIVITY\",\n  \"coroute-inclusion\" : {\n    \"connectivity-service-uuid\" : \"connectivity-service-uuid\"\n  }\n}", TapiConnectivityConnectivityConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityConstraint to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ConnectivityConstraint to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/requested-capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintRequestedCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimeRange> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintScheduleGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"start-time\" : \"start-time\",\n  \"end-time\" : \"end-time\"\n}", TapiCommonTimeRange.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/connectivity-constraint/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidConnectivityConstraintSchedulePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/connection-end-point={topology-uuid},{node-uuid},{node-edge-point-uuid},{connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdConnectionEndPointtopologyUuidnodeUuidnodeEdgePointUuidconnectionEndPointUuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectionEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigDelete", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigGet", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", response = TapiEthControlFrameFilter.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthControlFrameFilter> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"c-2-00-00-0-c\" : false,\n  \"c-2-00-00-2-a\" : false,\n  \"c-2-00-00-0-b\" : false,\n  \"c-2-00-00-0-e\" : false,\n  \"c-2-00-00-2-c\" : false,\n  \"c-2-00-00-0-d\" : false,\n  \"c-2-00-00-2-b\" : false,\n  \"c-2-00-00-2-e\" : false,\n  \"c-2-00-00-0-f\" : false,\n  \"c-2-00-00-2-d\" : false,\n  \"c-2-00-00-2-f\" : false,\n  \"c-2-00-00-10\" : false,\n  \"c-2-00-00-09\" : false,\n  \"c-2-00-00-07\" : false,\n  \"c-2-00-00-29\" : false,\n  \"c-2-00-00-08\" : false,\n  \"c-2-00-00-05\" : false,\n  \"c-2-00-00-27\" : false,\n  \"c-2-00-00-06\" : false,\n  \"c-2-00-00-28\" : false,\n  \"c-2-00-00-03\" : false,\n  \"c-2-00-00-25\" : false,\n  \"c-2-00-00-04\" : false,\n  \"c-2-00-00-26\" : false,\n  \"c-2-00-00-01\" : false,\n  \"c-2-00-00-23\" : false,\n  \"c-2-00-00-02\" : false,\n  \"c-2-00-00-24\" : false,\n  \"c-2-00-00-21\" : false,\n  \"c-2-00-00-00\" : false,\n  \"c-2-00-00-22\" : false,\n  \"c-2-00-00-20\" : false,\n  \"c-2-00-00-0-a\" : false\n}", TapiEthControlFrameFilter.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPost", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.ControlFrameFilter to be added to list"  )  @Valid @RequestBody TapiEthControlFrameFilter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.ControlFrameFilter", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPut", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/filter-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacFilterConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.ControlFrameFilter to be added or updated"  )  @Valid @RequestBody TapiEthControlFrameFilter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacGet", notes = "none", response = TapiEthEthCtpCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpCommonPac", response = TapiEthEthCtpCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCtpCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"csf-rdi-fdi-enable\" : false,\n  \"vlan-config\" : 1,\n  \"filter-config\" : {\n    \"c-2-00-00-0-c\" : false,\n    \"c-2-00-00-2-a\" : false,\n    \"c-2-00-00-0-b\" : false,\n    \"c-2-00-00-0-e\" : false,\n    \"c-2-00-00-2-c\" : false,\n    \"c-2-00-00-0-d\" : false,\n    \"c-2-00-00-2-b\" : false,\n    \"c-2-00-00-2-e\" : false,\n    \"c-2-00-00-0-f\" : false,\n    \"c-2-00-00-2-d\" : false,\n    \"c-2-00-00-2-f\" : false,\n    \"c-2-00-00-10\" : false,\n    \"c-2-00-00-09\" : false,\n    \"c-2-00-00-07\" : false,\n    \"c-2-00-00-29\" : false,\n    \"c-2-00-00-08\" : false,\n    \"c-2-00-00-05\" : false,\n    \"c-2-00-00-27\" : false,\n    \"c-2-00-00-06\" : false,\n    \"c-2-00-00-28\" : false,\n    \"c-2-00-00-03\" : false,\n    \"c-2-00-00-25\" : false,\n    \"c-2-00-00-04\" : false,\n    \"c-2-00-00-26\" : false,\n    \"c-2-00-00-01\" : false,\n    \"c-2-00-00-23\" : false,\n    \"c-2-00-00-02\" : false,\n    \"c-2-00-00-24\" : false,\n    \"c-2-00-00-21\" : false,\n    \"c-2-00-00-00\" : false,\n    \"c-2-00-00-22\" : false,\n    \"c-2-00-00-20\" : false,\n    \"c-2-00-00-0-a\" : false\n  },\n  \"csf-report\" : false,\n  \"mac-length\" : 1,\n  \"traffic-shaping-pac\" : {\n    \"codirectional\" : false,\n    \"sched-config\" : \"sched-config\",\n    \"prio-config-list\" : [ null, null ],\n    \"queue-config-list\" : [ {\n      \"queue-id\" : 1,\n      \"queue-threshold\" : 1,\n      \"queue-depth\" : 7\n    }, {\n      \"queue-id\" : 1,\n      \"queue-threshold\" : 1,\n      \"queue-depth\" : 7\n    } ]\n  },\n  \"filter-config-snk\" : [ \"filter-config-snk\", \"filter-config-snk\" ],\n  \"pll-thr\" : 5,\n  \"csf-config\" : \"DISABLED\",\n  \"collector-max-delay\" : 6,\n  \"is-ssf-reported\" : false,\n  \"auxiliary-function-position-sequence\" : [ 0, 0 ],\n  \"traffic-conditioning-pac\" : {\n    \"codirectional\" : false,\n    \"cond-config-list\" : [ {\n      \"queue-id\" : 3,\n      \"coupling-flag\" : false,\n      \"cbs\" : 5,\n      \"ebs\" : 7,\n      \"cir\" : 2,\n      \"colour-mode\" : \"COLOUR_BLIND\",\n      \"eir\" : 9\n    }, {\n      \"queue-id\" : 3,\n      \"coupling-flag\" : false,\n      \"cbs\" : 5,\n      \"ebs\" : 7,\n      \"cir\" : 2,\n      \"colour-mode\" : \"COLOUR_BLIND\",\n      \"eir\" : 9\n    } ],\n    \"prio-config-list\" : [ {\n      \"queue-id\" : 4,\n      \"priority\" : 2\n    }, {\n      \"queue-id\" : 4,\n      \"priority\" : 2\n    } ]\n  }\n}", TapiEthEthCtpCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthCtpCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthCtpCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthCtpCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthCtpCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthCtpCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListPost", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningConfiguration to be added to list"  )  @Valid @RequestBody TapiEthTrafficConditioningConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdDelete", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", response = TapiEthTrafficConditioningConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficConditioningConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 3,\n  \"coupling-flag\" : false,\n  \"cbs\" : 5,\n  \"ebs\" : 7,\n  \"cir\" : 2,\n  \"colour-mode\" : \"COLOUR_BLIND\",\n  \"eir\" : 9\n}", TapiEthTrafficConditioningConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdPut", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.TrafficConditioningConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthTrafficConditioningConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacGet", notes = "none", response = TapiEthTrafficConditioningPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficConditioningPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : false,\n  \"cond-config-list\" : [ {\n    \"queue-id\" : 3,\n    \"coupling-flag\" : false,\n    \"cbs\" : 5,\n    \"ebs\" : 7,\n    \"cir\" : 2,\n    \"colour-mode\" : \"COLOUR_BLIND\",\n    \"eir\" : 9\n  }, {\n    \"queue-id\" : 3,\n    \"coupling-flag\" : false,\n    \"cbs\" : 5,\n    \"ebs\" : 7,\n    \"cir\" : 2,\n    \"colour-mode\" : \"COLOUR_BLIND\",\n    \"eir\" : 9\n  } ],\n  \"prio-config-list\" : [ {\n    \"queue-id\" : 4,\n    \"priority\" : 2\n  }, {\n    \"queue-id\" : 4,\n    \"priority\" : 2\n  } ]\n}", TapiEthTrafficConditioningPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningPac to be added to list"  )  @Valid @RequestBody TapiEthTrafficConditioningPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListPost", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added to list"  )  @Valid @RequestBody TapiEthPriorityConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdDelete", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 4,\n  \"priority\" : 2\n}", TapiEthPriorityConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdPut", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthPriorityConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.TrafficConditioningPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-conditioning-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficConditioningPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficConditioningPac to be added or updated"  )  @Valid @RequestBody TapiEthTrafficConditioningPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacGet", notes = "none", response = TapiEthTrafficShapingPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficShapingPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : false,\n  \"sched-config\" : \"sched-config\",\n  \"prio-config-list\" : [ null, null ],\n  \"queue-config-list\" : [ {\n    \"queue-id\" : 1,\n    \"queue-threshold\" : 1,\n    \"queue-depth\" : 7\n  }, {\n    \"queue-id\" : 1,\n    \"queue-threshold\" : 1,\n    \"queue-depth\" : 7\n  } ]\n}", TapiEthTrafficShapingPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficShapingPac to be added to list"  )  @Valid @RequestBody TapiEthTrafficShapingPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListPost", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added to list"  )  @Valid @RequestBody TapiEthPriorityConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdDelete", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 4,\n  \"priority\" : 2\n}", TapiEthPriorityConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.PriorityConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdPut", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.PriorityConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthPriorityConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.TrafficShapingPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.TrafficShapingPac to be added or updated"  )  @Valid @RequestBody TapiEthTrafficShapingPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListPost", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.QueueConfiguration to be added to list"  )  @Valid @RequestBody TapiEthQueueConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdDelete", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", response = TapiEthQueueConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthQueueConfiguration> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 1,\n  \"queue-threshold\" : 1,\n  \"queue-depth\" : 7\n}", TapiEthQueueConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.QueueConfiguration", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdPut", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId,@ApiParam(value = "tapi.eth.QueueConfiguration to be added or updated"  )  @Valid @RequestBody TapiEthQueueConfiguration body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacGet", notes = "none", response = TapiEthEthTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationCommonPac", response = TapiEthEthTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTerminationCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"filter-config-1\" : [ \"filter-config-1\", \"filter-config-1\" ],\n  \"ether-type\" : \"C_Tag\",\n  \"priority-code-point-config\" : \"8P0D\",\n  \"frametype-config\" : \"ADMIT_ONLY_VLAN_TAGGED_FRAMES\",\n  \"port-vid\" : \"1\",\n  \"priority-regenerate\" : {\n    \"priority-0\" : 6,\n    \"priority-1\" : 7,\n    \"priority-2\" : 1,\n    \"priority-3\" : 4,\n    \"priority-4\" : 5,\n    \"priority-5\" : 9,\n    \"priority-6\" : 9,\n    \"priority-7\" : 6\n  }\n}", TapiEthEthTerminationCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthTerminationCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthTerminationCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateDelete", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateGet", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", response = TapiEthPriorityMapping.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityMapping> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegenerateGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"priority-0\" : 6,\n  \"priority-1\" : 7,\n  \"priority-2\" : 1,\n  \"priority-3\" : 4,\n  \"priority-4\" : 5,\n  \"priority-5\" : 9,\n  \"priority-6\" : 9,\n  \"priority-7\" : 6\n}", TapiEthPriorityMapping.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePost", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityMapping to be added to list"  )  @Valid @RequestBody TapiEthPriorityMapping body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.PriorityMapping", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePut", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/priority-regenerate/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPriorityRegeneratePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.PriorityMapping to be added or updated"  )  @Valid @RequestBody TapiEthPriorityMapping body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/eth-termination-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEthTerminationCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthTerminationCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthTerminationCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacGet", notes = "none", response = TapiEthEtyTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationCommonPac", response = TapiEthEtyTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEtyTerminationCommonPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-fts-enabled\" : false,\n  \"is-tx-pause-enabled\" : false\n}", TapiEthEtyTerminationCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EtyTerminationCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEtyTerminationCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EtyTerminationCommonPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/ety-termination-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecEtyTerminationCommonPacPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EtyTerminationCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEtyTerminationCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecGet", notes = "none", response = TapiEthEthConnectivityServiceEndPointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectivityServiceEndPointSpec", response = TapiEthEthConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-ctp-common-pac\" : {\n    \"csf-rdi-fdi-enable\" : false,\n    \"vlan-config\" : 1,\n    \"filter-config\" : {\n      \"c-2-00-00-0-c\" : false,\n      \"c-2-00-00-2-a\" : false,\n      \"c-2-00-00-0-b\" : false,\n      \"c-2-00-00-0-e\" : false,\n      \"c-2-00-00-2-c\" : false,\n      \"c-2-00-00-0-d\" : false,\n      \"c-2-00-00-2-b\" : false,\n      \"c-2-00-00-2-e\" : false,\n      \"c-2-00-00-0-f\" : false,\n      \"c-2-00-00-2-d\" : false,\n      \"c-2-00-00-2-f\" : false,\n      \"c-2-00-00-10\" : false,\n      \"c-2-00-00-09\" : false,\n      \"c-2-00-00-07\" : false,\n      \"c-2-00-00-29\" : false,\n      \"c-2-00-00-08\" : false,\n      \"c-2-00-00-05\" : false,\n      \"c-2-00-00-27\" : false,\n      \"c-2-00-00-06\" : false,\n      \"c-2-00-00-28\" : false,\n      \"c-2-00-00-03\" : false,\n      \"c-2-00-00-25\" : false,\n      \"c-2-00-00-04\" : false,\n      \"c-2-00-00-26\" : false,\n      \"c-2-00-00-01\" : false,\n      \"c-2-00-00-23\" : false,\n      \"c-2-00-00-02\" : false,\n      \"c-2-00-00-24\" : false,\n      \"c-2-00-00-21\" : false,\n      \"c-2-00-00-00\" : false,\n      \"c-2-00-00-22\" : false,\n      \"c-2-00-00-20\" : false,\n      \"c-2-00-00-0-a\" : false\n    },\n    \"csf-report\" : false,\n    \"mac-length\" : 1,\n    \"traffic-shaping-pac\" : {\n      \"codirectional\" : false,\n      \"sched-config\" : \"sched-config\",\n      \"prio-config-list\" : [ null, null ],\n      \"queue-config-list\" : [ {\n        \"queue-id\" : 1,\n        \"queue-threshold\" : 1,\n        \"queue-depth\" : 7\n      }, {\n        \"queue-id\" : 1,\n        \"queue-threshold\" : 1,\n        \"queue-depth\" : 7\n      } ]\n    },\n    \"filter-config-snk\" : [ \"filter-config-snk\", \"filter-config-snk\" ],\n    \"pll-thr\" : 5,\n    \"csf-config\" : \"DISABLED\",\n    \"collector-max-delay\" : 6,\n    \"is-ssf-reported\" : false,\n    \"auxiliary-function-position-sequence\" : [ 0, 0 ],\n    \"traffic-conditioning-pac\" : {\n      \"codirectional\" : false,\n      \"cond-config-list\" : [ {\n        \"queue-id\" : 3,\n        \"coupling-flag\" : false,\n        \"cbs\" : 5,\n        \"ebs\" : 7,\n        \"cir\" : 2,\n        \"colour-mode\" : \"COLOUR_BLIND\",\n        \"eir\" : 9\n      }, {\n        \"queue-id\" : 3,\n        \"coupling-flag\" : false,\n        \"cbs\" : 5,\n        \"ebs\" : 7,\n        \"cir\" : 2,\n        \"colour-mode\" : \"COLOUR_BLIND\",\n        \"eir\" : 9\n      } ],\n      \"prio-config-list\" : [ {\n        \"queue-id\" : 4,\n        \"priority\" : 2\n      }, {\n        \"queue-id\" : 4,\n        \"priority\" : 2\n      } ]\n    }\n  },\n  \"eth-termination-common-pac\" : {\n    \"filter-config-1\" : [ \"filter-config-1\", \"filter-config-1\" ],\n    \"ether-type\" : \"C_Tag\",\n    \"priority-code-point-config\" : \"8P0D\",\n    \"frametype-config\" : \"ADMIT_ONLY_VLAN_TAGGED_FRAMES\",\n    \"port-vid\" : \"1\",\n    \"priority-regenerate\" : {\n      \"priority-0\" : 6,\n      \"priority-1\" : 7,\n      \"priority-2\" : 1,\n      \"priority-3\" : 4,\n      \"priority-4\" : 5,\n      \"priority-5\" : 9,\n      \"priority-6\" : 9,\n      \"priority-7\" : 6\n    }\n  },\n  \"ety-termination-common-pac\" : {\n    \"is-fts-enabled\" : false,\n    \"is-tx-pause-enabled\" : false\n  }\n}", TapiEthEthConnectivityServiceEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiEthEthConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/eth-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdEthConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiEthEthConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPoint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.connectivityservice.EndPoint", response = TapiConnectivityConnectivityServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceEndPoint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivityServiceEndPoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-management-config\" : {\n    \"expected-maximum-input-power\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    }\n  },\n  \"mc-config\" : {\n    \"spectrum\" : {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    }\n  }\n}", TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigGet", notes = "none", response = TapiPhotonicMediaMediaChannelConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConfigPac", response = TapiPhotonicMediaMediaChannelConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"spectrum\" : {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  }\n}", TapiPhotonicMediaMediaChannelConfigPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/mc-config/spectrum/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecMcConfigSpectrumPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigDelete", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerDelete", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerGet", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPost", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPut", notes = "This parameter shall be used to specify the maximum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMaximumInputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerDelete", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerGet", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPost", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPut", notes = "This parameter shall be used to specify the minimum input power                  being received at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/expected-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigExpectedMinimumInputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigGet", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", response = TapiPhotonicMediaPowerManagementConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementConfigPac", response = TapiPhotonicMediaPowerManagementConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerManagementConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"expected-maximum-input-power\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  }\n}", TapiPhotonicMediaPowerManagementConfigPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerDelete", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerGet", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPost", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPut", notes = "This parameter shall be used to specify the maximum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMaximumOutputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerDelete", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerGet", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPost", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPut", notes = "This parameter shall be used to specify the minimum output power                  desired at the Logical-Termination-Point (LTP) associated to the CSEP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/intended-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigIntendedMinimumOutputPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPost", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerManagementConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPut", notes = "This parameters shall be used to configure the expected                  and intended (desired) power levels at the endpoints of the media                  Channel connectivity service. These parameters are dependent of the                  related OTSi power-management capabilities exposed at the SIPs", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/power-management-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPowerManagementConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerManagementConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/media-channel-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdMediaChannelConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.MediaChannelConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduPayloadType", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecAcceptedPayloadTypeGet", notes = "This attribute is applicable when the ODU CTP object instance represents a lower order ODU CTP Sink at the client layer of the ODUP/ODU[i]j or ODUP/ODUj-21 adaptation function.                   This attribute is a 2-digit Hex code that indicates the new accepted payload type.                  Valid values are defined in Table 15-8 of ITU-T Recommendation G.709 with one additional value UN_INTERPRETABLE.", response = TapiOduOduPayloadType.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduPayloadType", response = TapiOduOduPayloadType.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/odu-connectivity-service-end-point-spec/accepted-payload-type/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduPayloadType> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecAcceptedPayloadTypeGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"hex-payload-type\" : 0,\n  \"named-payload-type\" : \"UNKNOWN\"\n}", TapiOduOduPayloadType.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.odu.OduConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/odu-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecGet", notes = "none", response = TapiOduOduConnectivityServiceEndPointSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduConnectivityServiceEndPointSpec", response = TapiOduOduConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/odu-connectivity-service-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"accepted-payload-type\" : {\n    \"hex-payload-type\" : 0,\n    \"named-payload-type\" : \"UNKNOWN\"\n  },\n  \"opu-tributary-slot-size\" : \"1G25\",\n  \"tributary-port-number\" : 6,\n  \"tributary-slot-list\" : [ 1, 1 ],\n  \"configured-mapping-type\" : \"AMP\",\n  \"odu-type\" : \"odu-type\"\n}", TapiOduOduConnectivityServiceEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.odu.OduConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/odu-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.odu.OduConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiOduOduConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.odu.OduConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/odu-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOduConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.odu.OduConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiOduOduConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", response = TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"otsi-config\" : {\n    \"application-identifier\" : {\n      \"application-identifier-type\" : \"PROPRIETARY\",\n      \"application-code\" : \"application-code\"\n    },\n    \"central-frequency\" : {\n      \"central-frequency\" : 0,\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      }\n    },\n    \"modulation\" : \"RZ\",\n    \"spectrum\" : {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    },\n    \"laser-control\" : \"FORCED-ON\",\n    \"total-power-warn-threshold-lower\" : \"total-power-warn-threshold-lower\",\n    \"total-power-warn-threshold-upper\" : \"total-power-warn-threshold-upper\",\n    \"transmit-power\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    }\n  }\n}", TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet", notes = "This attribute indicates the selected Application Identifier.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"application-identifier-type\" : \"PROPRIETARY\",\n  \"application-code\" : \"application-code\"\n}", TapiPhotonicMediaApplicationIdentifier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaApplicationIdentifier body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut", notes = "This attribute indicates the selected Application Identifier.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/application-identifier/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigApplicationIdentifierPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.ApplicationIdentifier to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaApplicationIdentifier body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaCentralFrequency> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"central-frequency\" : 0,\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  }\n}", TapiPhotonicMediaCentralFrequency.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaCentralFrequency body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.CentralFrequency", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut", notes = "The central frequency of the laser. It is the oscillation frequency of the corresponding electromagnetic wave", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/central-frequency/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigCentralFrequencyPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.CentralFrequency to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaCentralFrequency body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet", notes = "none", response = TapiPhotonicMediaOtsiTerminationConfigPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationConfigPac", response = TapiPhotonicMediaOtsiTerminationConfigPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiTerminationConfigPac> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"application-identifier\" : {\n    \"application-identifier-type\" : \"PROPRIETARY\",\n    \"application-code\" : \"application-code\"\n  },\n  \"central-frequency\" : {\n    \"central-frequency\" : 0,\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    }\n  },\n  \"modulation\" : \"RZ\",\n  \"spectrum\" : {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  },\n  \"laser-control\" : \"FORCED-ON\",\n  \"total-power-warn-threshold-lower\" : \"total-power-warn-threshold-lower\",\n  \"total-power-warn-threshold-upper\" : \"total-power-warn-threshold-upper\",\n  \"transmit-power\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  }\n}", TapiPhotonicMediaOtsiTerminationConfigPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiTerminationConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiTerminationConfigPac", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiTerminationConfigPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiTerminationConfigPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.FrequencyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/frequency-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumFrequencyConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.FrequencyConstraint to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaFrequencyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.SpectrumBand", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/spectrum/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigSpectrumPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.SpectrumBand to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaSpectrumBand body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet", notes = "Transmit power as requested.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut", notes = "Transmit power as requested.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/otsi-config/transmit-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecOtsiConfigTransmitPowerPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiConnectivityServiceEndPointSpec", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/otsi-connectivity-service-end-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdOtsiConnectivityServiceEndPointSpecPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.photonic.media.OtsiConnectivityServiceEndPointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiConnectivityServiceEndPointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivityServiceEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/peer-fwd-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPeerFwdConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivityServiceEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/protecting-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdProtectingConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.connectivityservice.EndPoint", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.connectivityservice.EndPoint to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivityServiceEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/server-connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServerConnectivityServiceEndPointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceGet", notes = "none", response = TapiEthEthConnectivityService.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectivityService", response = TapiEthEthConnectivityService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthConnectivityService> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServiceGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthConnectivityService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthConnectivityService to be added to list"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/eth-connectivity-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidEthConnectivityServicePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthConnectivityService to be added or updated"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidGet", notes = "none", response = TapiConnectivityConnectivitycontextConnectivityService.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.connectivitycontext.ConnectivityService", response = TapiConnectivityConnectivitycontextConnectivityService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivitycontextConnectivityService> dataContextConnectivityContextConnectivityServiceuuidGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivitycontextConnectivityService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.connectivitycontext.ConnectivityService", nickname = "dataContextConnectivityContextConnectivityServiceuuidPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.connectivitycontext.ConnectivityService to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivitycontextConnectivityService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintGet", notes = "none", response = TapiConnectivityResilienceConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ResilienceConstraint", response = TapiConnectivityResilienceConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityResilienceConstraint> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-lock-out\" : false,\n  \"max-switch-times\" : 6,\n  \"protection-type\" : \"NO_PROTECTION\",\n  \"hold-off-time\" : 0,\n  \"wait-to-revert-time\" : 5,\n  \"selection-control\" : \"LOCK_OUT\",\n  \"preferred-restoration-layer\" : [ \"ODU\", \"ODU\" ],\n  \"restore-priority\" : 1,\n  \"restoration-policy\" : \"PER_DOMAIN_RESTORATION\",\n  \"restoration-coordinate-type\" : \"NO_COORDINATE\",\n  \"fault-condition-determination\" : \"fault-condition-determination\",\n  \"is-coordinated-switching-both-ends\" : false,\n  \"is-frozen\" : false,\n  \"reversion-mode\" : \"REVERTIVE\"\n}", TapiConnectivityResilienceConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ResilienceConstraint to be added to list"  )  @Valid @RequestBody TapiConnectivityResilienceConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ResilienceConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/resilience-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidResilienceConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.connectivity.ResilienceConstraint to be added or updated"  )  @Valid @RequestBody TapiConnectivityResilienceConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationRoutingConstraint> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-exclusive\" : true,\n  \"diversity-policy\" : \"SRLG\",\n  \"tolerable-impact\" : \"tolerable-impact\",\n  \"route-objective-function\" : \"MIN_WORK_ROUTE_HOP\",\n  \"cost-characteristic\" : [ {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  }, {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  } ],\n  \"latency-characteristic\" : [ {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  }, {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  } ],\n  \"risk-diversity-characteristic\" : [ {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  }, {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  } ]\n}", TapiPathComputationRoutingConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.RoutingConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.RiskCharacteristic", nickname = "dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintPost", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdDelete", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdGet", notes = "none", response = TapiPathComputationTopologyConstraint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationTopologyConstraint> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationTopologyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamePost(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.TopologyConstraint", nickname = "dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdPut", notes = "none", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/connectivity-service={uuid}/topology-constraint={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextConnectivityServiceuuidTopologyConstraintlocalIdPut(@ApiParam(value = "Id of connectivity-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextDelete", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextConnectivityContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextGet", notes = "Augments the base TAPI Context with ConnectivityService information", response = TapiConnectivityContextConnectivityContext.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.context.ConnectivityContext", response = TapiConnectivityContextConnectivityContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityContextConnectivityContext> dataContextConnectivityContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityContextConnectivityContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextPost", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextConnectivityContextPost(@ApiParam(value = "tapi.connectivity.context.ConnectivityContext to be added to list"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.context.ConnectivityContext", nickname = "dataContextConnectivityContextPut", notes = "Augments the base TAPI Context with ConnectivityService information", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/connectivity-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextConnectivityContextPut(@ApiParam(value = "tapi.connectivity.context.ConnectivityContext to be added or updated"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.Context", nickname = "dataContextDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Context", nickname = "dataContextGet", notes = "none", response = TapiCommonContext.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Context", response = TapiCommonContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonContext> dataContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiCommonContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNamePost(@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNamevalueNameDelete(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNamevalueNamePut(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextDelete", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNotificationContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextGet", notes = "Augments the base TAPI Context with NotificationService information", response = TapiNotificationContextNotificationContext.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.context.NotificationContext", response = TapiNotificationContextNotificationContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationContextNotificationContext> dataContextNotificationContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationContextNotificationContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionPost(@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added to list"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidGet", notes = "none", response = TapiNotificationNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationSubscriptionService", response = TapiNotificationNotificationSubscriptionService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNotificationSubscriptionService> dataContextNotificationContextNotifSubscriptionuuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationNotificationSubscriptionService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.NotificationChannel", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet", notes = "none", response = TapiNotificationNotificationChannel.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NotificationChannel", response = TapiNotificationNotificationChannel.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification-channel/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNotificationChannel> dataContextNotificationContextNotifSubscriptionuuidNotificationChannelGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationNotificationChannel.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification-channel/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationChannelNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/additional-info={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/changed-attributes={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNameAndValueChange> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"old-value\" : \"old-value\",\n  \"new-value\" : \"new-value\"\n}", TapiNotificationNameAndValueChange.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.Notification", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet", notes = "none", response = TapiNotificationNotification.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.Notification", response = TapiNotificationNotification.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNotification> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationNotification.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/notification={notification-uuid}/target-object-name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidNotificationnotificationUuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of notification",required=true) @PathVariable("notification-uuid") String notificationUuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.notification.NotificationSubscriptionService", nickname = "dataContextNotificationContextNotifSubscriptionuuidPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.NotificationSubscriptionService to be added or updated"  )  @Valid @RequestBody TapiNotificationNotificationSubscriptionService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet", notes = "none", response = TapiNotificationSubscriptionFilter.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.SubscriptionFilter", response = TapiNotificationSubscriptionFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationSubscriptionFilter> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationSubscriptionFilter.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamePost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameDelete(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNameGet(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterNamevalueNamePut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPost(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added to list"  )  @Valid @RequestBody TapiNotificationSubscriptionFilter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.notification.SubscriptionFilter", nickname = "dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut", notes = "none", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notif-subscription={uuid}/subscription-filter/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNotificationContextNotifSubscriptionuuidSubscriptionFilterPut(@ApiParam(value = "Id of notif-subscription",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.notification.SubscriptionFilter to be added or updated"  )  @Valid @RequestBody TapiNotificationSubscriptionFilter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/additional-info={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidAdditionalInfovalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of additional-info",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.AlarmInfo", nickname = "dataContextNotificationContextNotificationuuidAlarmInfoGet", notes = "none", response = TapiOamAlarmInfo.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.AlarmInfo", response = TapiOamAlarmInfo.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/alarm-info/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamAlarmInfo> dataContextNotificationContextNotificationuuidAlarmInfoGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"probable-cause\" : \"probable-cause\",\n  \"is-transient\" : false,\n  \"service-affecting\" : \"SERVICE_AFFECTING\",\n  \"perceived-severity\" : \"CRITICAL\"\n}", TapiOamAlarmInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.NameAndValueChange", nickname = "dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet", notes = "none", response = TapiNotificationNameAndValueChange.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.NameAndValueChange", response = TapiNotificationNameAndValueChange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/changed-attributes={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNameAndValueChange> dataContextNotificationContextNotificationuuidChangedAttributesvalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of changed-attributes",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"old-value\" : \"old-value\",\n  \"new-value\" : \"new-value\"\n}", TapiNotificationNameAndValueChange.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.notification.notificationcontext.Notification", nickname = "dataContextNotificationContextNotificationuuidGet", notes = "none", response = TapiNotificationNotificationcontextNotification.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.notification.notificationcontext.Notification", response = TapiNotificationNotificationcontextNotification.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiNotificationNotificationcontextNotification> dataContextNotificationContextNotificationuuidGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiNotificationNotificationcontextNotification.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet", notes = "none", response = TapiCommonNameAndValue.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/target-object-name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextNotificationContextNotificationuuidTargetObjectNamevalueNameGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of target-object-name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.TcaInfo", nickname = "dataContextNotificationContextNotificationuuidTcaInfoGet", notes = "none", response = TapiOamTcaInfo.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.TcaInfo", response = TapiOamTcaInfo.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamTcaInfo> dataContextNotificationContextNotificationuuidTcaInfoGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"oam-job\" : {\n    \"oam-job-uuid\" : \"oam-job-uuid\"\n  },\n  \"threshold-parameter\" : {\n    \"pm-parameter-name\" : \"pm-parameter-name\",\n    \"pm-parameter-above-thrs\" : {\n      \"pm-parameter-int-value\" : 0,\n      \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n    },\n    \"threshold-location\" : \"NOT_APPLICABLE\"\n  },\n  \"is-transient\" : false,\n  \"perceived-severity\" : \"WARNING\",\n  \"suspect-interval-flag\" : false,\n  \"measurement-interval\" : \"measurement-interval\"\n}", TapiOamTcaInfo.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.OamJobRef", nickname = "dataContextNotificationContextNotificationuuidTcaInfoOamJobGet", notes = "MEF 35.1                  Identification of the PM Session for which the TCA Function was configured.", response = TapiOamOamJobRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamJobRef", response = TapiOamOamJobRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/oam-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamJobRef> dataContextNotificationContextNotificationuuidTcaInfoOamJobGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"oam-job-uuid\" : \"oam-job-uuid\"\n}", TapiOamOamJobRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.ThresholdParameter", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterGet", notes = "none", response = TapiOamThresholdParameter.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.ThresholdParameter", response = TapiOamThresholdParameter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamThresholdParameter> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-name\" : \"pm-parameter-name\",\n  \"pm-parameter-above-thrs\" : {\n    \"pm-parameter-int-value\" : 0,\n    \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n  },\n  \"threshold-location\" : \"NOT_APPLICABLE\"\n}", TapiOamThresholdParameter.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterAboveThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-above-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterAboveThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterBelowThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-below-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterBelowThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterClearThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/notification={uuid}/tca-info/threshold-parameter/pm-parameter-clear-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextNotificationContextNotificationuuidTcaInfoThresholdParameterPmParameterClearThrsGet(@ApiParam(value = "Id of notification",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextPost", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/notification-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextNotificationContextPost(@ApiParam(value = "tapi.notification.context.NotificationContext to be added to list"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.notification.context.NotificationContext", nickname = "dataContextNotificationContextPut", notes = "Augments the base TAPI Context with NotificationService information", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/notification-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextNotificationContextPut(@ApiParam(value = "tapi.notification.context.NotificationContext to be added or updated"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.context.OamContext", nickname = "dataContextOamContextDelete", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.context.OamContext", nickname = "dataContextOamContextGet", notes = "Augments the base TAPI Context with OamService information", response = TapiOamContextOamContext.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.context.OamContext", response = TapiOamContextOamContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamContextOamContext> dataContextOamContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamContextOamContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationGet", notes = "none", response = TapiEthEthCfmMaintenanceAssociation.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceAssociation", response = TapiEthEthCfmMaintenanceAssociation.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-association/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmMaintenanceAssociation> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"maintenance-association-name\" : {\n    \"char-string\" : \"char-string\",\n    \"ieee-reserved\" : \"0\",\n    \"unsigned-int-16\" : 0,\n    \"icc-format\" : \"icc-format\",\n    \"primary-vlan-id\" : \"primary-vlan-id\",\n    \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n  },\n  \"id-permission\" : \"id-permission\"\n}", TapiEthEthCfmMaintenanceAssociation.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationMaintenanceAssociationNameGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", response = TapiEthMaintenanceAssociationName.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.MaintenanceAssociationName", response = TapiEthMaintenanceAssociationName.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-association/maintenance-association-name/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthMaintenanceAssociationName> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceAssociationMaintenanceAssociationNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"char-string\" : \"char-string\",\n  \"ieee-reserved\" : \"0\",\n  \"unsigned-int-16\" : 0,\n  \"icc-format\" : \"icc-format\",\n  \"primary-vlan-id\" : \"primary-vlan-id\",\n  \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n}", TapiEthMaintenanceAssociationName.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceDomainGet", notes = "none", response = TapiEthEthCfmMaintenanceDomain.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceDomain", response = TapiEthEthCfmMaintenanceDomain.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-cfm-maintenance-domain/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmMaintenanceDomain> dataContextOamContextMeguuidEthMegSpecEthCfmMaintenanceDomainGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"maintenance-domain-name-type\" : \"maintenance-domain-name-type\",\n  \"maintenance-domain-name\" : \"maintenance-domain-name\"\n}", TapiEthEthCfmMaintenanceDomain.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMegCommon", nickname = "dataContextOamContextMeguuidEthMegSpecEthMegCommonGet", notes = "none", response = TapiEthEthMegCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegCommon", response = TapiEthEthMegCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/eth-meg-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMegCommon> dataContextOamContextMeguuidEthMegSpecEthMegCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"meg-identifier\" : \"meg-identifier\",\n  \"meg-level\" : 1,\n  \"client-mel\" : 6,\n  \"is-cc-enabled\" : false,\n  \"cc-period\" : \"3_33MS\"\n}", TapiEthEthMegCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMegSpec", nickname = "dataContextOamContextMeguuidEthMegSpecGet", notes = "none", response = TapiEthEthMegSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegSpec", response = TapiEthEthMegSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/eth-meg-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMegSpec> dataContextOamContextMeguuidEthMegSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-cfm-maintenance-association\" : {\n    \"maintenance-association-name\" : {\n      \"char-string\" : \"char-string\",\n      \"ieee-reserved\" : \"0\",\n      \"unsigned-int-16\" : 0,\n      \"icc-format\" : \"icc-format\",\n      \"primary-vlan-id\" : \"primary-vlan-id\",\n      \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n    },\n    \"id-permission\" : \"id-permission\"\n  },\n  \"eth-cfm-maintenance-domain\" : {\n    \"maintenance-domain-name-type\" : \"maintenance-domain-name-type\",\n    \"maintenance-domain-name\" : \"maintenance-domain-name\"\n  },\n  \"eth-meg-common\" : {\n    \"meg-identifier\" : \"meg-identifier\",\n    \"meg-level\" : 1,\n    \"client-mel\" : 6,\n    \"is-cc-enabled\" : false,\n    \"cc-period\" : \"3_33MS\"\n  }\n}", TapiEthEthMegSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.oamcontext.Meg", nickname = "dataContextOamContextMeguuidGet", notes = "none", response = TapiOamOamcontextMeg.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.Meg", response = TapiOamOamcontextMeg.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamcontextMeg> dataContextOamContextMeguuidGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamcontextMeg.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepCommon", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet", notes = "none", response = TapiEthEthMepCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepCommon> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : true,\n  \"cc-priority\" : 0,\n  \"lck-period\" : \"3_33MS\",\n  \"lck-priority\" : 6,\n  \"mep-identifier\" : 1\n}", TapiEthEthMepCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.BandwidthReport", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet", notes = "This attribute models the content of the bandwidth report received by the MEP Sink from the peer MEP Source.", response = TapiEthBandwidthReport.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/bandwidth-report/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthBandwidthReport> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkBandwidthReportGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"source-mac-address\" : \"source-mac-address\",\n  \"current-bandwidth\" : 5,\n  \"nominal-bandwidth\" : 2,\n  \"port-id\" : 7\n}", TapiEthBandwidthReport.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepSink", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet", notes = "none", response = TapiEthEthMepSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSink", response = TapiEthEthMepSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-sink/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepSink> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSinkGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"peer-mep-identifier\" : [ 7, 7 ],\n  \"is-csf-reported\" : true,\n  \"lm-m\" : 2,\n  \"lm-deg-thr\" : 9,\n  \"bandwidth-report\" : {\n    \"source-mac-address\" : \"source-mac-address\",\n    \"current-bandwidth\" : 5,\n    \"nominal-bandwidth\" : 2,\n    \"port-id\" : 7\n  },\n  \"is-csf-rdi-fdi-enabled\" : true,\n  \"lm-degm\" : 3,\n  \"ais-priority\" : 5,\n  \"lm-tf-min\" : 4,\n  \"unexpected-ltr-received\" : 1\n}", TapiEthEthMepSink.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepSource", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourceGet", notes = "none", response = TapiEthEthMepSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSource", response = TapiEthEthMepSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/eth-mep-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepSource> dataContextOamContextMeguuidMeplocalIdEthMepSpecEthMepSourceGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"aps-priority\" : 1,\n  \"csf-priority\" : 1,\n  \"csf-config\" : \"DISABLED\"\n}", TapiEthEthMepSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepSpec", nickname = "dataContextOamContextMeguuidMeplocalIdEthMepSpecGet", notes = "none", response = TapiEthEthMepSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSpec", response = TapiEthEthMepSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/eth-mep-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepSpec> dataContextOamContextMeguuidMeplocalIdEthMepSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-mep-sink\" : {\n    \"peer-mep-identifier\" : [ 7, 7 ],\n    \"is-csf-reported\" : true,\n    \"lm-m\" : 2,\n    \"lm-deg-thr\" : 9,\n    \"bandwidth-report\" : {\n      \"source-mac-address\" : \"source-mac-address\",\n      \"current-bandwidth\" : 5,\n      \"nominal-bandwidth\" : 2,\n      \"port-id\" : 7\n    },\n    \"is-csf-rdi-fdi-enabled\" : true,\n    \"lm-degm\" : 3,\n    \"ais-priority\" : 5,\n    \"lm-tf-min\" : 4,\n    \"unexpected-ltr-received\" : 1\n  },\n  \"eth-mep-common\" : {\n    \"codirectional\" : true,\n    \"cc-priority\" : 0,\n    \"lck-period\" : \"3_33MS\",\n    \"lck-priority\" : 6,\n    \"mep-identifier\" : 1\n  },\n  \"eth-mep-source\" : {\n    \"aps-priority\" : 1,\n    \"csf-priority\" : 1,\n    \"csf-config\" : \"DISABLED\"\n  },\n  \"mep-mac\" : \"mep-mac\"\n}", TapiEthEthMepSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.meg.Mep", nickname = "dataContextOamContextMeguuidMeplocalIdGet", notes = "1. ME may have 0 MEPs (case of transit domains where at least 1 MIP is present)                  2. ME may have 1 MEP (case of edge domaind, where the peer MEP is ouside the managed domain)                  3. ME may have 2 MEPs", response = TapiOamMegMep.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.meg.Mep", response = TapiOamMegMep.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMegMep> dataContextOamContextMeguuidMeplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMegMep.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidMeplocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidMeplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduMepSpec", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecGet", notes = "none", response = TapiOduOduMepSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduMepSpec", response = TapiOduOduMepSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduMepSpec> dataContextOamContextMeguuidMeplocalIdOduMepSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"odu-mep\" : \"\",\n  \"odu-ncm\" : {\n    \"tcm-fields-in-use\" : [ 0, 0 ]\n  },\n  \"odu-defect\" : {\n    \"oci\" : false,\n    \"lck\" : false,\n    \"bdi\" : false,\n    \"deg\" : false,\n    \"ssf\" : false,\n    \"tim\" : false\n  },\n  \"odu-pm\" : {\n    \"n-bbe\" : 5,\n    \"n-ses\" : 5,\n    \"uas\" : {\n      \"fuas\" : 2,\n      \"bidirectional\" : true,\n      \"uas\" : 9,\n      \"nuas\" : 7\n    },\n    \"f-ses\" : 1,\n    \"f-bbe\" : 6\n  },\n  \"odu-tcm\" : {\n    \"admin-state-sink\" : \"LOCKED\",\n    \"codirectional\" : false,\n    \"tcm-extension\" : \"NORMAL\",\n    \"ac-status-sink\" : \"NO_SOURCE_TC\",\n    \"tcm-mode\" : \"OPERATIONAL\",\n    \"tcm-field\" : 3\n  }\n}", TapiOduOduMepSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduDefectPac", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduDefectGet", notes = "none", response = TapiOduOduDefectPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduDefectPac", response = TapiOduOduDefectPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-defect/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduDefectPac> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduDefectGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"oci\" : false,\n  \"lck\" : false,\n  \"bdi\" : false,\n  \"deg\" : false,\n  \"ssf\" : false,\n  \"tim\" : false\n}", TapiOduOduDefectPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.DegThr", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduMepDegThrGet", notes = "This attribute indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. The value of the threshold can be provisioned in terms of number of errored blocks or in terms of percentage of errored blocks. For percentage-based specification, in order to support provision of less than 1%, the specification consists of two fields. The first field indicates the granularity of percentage. For examples, in 1%, in 0.1%, or in 0.01%, etc. The second field indicates the multiple of the granularity. For number of errored block based, the value is a positive integer.", response = TapiOduDegThr.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.DegThr", response = TapiOduDegThr.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-mep/deg-thr/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduDegThr> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduMepDegThrGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"deg-thr-value\" : 0,\n  \"deg-thr-type\" : \"PERCENTAGE\",\n  \"percentage-granularity\" : \"ONES\"\n}", TapiOduDegThr.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduMepPac", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduMepGet", notes = "none", response = TapiOduOduMepPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduMepPac", response = TapiOduOduMepPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-mep/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduMepPac> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduMepGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOduOduMepPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduNcmPac", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduNcmGet", notes = "none", response = TapiOduOduNcmPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduNcmPac", response = TapiOduOduNcmPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-ncm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduNcmPac> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduNcmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"tcm-fields-in-use\" : [ 0, 0 ]\n}", TapiOduOduNcmPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduPmPac", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduPmGet", notes = "none", response = TapiOduOduPmPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduPmPac", response = TapiOduOduPmPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-pm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduPmPac> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduPmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"n-bbe\" : 5,\n  \"n-ses\" : 5,\n  \"uas\" : {\n    \"fuas\" : 2,\n    \"bidirectional\" : true,\n    \"uas\" : 9,\n    \"nuas\" : 7\n  },\n  \"f-ses\" : 1,\n  \"f-bbe\" : 6\n}", TapiOduOduPmPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.UasChoice", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduPmUasGet", notes = "UnAvailable Second", response = TapiOduUasChoice.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.UasChoice", response = TapiOduUasChoice.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-pm/uas/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduUasChoice> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduPmUasGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"fuas\" : 2,\n  \"bidirectional\" : true,\n  \"uas\" : 9,\n  \"nuas\" : 7\n}", TapiOduUasChoice.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduTcmMepPac", nickname = "dataContextOamContextMeguuidMeplocalIdOduMepSpecOduTcmGet", notes = "none", response = TapiOduOduTcmMepPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduTcmMepPac", response = TapiOduOduTcmMepPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mep={local-id}/odu-mep-spec/odu-tcm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduTcmMepPac> dataContextOamContextMeguuidMeplocalIdOduMepSpecOduTcmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"admin-state-sink\" : \"LOCKED\",\n  \"codirectional\" : false,\n  \"tcm-extension\" : \"NORMAL\",\n  \"ac-status-sink\" : \"NO_SOURCE_TC\",\n  \"tcm-mode\" : \"OPERATIONAL\",\n  \"tcm-field\" : 3\n}", TapiOduOduTcmMepPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMipCommon", nickname = "dataContextOamContextMeguuidMiplocalIdEthMipSpecEthMipCommonGet", notes = "none", response = TapiEthEthMipCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipCommon", response = TapiEthEthMipCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/eth-mip-spec/eth-mip-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMipCommon> dataContextOamContextMeguuidMiplocalIdEthMipSpecEthMipCommonGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-full-mip\" : false\n}", TapiEthEthMipCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMipSpec", nickname = "dataContextOamContextMeguuidMiplocalIdEthMipSpecGet", notes = "none", response = TapiEthEthMipSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipSpec", response = TapiEthEthMipSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/eth-mip-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMipSpec> dataContextOamContextMeguuidMiplocalIdEthMipSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"mip-mac\" : \"mip-mac\",\n  \"eth-mip-common\" : {\n    \"is-full-mip\" : false\n  }\n}", TapiEthEthMipSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.meg.Mip", nickname = "dataContextOamContextMeguuidMiplocalIdGet", notes = "ME may 0, 1, or more MIPs", response = TapiOamMegMip.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.meg.Mip", response = TapiOamMegMip.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMegMip> dataContextOamContextMeguuidMiplocalIdGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMegMip.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidMiplocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidMiplocalIdNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduMipSpec", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecGet", notes = "none", response = TapiOduOduMipSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduMipSpec", response = TapiOduOduMipSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduMipSpec> dataContextOamContextMeguuidMiplocalIdOduMipSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"odu-ncm\" : {\n    \"tcm-fields-in-use\" : [ 0, 0 ]\n  },\n  \"odu-defect\" : {\n    \"oci\" : false,\n    \"lck\" : false,\n    \"bdi\" : false,\n    \"deg\" : false,\n    \"ssf\" : false,\n    \"tim\" : false\n  },\n  \"odu-mip\" : {\n    \"tim-det-mode\" : \"DAPI\",\n    \"ex-dapi\" : \"ex-dapi\",\n    \"deg-m\" : 0,\n    \"acti\" : \"acti\",\n    \"ex-sapi\" : \"ex-sapi\",\n    \"deg-thr\" : {\n      \"deg-thr-value\" : 0,\n      \"deg-thr-type\" : \"PERCENTAGE\",\n      \"percentage-granularity\" : \"ONES\"\n    },\n    \"tim-act-disabled\" : true\n  },\n  \"odu-pm\" : {\n    \"n-bbe\" : 5,\n    \"n-ses\" : 5,\n    \"uas\" : {\n      \"fuas\" : 2,\n      \"bidirectional\" : true,\n      \"uas\" : 9,\n      \"nuas\" : 7\n    },\n    \"f-ses\" : 1,\n    \"f-bbe\" : 6\n  },\n  \"odu-tcm\" : {\n    \"codirectional\" : false,\n    \"tcm-field\" : 6\n  }\n}", TapiOduOduMipSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduDefectPac", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduDefectGet", notes = "none", response = TapiOduOduDefectPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduDefectPac", response = TapiOduOduDefectPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-defect/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduDefectPac> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduDefectGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"oci\" : false,\n  \"lck\" : false,\n  \"bdi\" : false,\n  \"deg\" : false,\n  \"ssf\" : false,\n  \"tim\" : false\n}", TapiOduOduDefectPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.DegThr", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduMipDegThrGet", notes = "This attribute indicates the threshold level for declaring a performance monitoring (PM) Second to be bad. The value of the threshold can be provisioned in terms of number of errored blocks or in terms of percentage of errored blocks. For percentage-based specification, in order to support provision of less than 1%, the specification consists of two fields. The first field indicates the granularity of percentage. For examples, in 1%, in 0.1%, or in 0.01%, etc. The second field indicates the multiple of the granularity. For number of errored block based, the value is a positive integer.", response = TapiOduDegThr.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.DegThr", response = TapiOduDegThr.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-mip/deg-thr/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduDegThr> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduMipDegThrGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"deg-thr-value\" : 0,\n  \"deg-thr-type\" : \"PERCENTAGE\",\n  \"percentage-granularity\" : \"ONES\"\n}", TapiOduDegThr.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduMipPac", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduMipGet", notes = "none", response = TapiOduOduMipPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduMipPac", response = TapiOduOduMipPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-mip/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduMipPac> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduMipGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"tim-det-mode\" : \"DAPI\",\n  \"ex-dapi\" : \"ex-dapi\",\n  \"deg-m\" : 0,\n  \"acti\" : \"acti\",\n  \"ex-sapi\" : \"ex-sapi\",\n  \"deg-thr\" : {\n    \"deg-thr-value\" : 0,\n    \"deg-thr-type\" : \"PERCENTAGE\",\n    \"percentage-granularity\" : \"ONES\"\n  },\n  \"tim-act-disabled\" : true\n}", TapiOduOduMipPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduNcmPac", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduNcmGet", notes = "none", response = TapiOduOduNcmPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduNcmPac", response = TapiOduOduNcmPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-ncm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduNcmPac> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduNcmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"tcm-fields-in-use\" : [ 0, 0 ]\n}", TapiOduOduNcmPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduPmPac", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduPmGet", notes = "none", response = TapiOduOduPmPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduPmPac", response = TapiOduOduPmPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-pm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduPmPac> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduPmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"n-bbe\" : 5,\n  \"n-ses\" : 5,\n  \"uas\" : {\n    \"fuas\" : 2,\n    \"bidirectional\" : true,\n    \"uas\" : 9,\n    \"nuas\" : 7\n  },\n  \"f-ses\" : 1,\n  \"f-bbe\" : 6\n}", TapiOduOduPmPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.UasChoice", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduPmUasGet", notes = "UnAvailable Second", response = TapiOduUasChoice.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.UasChoice", response = TapiOduUasChoice.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-pm/uas/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduUasChoice> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduPmUasGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"fuas\" : 2,\n  \"bidirectional\" : true,\n  \"uas\" : 9,\n  \"nuas\" : 7\n}", TapiOduUasChoice.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduTcmMipPac", nickname = "dataContextOamContextMeguuidMiplocalIdOduMipSpecOduTcmGet", notes = "none", response = TapiOduOduTcmMipPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduTcmMipPac", response = TapiOduOduTcmMipPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/mip={local-id}/odu-mip-spec/odu-tcm/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduTcmMipPac> dataContextOamContextMeguuidMiplocalIdOduMipSpecOduTcmGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : false,\n  \"tcm-field\" : 6\n}", TapiOduOduTcmMipPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextMeguuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextMeguuidNamevalueNameGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduMegSpec", nickname = "dataContextOamContextMeguuidOduMegSpecGet", notes = "none", response = TapiOduOduMegSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduMegSpec", response = TapiOduOduMegSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/meg={uuid}/odu-meg-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduMegSpec> dataContextOamContextMeguuidOduMegSpecGet(@ApiParam(value = "Id of meg",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"meg-level\" : 0\n}", TapiOduOduMegSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobPost(@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added to list"  )  @Valid @RequestBody TapiOamOamcontextOamJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimeInterval", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimeGet", notes = "none", response = TapiCommonTimeInterval.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeInterval", response = TapiCommonTimeInterval.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/elapsed-time/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimeInterval> dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimeGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"period\" : [ {\n    \"unit\" : \"YEARS\",\n    \"value\" : 0\n  }, {\n    \"unit\" : \"YEARS\",\n    \"value\" : 0\n  } ]\n}", TapiCommonTimeInterval.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimePeriodunitGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/elapsed-time/period={unit}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdElapsedTimePeriodunitGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of period",required=true) @PathVariable("unit") String unit) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"YEARS\",\n  \"value\" : 0\n}", TapiCommonTimePeriod.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.LldpChassisIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberChassisIdGet", notes = "MEF 38:                  The chassis-id-subtype contains the chassis ID entity that is listed in the chassis ID field. This is a combination of the 'Chassis ID Subtype' and 'chsssis ID' fields.                  IEEE P802.1Qcx/D0.3:                  The Chassis ID returned in the Sender ID TLV of the LTR, if any.                  The format of a chassis identifier string. Objects of this type are always used with an associated lldp-chassis-is-subtype object, which identifies the format of the particular lldp-chassis-id object instance.                  If the associated lldp-chassis-id-subtype object has a value of chassis-component, then the octet string identifies a particular instance of the entPhysicalAlias object (defined in IETF RFC 2737) for a chassis component (i.e., an entPhysicalClass value of chassis(3)).                  If the associated lldp-chassis-id-subtype object has a value of interface-alias, then the octet string identifies a particular instance of the ifAlias object (defined in IETF RFC 2863) for an interface on the containing chassis.                  If the particular ifAlias object does not contain any values, another chassis identifier type should be used.", response = TapiEthLldpChassisIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpChassisIdSubtype", response = TapiEthLldpChassisIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/chassis-id/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthLldpChassisIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberChassisIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"mac-address\" : \"mac-address\",\n  \"chassis-component\" : \"chassis-component\",\n  \"interface-name\" : \"interface-name\",\n  \"interface-alias\" : \"interface-alias\",\n  \"network-address\" : \"network-address\",\n  \"port-component\" : \"port-component\",\n  \"local\" : \"local\"\n}", TapiEthLldpChassisIdSubtype.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.LldpPortIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberEgressPortIdGet", notes = "MEF 38:                  IEEE P802.1Qcx/D0.3:                  Egress Port ID.                  IEEE P802.1Qcx/D0.3:                  If the egressActionField attribute contains the value EGRESS-NO-TLV, then the contents of this attribute are meaningless.", response = TapiEthLldpPortIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpPortIdSubtype", response = TapiEthLldpPortIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/egress-port-id/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthLldpPortIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberEgressPortIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"agent-circuit-id\" : \"agent-circuit-id\",\n  \"mac-address\" : \"mac-address\",\n  \"interface-name\" : \"interface-name\",\n  \"interface-alias\" : \"interface-alias\",\n  \"network-address\" : \"network-address\",\n  \"port-component\" : \"port-component\",\n  \"local\" : \"local\"\n}", TapiEthLldpPortIdSubtype.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmLinkTraceResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberGet", notes = "none", response = TapiEthEthCfmLinkTraceResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmLinkTraceResultData", response = TapiEthEthCfmLinkTraceResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmLinkTraceResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"egress-action-field\" : \"egress-action-field\",\n  \"receive-order\" : 0,\n  \"seq-number\" : 1,\n  \"organization-specific-tlv\" : \"organization-specific-tlv\",\n  \"ingress-action-field\" : \"ingress-action-field\",\n  \"chassis-id\" : {\n    \"mac-address\" : \"mac-address\",\n    \"chassis-component\" : \"chassis-component\",\n    \"interface-name\" : \"interface-name\",\n    \"interface-alias\" : \"interface-alias\",\n    \"network-address\" : \"network-address\",\n    \"port-component\" : \"port-component\",\n    \"local\" : \"local\"\n  },\n  \"forwarded\" : false,\n  \"terminal-mep\" : false,\n  \"ingress-mac\" : \"ingress-mac\",\n  \"egress-port-id\" : {\n    \"agent-circuit-id\" : \"agent-circuit-id\",\n    \"mac-address\" : \"mac-address\",\n    \"interface-name\" : \"interface-name\",\n    \"interface-alias\" : \"interface-alias\",\n    \"network-address\" : \"network-address\",\n    \"port-component\" : \"port-component\",\n    \"local\" : \"local\"\n  },\n  \"egress-mac\" : \"egress-mac\",\n  \"next-egress-identifier\" : \"next-egress-identifier\",\n  \"last-egress-identifier\" : \"last-egress-identifier\",\n  \"relay-action-field\" : \"relay-action-field\",\n  \"reply-ttl\" : 6\n}", TapiEthEthCfmLinkTraceResultData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.LldpPortIdSubtype", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberIngressPortIdGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  Ingress Port ID.                  IEEE P802.1Qcx/D0.3:                  If the ingressActionField attribute contains the value INGRESS-NO-TLV, then the contents of this attribute are meaningless.", response = TapiEthLldpPortIdSubtype.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LldpPortIdSubtype", response = TapiEthLldpPortIdSubtype.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/eth-cfm-link-trace-result-data={seq-number}/ingress-port-id/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthLldpPortIdSubtype> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataEthCfmLinkTraceResultDataseqNumberIngressPortIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of eth-cfm-link-trace-result-data",required=true) @PathVariable("seq-number") Integer seqNumber) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"agent-circuit-id\" : \"agent-circuit-id\",\n  \"mac-address\" : \"mac-address\",\n  \"interface-name\" : \"interface-name\",\n  \"interface-alias\" : \"interface-alias\",\n  \"network-address\" : \"network-address\",\n  \"port-component\" : \"port-component\",\n  \"local\" : \"local\"\n}", TapiEthLldpPortIdSubtype.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthLinkTraceResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataGet", notes = "none", response = TapiEthEthLinkTraceResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceResultData", response = TapiEthEthLinkTraceResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthLinkTraceResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"result-list\" : [ {\n    \"data-tlv-length\" : 5,\n    \"time-to-live\" : 5,\n    \"source-address\" : \"source-address\"\n  }, {\n    \"data-tlv-length\" : 5,\n    \"time-to-live\" : 5,\n    \"source-address\" : \"source-address\"\n  } ],\n  \"eth-cfm-link-trace-result-data\" : [ {\n    \"egress-action-field\" : \"egress-action-field\",\n    \"receive-order\" : 0,\n    \"seq-number\" : 1,\n    \"organization-specific-tlv\" : \"organization-specific-tlv\",\n    \"ingress-action-field\" : \"ingress-action-field\",\n    \"chassis-id\" : {\n      \"mac-address\" : \"mac-address\",\n      \"chassis-component\" : \"chassis-component\",\n      \"interface-name\" : \"interface-name\",\n      \"interface-alias\" : \"interface-alias\",\n      \"network-address\" : \"network-address\",\n      \"port-component\" : \"port-component\",\n      \"local\" : \"local\"\n    },\n    \"forwarded\" : false,\n    \"terminal-mep\" : false,\n    \"ingress-mac\" : \"ingress-mac\",\n    \"egress-port-id\" : {\n      \"agent-circuit-id\" : \"agent-circuit-id\",\n      \"mac-address\" : \"mac-address\",\n      \"interface-name\" : \"interface-name\",\n      \"interface-alias\" : \"interface-alias\",\n      \"network-address\" : \"network-address\",\n      \"port-component\" : \"port-component\",\n      \"local\" : \"local\"\n    },\n    \"egress-mac\" : \"egress-mac\",\n    \"next-egress-identifier\" : \"next-egress-identifier\",\n    \"last-egress-identifier\" : \"last-egress-identifier\",\n    \"relay-action-field\" : \"relay-action-field\",\n    \"reply-ttl\" : 6\n  }, {\n    \"egress-action-field\" : \"egress-action-field\",\n    \"receive-order\" : 0,\n    \"seq-number\" : 1,\n    \"organization-specific-tlv\" : \"organization-specific-tlv\",\n    \"ingress-action-field\" : \"ingress-action-field\",\n    \"chassis-id\" : {\n      \"mac-address\" : \"mac-address\",\n      \"chassis-component\" : \"chassis-component\",\n      \"interface-name\" : \"interface-name\",\n      \"interface-alias\" : \"interface-alias\",\n      \"network-address\" : \"network-address\",\n      \"port-component\" : \"port-component\",\n      \"local\" : \"local\"\n    },\n    \"forwarded\" : false,\n    \"terminal-mep\" : false,\n    \"ingress-mac\" : \"ingress-mac\",\n    \"egress-port-id\" : {\n      \"agent-circuit-id\" : \"agent-circuit-id\",\n      \"mac-address\" : \"mac-address\",\n      \"interface-name\" : \"interface-name\",\n      \"interface-alias\" : \"interface-alias\",\n      \"network-address\" : \"network-address\",\n      \"port-component\" : \"port-component\",\n      \"local\" : \"local\"\n    },\n    \"egress-mac\" : \"egress-mac\",\n    \"next-egress-identifier\" : \"next-egress-identifier\",\n    \"last-egress-identifier\" : \"last-egress-identifier\",\n    \"relay-action-field\" : \"relay-action-field\",\n    \"reply-ttl\" : 6\n  } ]\n}", TapiEthEthLinkTraceResultData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.LinkTraceResult", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataResultListsourceAddressGet", notes = "G.8052: This parameter returns the results of the LT process. It contains a list of the result received from the individual LTR frames.                  The result from the individual LTR frame include the Source Mac Address, the TTL, and TLV.", response = TapiEthLinkTraceResult.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.LinkTraceResult", response = TapiEthLinkTraceResult.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-link-trace-result-data/result-list={source-address}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthLinkTraceResult> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLinkTraceResultDataResultListsourceAddressGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of result-list",required=true) @PathVariable("source-address") String sourceAddress) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data-tlv-length\" : 5,\n  \"time-to-live\" : 5,\n  \"source-address\" : \"source-address\"\n}", TapiEthLinkTraceResult.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthLoopbackResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthLoopbackResultDataGet", notes = "none", response = TapiEthEthLoopbackResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLoopbackResultData", response = TapiEthEthLoopbackResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-loopback-result-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthLoopbackResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthLoopbackResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"ber-lbr-frames\" : 0,\n  \"crc-lbr-frames\" : 6,\n  \"detected-peer-mep\" : [ \"detected-peer-mep\", \"detected-peer-mep\" ],\n  \"out-of-order-lbr-frames\" : 1,\n  \"sent-lbm-frames\" : 5,\n  \"rec-lbr-frames\" : 5\n}", TapiEthEthLoopbackResultData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"samples-near-end-1-dm-parameters\" : {\n    \"frame-delay-variation-list\" : [ 6, 6 ],\n    \"number-of-samples\" : 1,\n    \"frame-delay-list\" : [ 0, 0 ]\n  },\n  \"statistical-near-end-1-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthOnDemand1DmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/samples-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmSourcePerformanceData", response = TapiEthEthOnDemand1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-dm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthOnDemand1DmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  },\n  \"total-counters-near-end-1-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  }\n}", TapiEthEthOnDemand1LmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmSourcePerformanceData", response = TapiEthEthOnDemand1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-1-lm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemand1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthOnDemand1LmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"samples-far-end-dm-parameters\" : {\n    \"frame-delay-variation-list\" : [ 6, 6 ],\n    \"number-of-samples\" : 1,\n    \"frame-delay-list\" : [ 0, 0 ]\n  },\n  \"statistical-bi-dir-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthOnDemandDmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/samples-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/samples-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"bidir-unavailable-intervals\" : 0,\n  \"total-counters-far-end-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  },\n  \"statistical-far-end-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  }\n}", TapiEthEthOnDemandLmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-on-demand-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthProActive1DmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmSourcePerformanceData", response = TapiEthEthProActive1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-dm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthProActive1DmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  },\n  \"total-counters-near-end-1-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  }\n}", TapiEthEthProActive1LmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmSourcePerformanceData", response = TapiEthEthProActive1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-1-lm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActive1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthProActive1LmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-bi-dir-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthProActiveDmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"bidir-unavailable-intervals\" : 0,\n  \"total-counters-far-end-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  },\n  \"statistical-far-end-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  }\n}", TapiEthEthProActiveLmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-pro-active-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTestResultData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdEthTestResultDataGet", notes = "none", response = TapiEthEthTestResultData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestResultData", response = TapiEthEthTestResultData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/eth-test-result-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTestResultData> dataContextOamContextOamJobuuidCurrentDatalocalIdEthTestResultDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"sent-tst-frames\" : 6,\n  \"rec-tst-frames\" : 0\n}", TapiEthEthTestResultData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.oamjob.CurrentData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdGet", notes = "Granularity period of the CurrentData identifies the specific CurrentData instance in the scope of this OamJob.                  For example, typically at least                  one 15min and                  one 24hr;                  optionally one additional configurable (< 15min)", response = TapiOamOamjobCurrentData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamjob.CurrentData", response = TapiOamOamjobCurrentData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamjobCurrentData> dataContextOamContextOamJobuuidCurrentDatalocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamjobCurrentData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmPerformanceData", response = TapiEthEthOnDemand1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"samples-near-end-1-dm-parameters\" : {\n    \"frame-delay-variation-list\" : [ 6, 6 ],\n    \"number-of-samples\" : 1,\n    \"frame-delay-list\" : [ 0, 0 ]\n  },\n  \"statistical-near-end-1-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthOnDemand1DmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/samples-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataSamplesNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1DmSourcePerformanceData", response = TapiEthEthOnDemand1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-dm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthOnDemand1DmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmPerformanceData", response = TapiEthEthOnDemand1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  },\n  \"total-counters-near-end-1-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  }\n}", TapiEthEthOnDemand1LmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemand1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthOnDemand1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemand1LmSourcePerformanceData", response = TapiEthEthOnDemand1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-1-lm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemand1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemand1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthOnDemand1LmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDmPerformanceData", response = TapiEthEthOnDemandDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"samples-far-end-dm-parameters\" : {\n    \"frame-delay-variation-list\" : [ 6, 6 ],\n    \"number-of-samples\" : 1,\n    \"frame-delay-list\" : [ 0, 0 ]\n  },\n  \"statistical-bi-dir-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthOnDemandDmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/samples-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.SamplesDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet", notes = "This attribute contains the results of an on-demand frame delay measurement job in the ingress direction.", response = TapiEthSamplesDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.SamplesDmPerformanceParameters", response = TapiEthSamplesDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/samples-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthSamplesDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataSamplesNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frame-delay-variation-list\" : [ 6, 6 ],\n  \"number-of-samples\" : 1,\n  \"frame-delay-list\" : [ 0, 0 ]\n}", TapiEthSamplesDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataGet", notes = "none", response = TapiEthEthOnDemandLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandLmPerformanceData", response = TapiEthEthOnDemandLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"bidir-unavailable-intervals\" : 0,\n  \"total-counters-far-end-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  },\n  \"statistical-far-end-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  }\n}", TapiEthEthOnDemandLmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-on-demand-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthOnDemandLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmPerformanceData", response = TapiEthEthProActive1DmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1DmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthProActive1DmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-performance-data/statistical-near-end-1-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmPerformanceDataStatisticalNearEnd1DmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1DmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1DmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1DmSourcePerformanceData", response = TapiEthEthProActive1DmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-dm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1DmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1DmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthProActive1DmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmPerformanceData", response = TapiEthEthProActive1LmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1LmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-near-end-1-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  },\n  \"total-counters-near-end-1-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  }\n}", TapiEthEthProActive1LmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/statistical-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataStatisticalNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-performance-data/total-counters-near-end-1-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmPerformanceDataTotalCountersNearEnd1LmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActive1LmSourcePerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmSourcePerformanceDataGet", notes = "none", response = TapiEthEthProActive1LmSourcePerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActive1LmSourcePerformanceData", response = TapiEthEthProActive1LmSourcePerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-1-lm-source-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActive1LmSourcePerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActive1LmSourcePerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEthEthProActive1LmSourcePerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveDmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveDmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDmPerformanceData", response = TapiEthEthProActiveDmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveDmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"statistical-bi-dir-dm-parameters\" : {\n    \"average-frame-delay\" : 5,\n    \"maximum-frame-delay\" : 7,\n    \"average-inter-frame-delay-variation\" : 2,\n    \"minimum-frame-delay\" : 2,\n    \"maximum-frame-delay-variation\" : 9,\n    \"minimum-frame-delay-variation\" : 4,\n    \"minimum-inter-frame-delay-variation\" : 7,\n    \"maximum-inter-frame-delay-variation\" : 3,\n    \"average-frame-delay-variation\" : 5\n  }\n}", TapiEthEthProActiveDmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet", notes = "This attribute contains the statistical bidirectional performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-bi-dir-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalBiDirDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-far-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalFarEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalDmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalDmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalDmPerformanceParameters", response = TapiEthStatisticalDmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-dm-performance-data/statistical-near-end-dm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalDmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveDmPerformanceDataStatisticalNearEndDmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"average-frame-delay\" : 5,\n  \"maximum-frame-delay\" : 7,\n  \"average-inter-frame-delay-variation\" : 2,\n  \"minimum-frame-delay\" : 2,\n  \"maximum-frame-delay-variation\" : 9,\n  \"minimum-frame-delay-variation\" : 4,\n  \"minimum-inter-frame-delay-variation\" : 7,\n  \"maximum-inter-frame-delay-variation\" : 3,\n  \"average-frame-delay-variation\" : 5\n}", TapiEthStatisticalDmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveLmPerformanceData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataGet", notes = "none", response = TapiEthEthProActiveLmPerformanceData.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveLmPerformanceData", response = TapiEthEthProActiveLmPerformanceData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveLmPerformanceData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"bidir-unavailable-intervals\" : 0,\n  \"total-counters-far-end-lm-parameters\" : {\n    \"total-transmitted-frames\" : 5,\n    \"total-lost-frames\" : 1,\n    \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n  },\n  \"statistical-far-end-lm-parameters\" : {\n    \"unavailable-intervals\" : 6,\n    \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n    \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n    \"hli-count\" : 0,\n    \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n  }\n}", TapiEthEthProActiveLmPerformanceData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet", notes = "This attribute contains the statistical far end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/statistical-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.StatisticalLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet", notes = "This attribute contains the statistical near end performnace parameters.", response = TapiEthStatisticalLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.StatisticalLmPerformanceParameters", response = TapiEthStatisticalLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/statistical-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthStatisticalLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataStatisticalNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unavailable-intervals\" : 6,\n  \"maximum-frame-loss-ratio\" : \"maximum-frame-loss-ratio\",\n  \"average-frame-loss-ratio\" : \"average-frame-loss-ratio\",\n  \"hli-count\" : 0,\n  \"minimum-frame-loss-ratio\" : \"minimum-frame-loss-ratio\"\n}", TapiEthStatisticalLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the egress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/total-counters-far-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersFarEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TotalCountersLmPerformanceParameters", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet", notes = "This attribute contains the results of an on-demand synthetic loss measurement job in the ingress direction.", response = TapiEthTotalCountersLmPerformanceParameters.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TotalCountersLmPerformanceParameters", response = TapiEthTotalCountersLmPerformanceParameters.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/eth-pro-active-lm-performance-data/total-counters-near-end-lm-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTotalCountersLmPerformanceParameters> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdEthProActiveLmPerformanceDataTotalCountersNearEndLmParametersGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-transmitted-frames\" : 5,\n  \"total-lost-frames\" : 1,\n  \"total-frame-loss-ratio\" : \"total-frame-loss-ratio\"\n}", TapiEthTotalCountersLmPerformanceParameters.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.currentdata.HistoryData", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdGet", notes = "in case of 24hr Current Data, at least 1 History Data.                  In case of 15min Current Data, at least 16 History Data.                  In case of <15min, the number of History Data shall be able to cover a span of 4 hours.", response = TapiOamCurrentdataHistoryData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.currentdata.HistoryData", response = TapiOamCurrentdataHistoryData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamCurrentdataHistoryData> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamCurrentdataHistoryData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmDataPac", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGet", notes = "none", response = TapiOamPmDataPac.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmDataPac", response = TapiOamPmDataPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/pm-data-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmDataPac> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"granularity-period\" : {\n    \"unit\" : \"YEARS\",\n    \"value\" : 0\n  },\n  \"suspect-interval-flag\" : false\n}", TapiOamPmDataPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/history-data={history-data-local-id}/pm-data-pac/granularity-period/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdHistoryDatahistoryDataLocalIdPmDataPacGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of history-data",required=true) @PathVariable("history-data-local-id") String historyDataLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"YEARS\",\n  \"value\" : 0\n}", TapiCommonTimePeriod.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidCurrentDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmDataPac", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGet", notes = "none", response = TapiOamPmDataPac.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmDataPac", response = TapiOamPmDataPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/pm-data-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmDataPac> dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"granularity-period\" : {\n    \"unit\" : \"YEARS\",\n    \"value\" : 0\n  },\n  \"suspect-interval-flag\" : false\n}", TapiOamPmDataPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/current-data={local-id}/pm-data-pac/granularity-period/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamJobuuidCurrentDatalocalIdPmDataPacGranularityPeriodGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of current-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"YEARS\",\n  \"value\" : 0\n}", TapiCommonTimePeriod.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacGet", notes = "none", response = TapiEthEthCfmLinkTracePac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmLinkTracePac", response = TapiEthEthCfmLinkTracePac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmLinkTracePac> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"period\" : \"3_33MS\",\n  \"drop-eligibility\" : false,\n  \"ltm-flags\" : \"ltm-flags\",\n  \"target-mep-id\" : 0\n}", TapiEthEthCfmLinkTracePac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmLinkTracePac to be added to list"  )  @Valid @RequestBody TapiEthEthCfmLinkTracePac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmLinkTracePac", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/eth-cfm-link-trace-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobEthCfmLinkTracePacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmLinkTracePac to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmLinkTracePac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobGet", notes = "none", response = TapiEthEthLinkTraceJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLinkTraceJob", response = TapiEthEthLinkTraceJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthLinkTraceJob> dataContextOamContextOamJobuuidEthLinkTraceJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"time-to-live\" : 1,\n  \"destination-address\" : \"destination-address\",\n  \"eth-cfm-link-trace-pac\" : {\n    \"period\" : \"3_33MS\",\n    \"drop-eligibility\" : false,\n    \"ltm-flags\" : \"ltm-flags\",\n    \"target-mep-id\" : 0\n  },\n  \"priority\" : 6\n}", TapiEthEthLinkTraceJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added to list"  )  @Valid @RequestBody TapiEthEthLinkTraceJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthLinkTraceJob", nickname = "dataContextOamContextOamJobuuidEthLinkTraceJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-link-trace-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLinkTraceJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLinkTraceJob to be added or updated"  )  @Valid @RequestBody TapiEthEthLinkTraceJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacGet", notes = "none", response = TapiEthEthOamTestLoopbackCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamTestLoopbackCommonPac", response = TapiEthEthOamTestLoopbackCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOamTestLoopbackCommonPac> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data-tlv-length\" : 0,\n  \"period\" : \"3_33MS\",\n  \"drop-eligibility\" : false\n}", TapiEthEthOamTestLoopbackCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobEthOamTestLoopbackCommonPacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobGet", notes = "none", response = TapiEthEthLoopbackJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthLoopbackJob", response = TapiEthEthLoopbackJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthLoopbackJob> dataContextOamContextOamJobuuidEthLoopbackJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"number\" : 6,\n  \"eth-oam-test-loopback-common-pac\" : {\n    \"data-tlv-length\" : 0,\n    \"period\" : \"3_33MS\",\n    \"drop-eligibility\" : false\n  },\n  \"lbm-data-tlv\" : \"lbm-data-tlv\"\n}", TapiEthEthLoopbackJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added to list"  )  @Valid @RequestBody TapiEthEthLoopbackJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthLoopbackJob", nickname = "dataContextOamContextOamJobuuidEthLoopbackJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-loopback-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthLoopbackJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthLoopbackJob to be added or updated"  )  @Valid @RequestBody TapiEthEthLoopbackJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSink", response = TapiEthEthOnDemandMeasurementJobControlSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSink> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthOnDemandMeasurementJobControlSink.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSink to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSource> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthOnDemandMeasurementJobControlSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobGet", notes = "none", response = TapiEthEthOnDemandDualEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandDualEndedMeasurementJob", response = TapiEthEthOnDemandDualEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandDualEndedMeasurementJob> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-on-demand-measurement-job-control-sink\" : \"\",\n  \"eth-on-demand-measurement-job-control-source\" : \"\"\n}", TapiEthEthOnDemandDualEndedMeasurementJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandDualEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandDualEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-dual-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandDualEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandDualEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandDualEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthOnDemandMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandMeasurementJobControlSource", response = TapiEthEthOnDemandMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandMeasurementJobControlSource> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthOnDemandMeasurementJobControlSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/eth-on-demand-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobEthOnDemandMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobGet", notes = "none", response = TapiEthEthOnDemandSingleEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOnDemandSingleEndedMeasurementJob", response = TapiEthEthOnDemandSingleEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOnDemandSingleEndedMeasurementJob> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-on-demand-measurement-job-control-source\" : \"\"\n}", TapiEthEthOnDemandSingleEndedMeasurementJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandSingleEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthOnDemandSingleEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOnDemandSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-on-demand-single-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthOnDemandSingleEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOnDemandSingleEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthOnDemandSingleEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSink", response = TapiEthEthProActiveMeasurementJobControlSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveMeasurementJobControlSink> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthProActiveMeasurementJobControlSink.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSink", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSinkPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSink to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveMeasurementJobControlSource> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthProActiveMeasurementJobControlSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobGet", notes = "none", response = TapiEthEthProActiveDualEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveDualEndedMeasurementJob", response = TapiEthEthProActiveDualEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveDualEndedMeasurementJob> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-pro-active-measurement-job-control-source\" : \"\",\n  \"eth-pro-active-measurement-job-control-sink\" : \"\"\n}", TapiEthEthProActiveDualEndedMeasurementJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveDualEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveDualEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveDualEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-dual-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveDualEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveDualEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveDualEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet", notes = "none", response = TapiEthEthProActiveMeasurementJobControlSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveMeasurementJobControlSource", response = TapiEthEthProActiveMeasurementJobControlSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveMeasurementJobControlSource> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourceGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEthProActiveMeasurementJobControlSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveMeasurementJobControlSource", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/eth-pro-active-measurement-job-control-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobEthProActiveMeasurementJobControlSourcePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveMeasurementJobControlSource to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveMeasurementJobControlSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobGet", notes = "none", response = TapiEthEthProActiveSingleEndedMeasurementJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthProActiveSingleEndedMeasurementJob", response = TapiEthEthProActiveSingleEndedMeasurementJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthProActiveSingleEndedMeasurementJob> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-pro-active-measurement-job-control-source\" : \"\"\n}", TapiEthEthProActiveSingleEndedMeasurementJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveSingleEndedMeasurementJob to be added to list"  )  @Valid @RequestBody TapiEthEthProActiveSingleEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthProActiveSingleEndedMeasurementJob", nickname = "dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-pro-active-single-ended-measurement-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthProActiveSingleEndedMeasurementJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthProActiveSingleEndedMeasurementJob to be added or updated"  )  @Valid @RequestBody TapiEthEthProActiveSingleEndedMeasurementJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacGet", notes = "none", response = TapiEthEthOamTestLoopbackCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamTestLoopbackCommonPac", response = TapiEthEthOamTestLoopbackCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOamTestLoopbackCommonPac> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"data-tlv-length\" : 0,\n  \"period\" : \"3_33MS\",\n  \"drop-eligibility\" : false\n}", TapiEthEthOamTestLoopbackCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added to list"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOamTestLoopbackCommonPac", nickname = "dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-oam-test-loopback-common-pac/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthOamTestLoopbackCommonPacPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamTestLoopbackCommonPac to be added or updated"  )  @Valid @RequestBody TapiEthEthOamTestLoopbackCommonPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointGet", notes = "none", response = TapiEthEthTestJobSinkPoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestJobSinkPoint", response = TapiEthEthTestJobSinkPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTestJobSinkPoint> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"source-address\" : \"source-address\"\n}", TapiEthEthTestJobSinkPoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJobSinkPoint to be added to list"  )  @Valid @RequestBody TapiEthEthTestJobSinkPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthTestJobSinkPoint", nickname = "dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/eth-test-job-sink-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobEthTestJobSinkPointPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJobSinkPoint to be added or updated"  )  @Valid @RequestBody TapiEthEthTestJobSinkPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobGet", notes = "none", response = TapiEthEthTestJob.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTestJob", response = TapiEthEthTestJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTestJob> dataContextOamContextOamJobuuidEthTestJobGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"number\" : 0,\n  \"test-pattern\" : \"test-pattern\",\n  \"eth-oam-test-loopback-common-pac\" : {\n    \"data-tlv-length\" : 0,\n    \"period\" : \"3_33MS\",\n    \"drop-eligibility\" : false\n  },\n  \"eth-test-job-sink-point\" : {\n    \"source-address\" : \"source-address\"\n  },\n  \"destination-address\" : \"destination-address\"\n}", TapiEthEthTestJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJob to be added to list"  )  @Valid @RequestBody TapiEthEthTestJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthTestJob", nickname = "dataContextOamContextOamJobuuidEthTestJobPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/eth-test-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidEthTestJobPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthTestJob to be added or updated"  )  @Valid @RequestBody TapiEthEthTestJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidGet", notes = "none", response = TapiOamOamcontextOamJob.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamJob", response = TapiOamOamcontextOamJob.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamcontextOamJob> dataContextOamContextOamJobuuidGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamcontextOamJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidNamePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamJobuuidNamevalueNameGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamJobuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidNamevalueNamePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfileDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfileDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfileGet", notes = "none", response = TapiOamOamProfileRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamProfileRef", response = TapiOamOamProfileRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamProfileRef> dataContextOamContextOamJobuuidOamProfileGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"oam-profile-uuid\" : \"oam-profile-uuid\"\n}", TapiOamOamProfileRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfilePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfilePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfileRef to be added to list"  )  @Valid @RequestBody TapiOamOamProfileRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.OamProfileRef", nickname = "dataContextOamContextOamJobuuidOamProfilePut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-profile/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamProfilePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfileRef to be added or updated"  )  @Valid @RequestBody TapiOamOamProfileRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointPost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamServicePointRef to be added to list"  )  @Valid @RequestBody TapiOamOamServicePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdGet", notes = "none", response = TapiOamOamServicePointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamServicePointRef", response = TapiOamOamServicePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamServicePointRef> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamServicePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.OamServicePointRef", nickname = "dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/oam-service-point={oam-service-uuid},{oam-service-point-local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidOamServicePointoamServiceUuidoamServicePointLocalIdPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-uuid") String oamServiceUuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("oam-service-point-local-id") String oamServicePointLocalId,@ApiParam(value = "tapi.oam.OamServicePointRef to be added or updated"  )  @Valid @RequestBody TapiOamOamServicePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.oamcontext.OamJob", nickname = "dataContextOamContextOamJobuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidPut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamcontext.OamJob to be added or updated"  )  @Valid @RequestBody TapiOamOamcontextOamJob body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidScheduleDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidScheduleDelete(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimeRange> dataContextOamContextOamJobuuidScheduleGet(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"start-time\" : \"start-time\",\n  \"end-time\" : \"end-time\"\n}", TapiCommonTimeRange.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidSchedulePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidSchedulePost(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextOamContextOamJobuuidSchedulePut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-job={uuid}/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamJobuuidSchedulePut(@ApiParam(value = "Id of oam-job",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfilePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfilePost(@ApiParam(value = "tapi.oam.OamProfile to be added to list"  )  @Valid @RequestBody TapiOamOamProfile body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidGet", notes = "none", response = TapiOamOamProfile.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.OamProfile", response = TapiOamOamProfile.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamProfile> dataContextOamContextOamProfileuuidGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamProfileuuidNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDataPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDataPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.PmThresholdData to be added to list"  )  @Valid @RequestBody TapiOamPmThresholdData body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet", notes = "none", response = TapiOamPmThresholdData.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmThresholdData", response = TapiOamPmThresholdData.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmThresholdData> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamPmThresholdData.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet", notes = "none", response = TapiCommonTimePeriod.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimePeriod", response = TapiCommonTimePeriod.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimePeriod> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"YEARS\",\n  \"value\" : 0\n}", TapiCommonTimePeriod.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.TimePeriod to be added to list"  )  @Valid @RequestBody TapiCommonTimePeriod body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.TimePeriod", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/granularity-period/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdGranularityPeriodPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.TimePeriod to be added or updated"  )  @Valid @RequestBody TapiCommonTimePeriod body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamePost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.PmThresholdData", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.PmThresholdData to be added or updated"  )  @Valid @RequestBody TapiOamPmThresholdData body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.ThresholdParameter to be added to list"  )  @Valid @RequestBody TapiOamThresholdParameter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationGet", notes = "none", response = TapiOamThresholdParameter.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.ThresholdParameter", response = TapiOamThresholdParameter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamThresholdParameter> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-name\" : \"pm-parameter-name\",\n  \"pm-parameter-above-thrs\" : {\n    \"pm-parameter-int-value\" : 0,\n    \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n  },\n  \"threshold-location\" : \"NOT_APPLICABLE\"\n}", TapiOamThresholdParameter.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-above-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterAboveThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-below-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterBelowThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsDelete(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsGet", notes = "none", response = TapiOamPmParameterValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.PmParameterValue", response = TapiOamPmParameterValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamPmParameterValue> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsGet(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"pm-parameter-int-value\" : 0,\n  \"pm-parameter-real-value\" : \"pm-parameter-real-value\"\n}", TapiOamPmParameterValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPost(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added to list"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.PmParameterValue", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/pm-parameter-clear-thrs/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPmParameterClearThrsPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.PmParameterValue to be added or updated"  )  @Valid @RequestBody TapiOamPmParameterValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.ThresholdParameter", nickname = "dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/pm-threshold-data={local-id}/threshold-parameter={pm-parameter-name},{threshold-location}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPmThresholdDatalocalIdThresholdParameterpmParameterNamethresholdLocationPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of pm-threshold-data",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("pm-parameter-name") String pmParameterName,@ApiParam(value = "Id of threshold-parameter",required=true) @PathVariable("threshold-location") String thresholdLocation,@ApiParam(value = "tapi.oam.ThresholdParameter to be added or updated"  )  @Valid @RequestBody TapiOamThresholdParameter body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.OamProfile", nickname = "dataContextOamContextOamProfileuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-profile={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamProfileuuidPut(@ApiParam(value = "Id of oam-profile",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.OamProfile to be added or updated"  )  @Valid @RequestBody TapiOamOamProfile body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServicePost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServicePost(@ApiParam(value = "tapi.oam.oamcontext.OamService to be added to list"  )  @Valid @RequestBody TapiOamOamcontextOamService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServiceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationGet", notes = "none", response = TapiEthEthCfmMaintenanceAssociation.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceAssociation", response = TapiEthEthCfmMaintenanceAssociation.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmMaintenanceAssociation> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"maintenance-association-name\" : {\n    \"char-string\" : \"char-string\",\n    \"ieee-reserved\" : \"0\",\n    \"unsigned-int-16\" : 0,\n    \"icc-format\" : \"icc-format\",\n    \"primary-vlan-id\" : \"primary-vlan-id\",\n    \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n  },\n  \"id-permission\" : \"id-permission\"\n}", TapiEthEthCfmMaintenanceAssociation.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameDelete", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameGet", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", response = TapiEthMaintenanceAssociationName.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.MaintenanceAssociationName", response = TapiEthMaintenanceAssociationName.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthMaintenanceAssociationName> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"char-string\" : \"char-string\",\n  \"ieee-reserved\" : \"0\",\n  \"unsigned-int-16\" : 0,\n  \"icc-format\" : \"icc-format\",\n  \"primary-vlan-id\" : \"primary-vlan-id\",\n  \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n}", TapiEthMaintenanceAssociationName.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePost", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.MaintenanceAssociationName to be added to list"  )  @Valid @RequestBody TapiEthMaintenanceAssociationName body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.MaintenanceAssociationName", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePut", notes = "IEEE P802.1Qcx/D0.3:                  MEF 38:                  The Maintenance Association name and name format choice.", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/maintenance-association-name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationMaintenanceAssociationNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.MaintenanceAssociationName to be added or updated"  )  @Valid @RequestBody TapiEthMaintenanceAssociationName body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceAssociation to be added to list"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceAssociation body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmMaintenanceAssociation", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-association/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceAssociationPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceAssociation to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceAssociation body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainGet", notes = "none", response = TapiEthEthCfmMaintenanceDomain.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCfmMaintenanceDomain", response = TapiEthEthCfmMaintenanceDomain.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCfmMaintenanceDomain> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"maintenance-domain-name-type\" : \"maintenance-domain-name-type\",\n  \"maintenance-domain-name\" : \"maintenance-domain-name\"\n}", TapiEthEthCfmMaintenanceDomain.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceDomain to be added to list"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceDomain body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthCfmMaintenanceDomain", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-cfm-maintenance-domain/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthCfmMaintenanceDomainPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthCfmMaintenanceDomain to be added or updated"  )  @Valid @RequestBody TapiEthEthCfmMaintenanceDomain body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonGet", notes = "none", response = TapiEthEthMegCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMegCommon", response = TapiEthEthMegCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMegCommon> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"meg-identifier\" : \"meg-identifier\",\n  \"meg-level\" : 1,\n  \"client-mel\" : 6,\n  \"is-cc-enabled\" : false,\n  \"cc-period\" : \"3_33MS\"\n}", TapiEthEthMegCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthMegCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMegCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthMegCommon", nickname = "dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/eth-meg-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServiceEthMegCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthMegCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMegCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServiceGet", notes = "none", response = TapiEthEthOamService.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamService", response = TapiEthEthOamService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOamService> dataContextOamContextOamServiceuuidEthOamServiceGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-cfm-maintenance-association\" : {\n    \"maintenance-association-name\" : {\n      \"char-string\" : \"char-string\",\n      \"ieee-reserved\" : \"0\",\n      \"unsigned-int-16\" : 0,\n      \"icc-format\" : \"icc-format\",\n      \"primary-vlan-id\" : \"primary-vlan-id\",\n      \"rfc-2865-vpn-id\" : \"rfc-2865-vpn-id\"\n    },\n    \"id-permission\" : \"id-permission\"\n  },\n  \"eth-cfm-maintenance-domain\" : {\n    \"maintenance-domain-name-type\" : \"maintenance-domain-name-type\",\n    \"maintenance-domain-name\" : \"maintenance-domain-name\"\n  },\n  \"eth-meg-common\" : {\n    \"meg-identifier\" : \"meg-identifier\",\n    \"meg-level\" : 1,\n    \"client-mel\" : 6,\n    \"is-cc-enabled\" : false,\n    \"cc-period\" : \"3_33MS\"\n  }\n}", TapiEthEthOamService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServicePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServicePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamService to be added to list"  )  @Valid @RequestBody TapiEthEthOamService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOamService", nickname = "dataContextOamContextOamServiceuuidEthOamServicePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/eth-oam-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidEthOamServicePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthOamService to be added or updated"  )  @Valid @RequestBody TapiEthEthOamService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidGet", notes = "none", response = TapiOamOamcontextOamService.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamcontext.OamService", response = TapiOamOamcontextOamService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamcontextOamService> dataContextOamContextOamServiceuuidGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamcontextOamService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MegRef", nickname = "dataContextOamContextOamServiceuuidMegGet", notes = "none", response = TapiOamMegRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MegRef", response = TapiOamMegRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/meg/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMegRef> dataContextOamContextOamServiceuuidMegGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"meg-uuid\" : \"meg-uuid\"\n}", TapiOamMegRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamServiceuuidNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamservice.OamServicePoint to be added to list"  )  @Valid @RequestBody TapiOamOamserviceOamServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointGet", notes = "none", response = TapiConnectivityConnectivityServiceEndPointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectivityServiceEndPointRef", response = TapiConnectivityConnectivityServiceEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectivityServiceEndPointRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectivityServiceEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added to list"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.connectivity.ConnectivityServiceEndPointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/connectivity-service-end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdConnectivityServiceEndPointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.connectivity.ConnectivityServiceEndPointRef to be added or updated"  )  @Valid @RequestBody TapiConnectivityConnectivityServiceEndPointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonGet", notes = "none", response = TapiEthEthMepCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepCommon", response = TapiEthEthMepCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepCommon> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : true,\n  \"cc-priority\" : 0,\n  \"lck-period\" : \"3_33MS\",\n  \"lck-priority\" : 6,\n  \"mep-identifier\" : 1\n}", TapiEthEthMepCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMepCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthMepCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMepCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.BandwidthReport", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkBandwidthReportGet", notes = "This attribute models the content of the bandwidth report received by the MEP Sink from the peer MEP Source.", response = TapiEthBandwidthReport.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.BandwidthReport", response = TapiEthBandwidthReport.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/bandwidth-report/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthBandwidthReport> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkBandwidthReportGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"source-mac-address\" : \"source-mac-address\",\n  \"current-bandwidth\" : 5,\n  \"nominal-bandwidth\" : 2,\n  \"port-id\" : 7\n}", TapiEthBandwidthReport.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkGet", notes = "none", response = TapiEthEthMepSink.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSink", response = TapiEthEthMepSink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepSink> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"peer-mep-identifier\" : [ 7, 7 ],\n  \"is-csf-reported\" : true,\n  \"lm-m\" : 2,\n  \"lm-deg-thr\" : 9,\n  \"bandwidth-report\" : {\n    \"source-mac-address\" : \"source-mac-address\",\n    \"current-bandwidth\" : 5,\n    \"nominal-bandwidth\" : 2,\n    \"port-id\" : 7\n  },\n  \"is-csf-rdi-fdi-enabled\" : true,\n  \"lm-degm\" : 3,\n  \"ais-priority\" : 5,\n  \"lm-tf-min\" : 4,\n  \"unexpected-ltr-received\" : 1\n}", TapiEthEthMepSink.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSink to be added to list"  )  @Valid @RequestBody TapiEthEthMepSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthMepSink", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-sink/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSinkPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSink to be added or updated"  )  @Valid @RequestBody TapiEthEthMepSink body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceGet", notes = "none", response = TapiEthEthMepSource.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMepSource", response = TapiEthEthMepSource.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMepSource> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourceGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"aps-priority\" : 1,\n  \"csf-priority\" : 1,\n  \"csf-config\" : \"DISABLED\"\n}", TapiEthEthMepSource.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSource to be added to list"  )  @Valid @RequestBody TapiEthEthMepSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthMepSource", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/eth-mep-source/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointEthMepSourcePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMepSource to be added or updated"  )  @Valid @RequestBody TapiEthEthMepSource body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointGet", notes = "none", response = TapiEthEthOamMepServicePoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamMepServicePoint", response = TapiEthEthOamMepServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOamMepServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-mep-sink\" : {\n    \"peer-mep-identifier\" : [ 7, 7 ],\n    \"is-csf-reported\" : true,\n    \"lm-m\" : 2,\n    \"lm-deg-thr\" : 9,\n    \"bandwidth-report\" : {\n      \"source-mac-address\" : \"source-mac-address\",\n      \"current-bandwidth\" : 5,\n      \"nominal-bandwidth\" : 2,\n      \"port-id\" : 7\n    },\n    \"is-csf-rdi-fdi-enabled\" : true,\n    \"lm-degm\" : 3,\n    \"ais-priority\" : 5,\n    \"lm-tf-min\" : 4,\n    \"unexpected-ltr-received\" : 1\n  },\n  \"eth-mep-common\" : {\n    \"codirectional\" : true,\n    \"cc-priority\" : 0,\n    \"lck-period\" : \"3_33MS\",\n    \"lck-priority\" : 6,\n    \"mep-identifier\" : 1\n  },\n  \"eth-mep-source\" : {\n    \"aps-priority\" : 1,\n    \"csf-priority\" : 1,\n    \"csf-config\" : \"DISABLED\"\n  }\n}", TapiEthEthOamMepServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMepServicePoint to be added to list"  )  @Valid @RequestBody TapiEthEthOamMepServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOamMepServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mep-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMepServicePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMepServicePoint to be added or updated"  )  @Valid @RequestBody TapiEthEthOamMepServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonGet", notes = "none", response = TapiEthEthMipCommon.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthMipCommon", response = TapiEthEthMipCommon.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthMipCommon> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-full-mip\" : false\n}", TapiEthEthMipCommon.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMipCommon to be added to list"  )  @Valid @RequestBody TapiEthEthMipCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthMipCommon", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/eth-mip-common/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointEthMipCommonPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthMipCommon to be added or updated"  )  @Valid @RequestBody TapiEthEthMipCommon body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointGet", notes = "none", response = TapiEthEthOamMipServicePoint.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthOamMipServicePoint", response = TapiEthEthOamMipServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthOamMipServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-mip-common\" : {\n    \"is-full-mip\" : false\n  }\n}", TapiEthEthOamMipServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMipServicePoint to be added to list"  )  @Valid @RequestBody TapiEthEthOamMipServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthOamMipServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/eth-oam-mip-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdEthOamMipServicePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.eth.EthOamMipServicePoint to be added or updated"  )  @Valid @RequestBody TapiEthEthOamMipServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdGet", notes = "none", response = TapiOamOamserviceOamServicePoint.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.oamservice.OamServicePoint", response = TapiOamOamserviceOamServicePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamOamserviceOamServicePoint> dataContextOamContextOamServiceuuidOamServicePointlocalIdGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamOamserviceOamServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MepRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdMepGet", notes = "none", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/mep/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMepRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdMepGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMepRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MipRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdMipGet", notes = "none", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/mip/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMipRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdMipGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMipRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamePost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNameGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdNamevalueNamePut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.oamservice.OamServicePoint", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.oam.oamservice.OamServicePoint to be added or updated"  )  @Valid @RequestBody TapiOamOamserviceOamServicePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/oam-service-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidOamServicePointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of oam-service-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.oamcontext.OamService", nickname = "dataContextOamContextOamServiceuuidPut", notes = "none", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/oam-service={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextOamServiceuuidPut(@ApiParam(value = "Id of oam-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.oam.oamcontext.OamService to be added or updated"  )  @Valid @RequestBody TapiOamOamcontextOamService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.oam.context.OamContext", nickname = "dataContextOamContextPost", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/oam-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextOamContextPost(@ApiParam(value = "tapi.oam.context.OamContext to be added to list"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.oam.context.OamContext", nickname = "dataContextOamContextPut", notes = "Augments the base TAPI Context with OamService information", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/oam-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextOamContextPut(@ApiParam(value = "tapi.oam.context.OamContext to be added or updated"  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextDelete", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextGet", notes = "Augments the base TAPI Context with PathComputationService information", response = TapiPathComputationPathComputationContext.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationContext", response = TapiPathComputationPathComputationContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathComputationContext> dataContextPathComputationContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"path-comp-service\" : [ \"\", \"\" ],\n  \"path\" : [ \"\", \"\" ]\n}", TapiPathComputationPathComputationContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServicePost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServicePost(@ApiParam(value = "tapi.path.computation.PathComputationService to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizeGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdCapacityTotalSizePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet", notes = "none", response = TapiPathComputationPathServiceEndPoint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathServiceEndPoint", response = TapiPathComputationPathServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathServiceEndPoint> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationPathServiceEndPoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.PathServiceEndPoint", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.PathServiceEndPoint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added to list"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.ServiceInterfacePointRef", nickname = "dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/end-point={local-id}/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidEndPointlocalIdServiceInterfacePointPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.ServiceInterfacePointRef to be added or updated"  )  @Valid @RequestBody TapiCommonServiceInterfacePointRef body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidGet", notes = "none", response = TapiPathComputationPathComputationService.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathComputationService", response = TapiPathComputationPathComputationService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathComputationService> dataContextPathComputationContextPathCompServiceuuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationPathComputationService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet", notes = "none", response = TapiPathComputationPathObjectiveFunction.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathObjectiveFunction", response = TapiPathComputationPathObjectiveFunction.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathObjectiveFunction> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationPathObjectiveFunction.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added to list"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunction body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.PathObjectiveFunction", nickname = "dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/objective-function/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidObjectiveFunctionPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathObjectiveFunction to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathObjectiveFunction body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet", notes = "none", response = TapiPathComputationPathOptimizationConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathOptimizationConstraint", response = TapiPathComputationPathOptimizationConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathOptimizationConstraint> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationPathOptimizationConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.PathOptimizationConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/optimization-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidOptimizationConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathOptimizationConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathOptimizationConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.PathRef", nickname = "dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet", notes = "none", response = TapiPathComputationPathRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.PathRef", response = TapiPathComputationPathRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/path={path-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPathRef> dataContextPathComputationContextPathCompServiceuuidPathpathUuidGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of path",required=true) @PathVariable("path-uuid") String pathUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"path-uuid\" : \"path-uuid\"\n}", TapiPathComputationPathRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationService", nickname = "dataContextPathComputationContextPathCompServiceuuidPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.PathComputationService to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintCostCharacteristiccostNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationRoutingConstraint> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-exclusive\" : true,\n  \"diversity-policy\" : \"SRLG\",\n  \"tolerable-impact\" : \"tolerable-impact\",\n  \"route-objective-function\" : \"MIN_WORK_ROUTE_HOP\",\n  \"cost-characteristic\" : [ {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  }, {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  } ],\n  \"latency-characteristic\" : [ {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  }, {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  } ],\n  \"risk-diversity-characteristic\" : [ {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  }, {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  } ]\n}", TapiPathComputationRoutingConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.RoutingConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationRoutingConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName,@ApiParam(value = "tapi.topology.RiskCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyRiskCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintPost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added to list"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet", notes = "none", response = TapiPathComputationTopologyConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.TopologyConstraint", response = TapiPathComputationTopologyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationTopologyConstraint> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationTopologyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamePost(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.TopologyConstraint", nickname = "dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut", notes = "none", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path-comp-service={uuid}/topology-constraint={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPathCompServiceuuidTopologyConstraintlocalIdPut(@ApiParam(value = "Id of path-comp-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of topology-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.path.computation.TopologyConstraint to be added or updated"  )  @Valid @RequestBody TapiPathComputationTopologyConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.Path", nickname = "dataContextPathComputationContextPathuuidGet", notes = "none", response = TapiPathComputationPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.Path", response = TapiPathComputationPath.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationPath> dataContextPathComputationContextPathuuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiPathComputationPath.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LinkRef", nickname = "dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet", notes = "none", response = TapiTopologyLinkRef.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LinkRef", response = TapiTopologyLinkRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/link={topology-uuid},{link-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLinkRef> dataContextPathComputationContextPathuuidLinktopologyUuidlinkUuidGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyLinkRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPathComputationContextPathuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPathComputationContextPathuuidNamevalueNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintCostCharacteristiccostNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.path.computation.RoutingConstraint", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintGet", notes = "none", response = TapiPathComputationRoutingConstraint.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.path.computation.RoutingConstraint", response = TapiPathComputationRoutingConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPathComputationRoutingConstraint> dataContextPathComputationContextPathuuidRoutingConstraintGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-exclusive\" : true,\n  \"diversity-policy\" : \"SRLG\",\n  \"tolerable-impact\" : \"tolerable-impact\",\n  \"route-objective-function\" : \"MIN_WORK_ROUTE_HOP\",\n  \"cost-characteristic\" : [ {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  }, {\n    \"cost-value\" : \"cost-value\",\n    \"cost-algorithm\" : \"cost-algorithm\",\n    \"cost-name\" : \"cost-name\"\n  } ],\n  \"latency-characteristic\" : [ {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  }, {\n    \"traffic-property-name\" : \"traffic-property-name\",\n    \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n    \"wander-characteristic\" : \"wander-characteristic\",\n    \"jitter-characteristic\" : \"jitter-characteristic\",\n    \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n  } ],\n  \"risk-diversity-characteristic\" : [ {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  }, {\n    \"risk-characteristic-name\" : \"risk-characteristic-name\",\n    \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n  } ]\n}", TapiPathComputationRoutingConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet", notes = "none", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/path={uuid}/routing-constraint/risk-diversity-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextPathComputationContextPathuuidRoutingConstraintRiskDiversityCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of path",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of risk-diversity-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextPost", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPathComputationContextPost(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added to list"  )  @Valid @RequestBody TapiPathComputationPathComputationContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.path.computation.PathComputationContext", nickname = "dataContextPathComputationContextPut", notes = "Augments the base TAPI Context with PathComputationService information", tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/path-computation-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPathComputationContextPut(@ApiParam(value = "tapi.path.computation.PathComputationContext to be added or updated"  )  @Valid @RequestBody TapiPathComputationPathComputationContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.equipment.PhysicalContext", nickname = "dataContextPhysicalContextDelete", notes = "none", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPhysicalContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ConnectorPinAddress", nickname = "dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidConnectorPinconnectorIdentificationpinIdentificationequipmentUuidGet", notes = "The list of Pins that support the AccessPort.", response = TapiEquipmentConnectorPinAddress.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ConnectorPinAddress", response = TapiEquipmentConnectorPinAddress.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/access-port={access-port-uuid}/connector-pin={connector-identification},{pin-identification},{equipment-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentConnectorPinAddress> dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidConnectorPinconnectorIdentificationpinIdentificationequipmentUuidGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of access-port",required=true) @PathVariable("access-port-uuid") String accessPortUuid,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("connector-identification") String connectorIdentification,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("pin-identification") String pinIdentification,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connector-identification\" : \"connector-identification\",\n  \"equipment-uuid\" : \"equipment-uuid\",\n  \"pin-identification\" : \"pin-identification\"\n}", TapiEquipmentConnectorPinAddress.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AccessPort", nickname = "dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidGet", notes = "none", response = TapiEquipmentAccessPort.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AccessPort", response = TapiEquipmentAccessPort.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/access-port={access-port-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAccessPort> dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of access-port",required=true) @PathVariable("access-port-uuid") String accessPortUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAccessPort.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/access-port={access-port-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextDeviceuuidAccessPortaccessPortUuidNamevalueNameGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of access-port",required=true) @PathVariable("access-port-uuid") String accessPortUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonActualProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleCommonActualPropertiesGet", notes = "none", response = TapiEquipmentCommonActualProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonActualProperties", response = TapiEquipmentCommonActualProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/actual-non-field-replaceable-module/common-actual-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonActualProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleCommonActualPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"manufacture-date\" : \"manufacture-date\",\n  \"is-powered\" : false,\n  \"serial-number\" : \"serial-number\",\n  \"asset-instance-identifier\" : \"asset-instance-identifier\",\n  \"temperature\" : \"temperature\"\n}", TapiEquipmentCommonActualProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonEquipmentProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleCommonEquipmentPropertiesGet", notes = "none", response = TapiEquipmentCommonEquipmentProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonEquipmentProperties", response = TapiEquipmentCommonEquipmentProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/actual-non-field-replaceable-module/common-equipment-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonEquipmentProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleCommonEquipmentPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"equipment-type-version\" : \"equipment-type-version\",\n  \"equipment-type-description\" : \"equipment-type-description\",\n  \"manufacturer-name\" : \"manufacturer-name\",\n  \"manufacturer-identifier\" : \"manufacturer-identifier\",\n  \"equipment-type-name\" : \"equipment-type-name\",\n  \"asset-type-identifier\" : \"asset-type-identifier\",\n  \"equipment-type-identifier\" : \"equipment-type-identifier\"\n}", TapiEquipmentCommonEquipmentProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ActualNonFieldReplaceableModule", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleGet", notes = "none", response = TapiEquipmentActualNonFieldReplaceableModule.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ActualNonFieldReplaceableModule", response = TapiEquipmentActualNonFieldReplaceableModule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/actual-non-field-replaceable-module/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentActualNonFieldReplaceableModule> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentActualNonFieldReplaceableModuleGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"common-actual-properties\" : {\n    \"manufacture-date\" : \"manufacture-date\",\n    \"is-powered\" : false,\n    \"serial-number\" : \"serial-number\",\n    \"asset-instance-identifier\" : \"asset-instance-identifier\",\n    \"temperature\" : \"temperature\"\n  },\n  \"common-equipment-properties\" : {\n    \"equipment-type-version\" : \"equipment-type-version\",\n    \"equipment-type-description\" : \"equipment-type-description\",\n    \"manufacturer-name\" : \"manufacturer-name\",\n    \"manufacturer-identifier\" : \"manufacturer-identifier\",\n    \"equipment-type-name\" : \"equipment-type-name\",\n    \"asset-type-identifier\" : \"asset-type-identifier\",\n    \"equipment-type-identifier\" : \"equipment-type-identifier\"\n  }\n}", TapiEquipmentActualNonFieldReplaceableModule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonActualProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentCommonActualPropertiesGet", notes = "none", response = TapiEquipmentCommonActualProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonActualProperties", response = TapiEquipmentCommonActualProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/common-actual-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonActualProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentCommonActualPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"manufacture-date\" : \"manufacture-date\",\n  \"is-powered\" : false,\n  \"serial-number\" : \"serial-number\",\n  \"asset-instance-identifier\" : \"asset-instance-identifier\",\n  \"temperature\" : \"temperature\"\n}", TapiEquipmentCommonActualProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonEquipmentProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentCommonEquipmentPropertiesGet", notes = "none", response = TapiEquipmentCommonEquipmentProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonEquipmentProperties", response = TapiEquipmentCommonEquipmentProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/common-equipment-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonEquipmentProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentCommonEquipmentPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"equipment-type-version\" : \"equipment-type-version\",\n  \"equipment-type-description\" : \"equipment-type-description\",\n  \"manufacturer-name\" : \"manufacturer-name\",\n  \"manufacturer-identifier\" : \"manufacturer-identifier\",\n  \"equipment-type-name\" : \"equipment-type-name\",\n  \"asset-type-identifier\" : \"asset-type-identifier\",\n  \"equipment-type-identifier\" : \"equipment-type-identifier\"\n}", TapiEquipmentCommonEquipmentProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ActualEquipment", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentGet", notes = "none", response = TapiEquipmentActualEquipment.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ActualEquipment", response = TapiEquipmentActualEquipment.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/actual-equipment/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentActualEquipment> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidActualEquipmentGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"actual-non-field-replaceable-module\" : [ {\n    \"common-actual-properties\" : {\n      \"manufacture-date\" : \"manufacture-date\",\n      \"is-powered\" : false,\n      \"serial-number\" : \"serial-number\",\n      \"asset-instance-identifier\" : \"asset-instance-identifier\",\n      \"temperature\" : \"temperature\"\n    },\n    \"common-equipment-properties\" : {\n      \"equipment-type-version\" : \"equipment-type-version\",\n      \"equipment-type-description\" : \"equipment-type-description\",\n      \"manufacturer-name\" : \"manufacturer-name\",\n      \"manufacturer-identifier\" : \"manufacturer-identifier\",\n      \"equipment-type-name\" : \"equipment-type-name\",\n      \"asset-type-identifier\" : \"asset-type-identifier\",\n      \"equipment-type-identifier\" : \"equipment-type-identifier\"\n    }\n  }, {\n    \"common-actual-properties\" : {\n      \"manufacture-date\" : \"manufacture-date\",\n      \"is-powered\" : false,\n      \"serial-number\" : \"serial-number\",\n      \"asset-instance-identifier\" : \"asset-instance-identifier\",\n      \"temperature\" : \"temperature\"\n    },\n    \"common-equipment-properties\" : {\n      \"equipment-type-version\" : \"equipment-type-version\",\n      \"equipment-type-description\" : \"equipment-type-description\",\n      \"manufacturer-name\" : \"manufacturer-name\",\n      \"manufacturer-identifier\" : \"manufacturer-identifier\",\n      \"equipment-type-name\" : \"equipment-type-name\",\n      \"asset-type-identifier\" : \"asset-type-identifier\",\n      \"equipment-type-identifier\" : \"equipment-type-identifier\"\n    }\n  } ]\n}", TapiEquipmentActualEquipment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonHolderProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidActualHolderCommonHolderPropertiesGet", notes = "none", response = TapiEquipmentCommonHolderProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonHolderProperties", response = TapiEquipmentCommonHolderProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/actual-holder/common-holder-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonHolderProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidActualHolderCommonHolderPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"holder-location\" : \"holder-location\",\n  \"holder-category\" : \"holder-category\",\n  \"is-guided\" : false\n}", TapiEquipmentCommonHolderProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ActualHolder", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidActualHolderGet", notes = "none", response = TapiEquipmentActualHolder.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ActualHolder", response = TapiEquipmentActualHolder.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/actual-holder/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentActualHolder> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidActualHolderGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"common-holder-properties\" : {\n    \"holder-location\" : \"holder-location\",\n    \"holder-category\" : \"holder-category\",\n    \"is-guided\" : false\n  }\n}", TapiEquipmentActualHolder.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonHolderProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidExpectedHolderCommonHolderPropertiesGet", notes = "none", response = TapiEquipmentCommonHolderProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonHolderProperties", response = TapiEquipmentCommonHolderProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/expected-holder/common-holder-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonHolderProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidExpectedHolderCommonHolderPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"holder-location\" : \"holder-location\",\n  \"holder-category\" : \"holder-category\",\n  \"is-guided\" : false\n}", TapiEquipmentCommonHolderProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ExpectedHolder", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidExpectedHolderGet", notes = "none", response = TapiEquipmentExpectedHolder.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ExpectedHolder", response = TapiEquipmentExpectedHolder.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/expected-holder/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentExpectedHolder> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidExpectedHolderGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"common-holder-properties\" : {\n    \"holder-location\" : \"holder-location\",\n    \"holder-category\" : \"holder-category\",\n    \"is-guided\" : false\n  }\n}", TapiEquipmentExpectedHolder.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.Holder", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidGet", notes = "References the Holder in an Equipment that is available to take other Equipments.                  For example:                  - Slot in a sub-rack                  - Slot in a Field Replaceable Unit that can take a small form-factor pluggable.", response = TapiEquipmentHolder.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.Holder", response = TapiEquipmentHolder.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentHolder> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentHolder.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidNamevalueNameGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.EquipmentRef", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidOccupyingFruGet", notes = "The FRU that is occupying the holder.                   A holder may be unoccupied.                   An FRU may occupy more hat one holder (using or blocking are intentionally not distinguished here).", response = TapiEquipmentEquipmentRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.EquipmentRef", response = TapiEquipmentEquipmentRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/contained-holder={contained-holder-uuid}/occupying-fru/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentEquipmentRef> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidContainedHoldercontainedHolderUuidOccupyingFruGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of contained-holder",required=true) @PathVariable("contained-holder-uuid") String containedHolderUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentEquipmentRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonEquipmentProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentCommonEquipmentPropertiesGet", notes = "none", response = TapiEquipmentCommonEquipmentProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonEquipmentProperties", response = TapiEquipmentCommonEquipmentProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/common-equipment-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonEquipmentProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentCommonEquipmentPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"equipment-type-version\" : \"equipment-type-version\",\n  \"equipment-type-description\" : \"equipment-type-description\",\n  \"manufacturer-name\" : \"manufacturer-name\",\n  \"manufacturer-identifier\" : \"manufacturer-identifier\",\n  \"equipment-type-name\" : \"equipment-type-name\",\n  \"asset-type-identifier\" : \"asset-type-identifier\",\n  \"equipment-type-identifier\" : \"equipment-type-identifier\"\n}", TapiEquipmentCommonEquipmentProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonHolderProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedHolderCommonHolderPropertiesGet", notes = "none", response = TapiEquipmentCommonHolderProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonHolderProperties", response = TapiEquipmentCommonHolderProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/expected-holder/common-holder-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonHolderProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedHolderCommonHolderPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"holder-location\" : \"holder-location\",\n  \"holder-category\" : \"holder-category\",\n  \"is-guided\" : false\n}", TapiEquipmentCommonHolderProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ExpectedHolder", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedHolderGet", notes = "none", response = TapiEquipmentExpectedHolder.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ExpectedHolder", response = TapiEquipmentExpectedHolder.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/expected-holder/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentExpectedHolder> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedHolderGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"common-holder-properties\" : {\n    \"holder-location\" : \"holder-location\",\n    \"holder-category\" : \"holder-category\",\n    \"is-guided\" : false\n  }\n}", TapiEquipmentExpectedHolder.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.CommonEquipmentProperties", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedNonFieldReplaceableModuleCommonEquipmentPropertiesGet", notes = "none", response = TapiEquipmentCommonEquipmentProperties.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.CommonEquipmentProperties", response = TapiEquipmentCommonEquipmentProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/expected-non-field-replaceable-module/common-equipment-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentCommonEquipmentProperties> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedNonFieldReplaceableModuleCommonEquipmentPropertiesGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"equipment-type-version\" : \"equipment-type-version\",\n  \"equipment-type-description\" : \"equipment-type-description\",\n  \"manufacturer-name\" : \"manufacturer-name\",\n  \"manufacturer-identifier\" : \"manufacturer-identifier\",\n  \"equipment-type-name\" : \"equipment-type-name\",\n  \"asset-type-identifier\" : \"asset-type-identifier\",\n  \"equipment-type-identifier\" : \"equipment-type-identifier\"\n}", TapiEquipmentCommonEquipmentProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ExpectedNonFieldReplaceableModule", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedNonFieldReplaceableModuleGet", notes = "none", response = TapiEquipmentExpectedNonFieldReplaceableModule.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ExpectedNonFieldReplaceableModule", response = TapiEquipmentExpectedNonFieldReplaceableModule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/expected-non-field-replaceable-module/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentExpectedNonFieldReplaceableModule> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentExpectedNonFieldReplaceableModuleGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{ }", TapiEquipmentExpectedNonFieldReplaceableModule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ExpectedEquipment", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentGet", notes = "none", response = TapiEquipmentExpectedEquipment.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ExpectedEquipment", response = TapiEquipmentExpectedEquipment.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/expected-equipment/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentExpectedEquipment> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidExpectedEquipmentGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"expected-holder\" : [ {\n    \"common-holder-properties\" : {\n      \"holder-location\" : \"holder-location\",\n      \"holder-category\" : \"holder-category\",\n      \"is-guided\" : false\n    }\n  }, {\n    \"common-holder-properties\" : {\n      \"holder-location\" : \"holder-location\",\n      \"holder-category\" : \"holder-category\",\n      \"is-guided\" : false\n    }\n  } ],\n  \"expected-non-field-replaceable-module\" : [ { }, { } ],\n  \"common-equipment-properties\" : {\n    \"equipment-type-version\" : \"equipment-type-version\",\n    \"equipment-type-description\" : \"equipment-type-description\",\n    \"manufacturer-name\" : \"manufacturer-name\",\n    \"manufacturer-identifier\" : \"manufacturer-identifier\",\n    \"equipment-type-name\" : \"equipment-type-name\",\n    \"asset-type-identifier\" : \"asset-type-identifier\",\n    \"equipment-type-identifier\" : \"equipment-type-identifier\"\n  }\n}", TapiEquipmentExpectedEquipment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.Equipment", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidGet", notes = "none", response = TapiEquipmentEquipment.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.Equipment", response = TapiEquipmentEquipment.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentEquipment> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentEquipment.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/equipment={equipment-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextDeviceuuidEquipmentequipmentUuidNamevalueNameGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of equipment",required=true) @PathVariable("equipment-uuid") String equipmentUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.Device", nickname = "dataContextPhysicalContextDeviceuuidGet", notes = "none", response = TapiEquipmentDevice.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.Device", response = TapiEquipmentDevice.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentDevice> dataContextPhysicalContextDeviceuuidGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentDevice.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextDeviceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/device={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextDeviceuuidNamevalueNameGet(@ApiParam(value = "Id of device",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.PhysicalContext", nickname = "dataContextPhysicalContextGet", notes = "none", response = TapiEquipmentPhysicalContext.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.PhysicalContext", response = TapiEquipmentPhysicalContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentPhysicalContext> dataContextPhysicalContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentPhysicalContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextPhysicalContextNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/physical-context/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPhysicalContextNamePost(@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextPhysicalContextNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextPhysicalContextNamevalueNameDelete(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextPhysicalContextNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPhysicalContextNamevalueNamePut(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AbstractStrandRef", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdAdjacentStrandphysicalSpanUuidabstractStrandLocalIdGet", notes = "none", response = TapiEquipmentAbstractStrandRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AbstractStrandRef", response = TapiEquipmentAbstractStrandRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/adjacent-strand={physical-span-uuid},{abstract-strand-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAbstractStrandRef> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdAdjacentStrandphysicalSpanUuidabstractStrandLocalIdGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of adjacent-strand",required=true) @PathVariable("physical-span-uuid") String physicalSpanUuid,@ApiParam(value = "Id of adjacent-strand",required=true) @PathVariable("abstract-strand-local-id") String abstractStrandLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAbstractStrandRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.ConnectorPinAddress", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdConnectorPinconnectorIdentificationpinIdentificationequipmentUuidGet", notes = "A strand can end on two or more Pins (usually 2 pins, but a strand my be spliced to split a signal). This model supports only 2 ended strands.                  A abstract strand may be spliced at both ends and hence have no direct relationship to pins or may be connected to pins at one or both ends.                  In the essential model these Pins would be on connectors that plug in to connectors on Equipments.                  The AbstractStrand is extended to the pins of the AccessPort which are the Pins on the Connectors of the Equipment.                  In some cases it may not be relevant to represent the pin detail and hence the reference is to a connector alone.", response = TapiEquipmentConnectorPinAddress.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.ConnectorPinAddress", response = TapiEquipmentConnectorPinAddress.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/connector-pin={connector-identification},{pin-identification},{equipment-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentConnectorPinAddress> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdConnectorPinconnectorIdentificationpinIdentificationequipmentUuidGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("connector-identification") String connectorIdentification,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("pin-identification") String pinIdentification,@ApiParam(value = "Id of connector-pin",required=true) @PathVariable("equipment-uuid") String equipmentUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"connector-identification\" : \"connector-identification\",\n  \"equipment-uuid\" : \"equipment-uuid\",\n  \"pin-identification\" : \"pin-identification\"\n}", TapiEquipmentConnectorPinAddress.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AbstractStrand", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdGet", notes = "Both the serial segments that form an end-end strand and the parallel end-end strands.", response = TapiEquipmentAbstractStrand.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AbstractStrand", response = TapiEquipmentAbstractStrand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAbstractStrand> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAbstractStrand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdNamevalueNameGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AbstractStrandRef", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdSplicedStrandphysicalSpanUuidabstractStrandLocalIdGet", notes = "none", response = TapiEquipmentAbstractStrandRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AbstractStrandRef", response = TapiEquipmentAbstractStrandRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/spliced-strand={physical-span-uuid},{abstract-strand-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAbstractStrandRef> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdSplicedStrandphysicalSpanUuidabstractStrandLocalIdGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of spliced-strand",required=true) @PathVariable("physical-span-uuid") String physicalSpanUuid,@ApiParam(value = "Id of spliced-strand",required=true) @PathVariable("abstract-strand-local-id") String abstractStrandLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAbstractStrandRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdStrandMediaCharacteristicsvalueNameGet", notes = "Relevant physical properties of the abstract strand.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/abstract-strand={local-id}/strand-media-characteristics={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextPhysicalSpanuuidAbstractStrandlocalIdStrandMediaCharacteristicsvalueNameGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of abstract-strand",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of strand-media-characteristics",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AccessPortRef", nickname = "dataContextPhysicalContextPhysicalSpanuuidAccessPortdeviceUuidaccessPortUuidGet", notes = "none", response = TapiEquipmentAccessPortRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AccessPortRef", response = TapiEquipmentAccessPortRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/access-port={device-uuid},{access-port-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAccessPortRef> dataContextPhysicalContextPhysicalSpanuuidAccessPortdeviceUuidaccessPortUuidGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of access-port",required=true) @PathVariable("device-uuid") String deviceUuid,@ApiParam(value = "Id of access-port",required=true) @PathVariable("access-port-uuid") String accessPortUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAccessPortRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.PhysicalSpan", nickname = "dataContextPhysicalContextPhysicalSpanuuidGet", notes = "none", response = TapiEquipmentPhysicalSpan.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.PhysicalSpan", response = TapiEquipmentPhysicalSpan.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentPhysicalSpan> dataContextPhysicalContextPhysicalSpanuuidGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentPhysicalSpan.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextPhysicalContextPhysicalSpanuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/physical-span={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextPhysicalContextPhysicalSpanuuidNamevalueNameGet(@ApiParam(value = "Id of physical-span",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.equipment.PhysicalContext", nickname = "dataContextPhysicalContextPost", notes = "none", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/physical-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPhysicalContextPost(@ApiParam(value = "tapi.equipment.PhysicalContext to be added to list"  )  @Valid @RequestBody TapiEquipmentPhysicalContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.equipment.PhysicalContext", nickname = "dataContextPhysicalContextPut", notes = "none", tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/physical-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPhysicalContextPut(@ApiParam(value = "tapi.equipment.PhysicalContext to be added or updated"  )  @Valid @RequestBody TapiEquipmentPhysicalContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.Context", nickname = "dataContextPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextPost(@ApiParam(value = "tapi.common.Context to be added to list"  )  @Valid @RequestBody TapiCommonContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.Context", nickname = "dataContextPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextPut(@ApiParam(value = "tapi.common.Context to be added or updated"  )  @Valid @RequestBody TapiCommonContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointPost", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointPost(@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added to list"  )  @Valid @RequestBody TapiCommonContextServiceInterfacePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextServiceInterfacePointuuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextServiceInterfacePointuuidAvailableCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextServiceInterfacePointuuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidDelete", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecDelete", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecGet", notes = "none", response = TapiEthEthServiceIntefacePointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthServiceIntefacePointSpec", response = TapiEthEthServiceIntefacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthServiceIntefacePointSpec> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"phy-type\" : \"OTHER\",\n  \"phy-type-list\" : [ null, null ]\n}", TapiEthEthServiceIntefacePointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPost", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthServiceIntefacePointSpec to be added to list"  )  @Valid @RequestBody TapiEthEthServiceIntefacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.eth.EthServiceIntefacePointSpec", nickname = "dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPut", notes = "none", tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/eth-service-inteface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidEthServiceIntefacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.eth.EthServiceIntefacePointSpec to be added or updated"  )  @Valid @RequestBody TapiEthEthServiceIntefacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidGet", notes = "none", response = TapiCommonContextServiceInterfacePoint.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.context.ServiceInterfacePoint", response = TapiCommonContextServiceInterfacePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonContextServiceInterfacePoint> dataContextServiceInterfacePointuuidGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiCommonContextServiceInterfacePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec", response = TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelServiceInterfacePointSpec> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"mc-pool\" : {\n    \"supportable-spectrum\" : [ null, null ],\n    \"available-spectrum\" : [ {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    }, {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    } ],\n    \"occupied-spectrum\" : [ null, null ]\n  },\n  \"power-management-capability\" : {\n    \"supportable-maximum-output-power\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    }\n  }\n}", TapiPhotonicMediaMediaChannelServiceInterfacePointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet", notes = "none", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelPoolCapabilityPac> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"supportable-spectrum\" : [ null, null ],\n  \"available-spectrum\" : [ {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  }, {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  } ],\n  \"occupied-spectrum\" : [ null, null ]\n}", TapiPhotonicMediaMediaChannelPoolCapabilityPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelServiceInterfacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityGet", notes = "none", response = TapiPhotonicMediaPowerManagementCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementCapabilityPac", response = TapiPhotonicMediaPowerManagementCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerManagementCapabilityPac> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"supportable-maximum-output-power\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  }\n}", TapiPhotonicMediaPowerManagementCapabilityPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.MediaChannelServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/media-channel-service-interface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidMediaChannelServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.MediaChannelServiceInterfacePointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaMediaChannelServiceInterfacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidNamePost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidNamevalueNameDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextServiceInterfacePointuuidNamevalueNameGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextServiceInterfacePointuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidNamevalueNamePut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiServiceInterfacePointSpec", response = TapiPhotonicMediaOtsiServiceInterfacePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiServiceInterfacePointSpec> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"otsi-capability\" : {\n    \"supportable-modulation\" : [ \"RZ\", \"RZ\" ],\n    \"supportable-central-frequency-band\" : [ {\n      \"upper-central-frequency\" : 6,\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-central-frequency\" : 0\n    }, {\n      \"upper-central-frequency\" : 6,\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-central-frequency\" : 0\n    } ],\n    \"supportable-application-identifier\" : [ {\n      \"application-identifier-type\" : \"PROPRIETARY\",\n      \"application-code\" : \"application-code\"\n    }, {\n      \"application-identifier-type\" : \"PROPRIETARY\",\n      \"application-code\" : \"application-code\"\n    } ],\n    \"total-power-warn-threshold\" : {\n      \"total-power-upper-warn-threshold-default\" : \"total-power-upper-warn-threshold-default\",\n      \"total-power-lower-warn-threshold-min\" : \"total-power-lower-warn-threshold-min\",\n      \"total-power-upper-warn-threshold-min\" : \"total-power-upper-warn-threshold-min\",\n      \"total-power-upper-warn-threshold-max\" : \"total-power-upper-warn-threshold-max\",\n      \"total-power-lower-warn-threshold-max\" : \"total-power-lower-warn-threshold-max\",\n      \"total-power-lower-warn-threshold-default\" : \"total-power-lower-warn-threshold-default\"\n    }\n  },\n  \"power-management-capability\" : {\n    \"supportable-maximum-output-power\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    }\n  }\n}", TapiPhotonicMediaOtsiServiceInterfacePointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet", notes = "none", response = TapiPhotonicMediaOtsiCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiCapabilityPac", response = TapiPhotonicMediaOtsiCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiCapabilityPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"supportable-modulation\" : [ \"RZ\", \"RZ\" ],\n  \"supportable-central-frequency-band\" : [ {\n    \"upper-central-frequency\" : 6,\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-central-frequency\" : 0\n  }, {\n    \"upper-central-frequency\" : 6,\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-central-frequency\" : 0\n  } ],\n  \"supportable-application-identifier\" : [ {\n    \"application-identifier-type\" : \"PROPRIETARY\",\n    \"application-code\" : \"application-code\"\n  }, {\n    \"application-identifier-type\" : \"PROPRIETARY\",\n    \"application-code\" : \"application-code\"\n  } ],\n  \"total-power-warn-threshold\" : {\n    \"total-power-upper-warn-threshold-default\" : \"total-power-upper-warn-threshold-default\",\n    \"total-power-lower-warn-threshold-min\" : \"total-power-lower-warn-threshold-min\",\n    \"total-power-upper-warn-threshold-min\" : \"total-power-upper-warn-threshold-min\",\n    \"total-power-upper-warn-threshold-max\" : \"total-power-upper-warn-threshold-max\",\n    \"total-power-lower-warn-threshold-max\" : \"total-power-lower-warn-threshold-max\",\n    \"total-power-lower-warn-threshold-default\" : \"total-power-lower-warn-threshold-default\"\n  }\n}", TapiPhotonicMediaOtsiCapabilityPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierapplicationCodeGet", notes = "The list of supportable ApplicationIdentifiers.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-application-identifier={application-code}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableApplicationIdentifierapplicationCodeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of supportable-application-identifier",required=true) @PathVariable("application-code") String applicationCode) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"application-identifier-type\" : \"PROPRIETARY\",\n  \"application-code\" : \"application-code\"\n}", TapiPhotonicMediaApplicationIdentifier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-central-frequency-band/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandFrequencyConstraintGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequencyBand", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandGet", notes = "Each spectrum band supported for otsi trasmitter to be tuned on, is specified                  as per it's lower and upper central frequencies supported and its frequency constraints,                  consisting in the frequency Grid and the AdjustmentGranularity, used to uniquely identify all                  central frequencies supported within the band.", response = TapiPhotonicMediaCentralFrequencyBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequencyBand", response = TapiPhotonicMediaCentralFrequencyBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/supportable-central-frequency-band/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaCentralFrequencyBand> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilitySupportableCentralFrequencyBandGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"upper-central-frequency\" : 6,\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-central-frequency\" : 0\n}", TapiPhotonicMediaCentralFrequencyBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.TotalPowerThresholdPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet", notes = "none", response = TapiPhotonicMediaTotalPowerThresholdPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.TotalPowerThresholdPac", response = TapiPhotonicMediaTotalPowerThresholdPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/otsi-capability/total-power-warn-threshold/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaTotalPowerThresholdPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecOtsiCapabilityTotalPowerWarnThresholdGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-power-upper-warn-threshold-default\" : \"total-power-upper-warn-threshold-default\",\n  \"total-power-lower-warn-threshold-min\" : \"total-power-lower-warn-threshold-min\",\n  \"total-power-upper-warn-threshold-min\" : \"total-power-upper-warn-threshold-min\",\n  \"total-power-upper-warn-threshold-max\" : \"total-power-upper-warn-threshold-max\",\n  \"total-power-lower-warn-threshold-max\" : \"total-power-lower-warn-threshold-max\",\n  \"total-power-lower-warn-threshold-default\" : \"total-power-lower-warn-threshold-default\"\n}", TapiPhotonicMediaTotalPowerThresholdPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaOtsiServiceInterfacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityDelete", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityGet", notes = "none", response = TapiPhotonicMediaPowerManagementCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerManagementCapabilityPac", response = TapiPhotonicMediaPowerManagementCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerManagementCapabilityPac> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"supportable-maximum-output-power\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  }\n}", TapiPhotonicMediaPowerManagementCapabilityPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPost", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerManagementCapabilityPac", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerManagementCapabilityPac to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerManagementCapabilityPac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut", notes = "This parameter exposes the maximum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-maximum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMaximumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut", notes = "This parameter exposes the minimum output power supported                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/supportable-minimum-output-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilitySupportableMinimumOutputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut", notes = "This parameter exposes the maximum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-maximum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMaximumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerDelete(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPost(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added to list"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.PowerProperties", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut", notes = "This parameter exposes the minimum input power tolerated                  at the Logical-Termination-Point (LTP) associated to the SIP.", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/power-management-capability/tolerable-minimum-input-power/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPowerManagementCapabilityTolerableMinimumInputPowerPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.PowerProperties to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaPowerProperties body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.photonic.media.OtsiServiceInterfacePointSpec", nickname = "dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut", notes = "none", tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/otsi-service-interface-point-spec/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidOtsiServiceInterfacePointSpecPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.photonic.media.OtsiServiceInterfacePointSpec to be added or updated"  )  @Valid @RequestBody TapiPhotonicMediaOtsiServiceInterfacePointSpec body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.context.ServiceInterfacePoint", nickname = "dataContextServiceInterfacePointuuidPut", notes = "none", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextServiceInterfacePointuuidPut(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.context.ServiceInterfacePoint to be added or updated"  )  @Valid @RequestBody TapiCommonContextServiceInterfacePoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextServiceInterfacePointuuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextServiceInterfacePointuuidTotalPotentialCapacityGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/service-interface-point={uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextServiceInterfacePointuuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of service-interface-point",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextDelete", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextTopologyContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextGet", notes = "Augments the base TAPI Context with TopologyService information", response = TapiTopologyTopologyContext.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyContext", response = TapiTopologyTopologyContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologyContext> dataContextTopologyContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"nw-topology-service\" : \"\",\n  \"topology\" : [ \"\", \"\" ]\n}", TapiTopologyTopologyContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NetworkTopologyService", nickname = "dataContextTopologyContextNwTopologyServiceGet", notes = "none", response = TapiTopologyNetworkTopologyService.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NetworkTopologyService", response = TapiTopologyNetworkTopologyService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNetworkTopologyService> dataContextTopologyContextNwTopologyServiceGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNetworkTopologyService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextNwTopologyServiceNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextNwTopologyServiceNamevalueNameGet(@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/nw-topology-service/topology={topology-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologyRef> dataContextTopologyContextNwTopologyServiceTopologytopologyUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("topology-uuid") String topologyUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"topology-uuid\" : \"topology-uuid\"\n}", TapiTopologyTopologyRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextPost", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/topology-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextTopologyContextPost(@ApiParam(value = "tapi.topology.TopologyContext to be added to list"  )  @Valid @RequestBody TapiTopologyTopologyContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.context.TopologyContext", nickname = "dataContextTopologyContextPut", notes = "Augments the base TAPI Context with TopologyService information", tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextTopologyContextPut(@ApiParam(value = "tapi.topology.TopologyContext to be added or updated"  )  @Valid @RequestBody TapiTopologyTopologyContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/boundary-node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidBoundaryNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of boundary-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.topologycontext.Topology", nickname = "dataContextTopologyContextTopologyuuidGet", notes = "none", response = TapiTopologyTopologycontextTopology.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.topologycontext.Topology", response = TapiTopologyTopologycontextTopology.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologycontextTopology> dataContextTopologyContextTopologyuuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyTopologycontextTopology.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidLinklinkUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.Link", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidGet", notes = "none", response = TapiTopologyLink.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Link", response = TapiTopologyLink.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLink> dataContextTopologyContextTopologyuuidLinklinkUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyLink.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidLinklinkUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/node-edge-point={topology-uuid},{node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidLinklinkUuidNodeEdgePointtopologyUuidnodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidLinklinkUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidLinklinkUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.ValidationMechanism", nickname = "dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet", notes = "Provides details of the specific validation mechanism(s) used to confirm the presence of an intended topologicalEntity.", response = TapiTopologyValidationMechanism.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.ValidationMechanism", response = TapiTopologyValidationMechanism.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/link={link-uuid}/validation-mechanism={validation-mechanism}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyValidationMechanism> dataContextTopologyContextTopologyuuidLinklinkUuidValidationMechanismvalidationMechanismGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of link",required=true) @PathVariable("link-uuid") String linkUuid,@ApiParam(value = "Id of validation-mechanism",required=true) @PathVariable("validation-mechanism") String validationMechanism) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"layer-protocol-adjacency-validated\" : \"layer-protocol-adjacency-validated\",\n  \"validation-mechanism\" : \"validation-mechanism\",\n  \"validation-robustness\" : \"validation-robustness\"\n}", TapiTopologyValidationMechanism.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/encap-topology/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologyRef> dataContextTopologyContextTopologyuuidNodenodeUuidEncapTopologyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"topology-uuid\" : \"topology-uuid\"\n}", TapiTopologyTopologyRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.topology.Node", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidGet", notes = "none", response = TapiTopologyTopologyNode.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.topology.Node", response = TapiTopologyTopologyNode.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologyNode> dataContextTopologyContextTopologyuuidNodenodeUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyTopologyNode.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidaggregatedNodeEdgePointNodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/aggregated-node-edge-point={topology-uuid},{aggregated-node-edge-point-node-uuid},{aggregated-node-edge-point-node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAggregatedNodeEdgePointtopologyUuidaggregatedNodeEdgePointNodeUuidaggregatedNodeEdgePointNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-uuid") String aggregatedNodeEdgePointNodeUuid,@ApiParam(value = "Id of aggregated-node-edge-point",required=true) @PathVariable("aggregated-node-edge-point-node-edge-point-uuid") String aggregatedNodeEdgePointNodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NepLayerProtocolCapability", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet", notes = "none", response = TapiTopologyNepLayerProtocolCapability.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NepLayerProtocolCapability", response = TapiTopologyNepLayerProtocolCapability.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/available-cep-layer-protocol={layer-protocol-qualifier}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNepLayerProtocolCapability> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidAvailableCepLayerProtocollayerProtocolQualifierGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-cep-layer-protocol",required=true) @PathVariable("layer-protocol-qualifier") String layerProtocolQualifier) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"number-of-cep-instances\" : 0,\n  \"layer-protocol-qualifier\" : \"layer-protocol-qualifier\"\n}", TapiTopologyNepLayerProtocolCapability.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ConnectionEndPointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidaggregatedConnectionEndPointNodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet", notes = "none", response = TapiConnectivityConnectionEndPointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ConnectionEndPointRef", response = TapiConnectivityConnectionEndPointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/aggregated-connection-end-point={topology-uuid},{aggregated-connection-end-point-node-uuid},{aggregated-connection-end-point-node-edge-point-uuid},{aggregated-connection-end-point-connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityConnectionEndPointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidAggregatedConnectionEndPointtopologyUuidaggregatedConnectionEndPointNodeUuidaggregatedConnectionEndPointNodeEdgePointUuidaggregatedConnectionEndPointConnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-node-uuid") String aggregatedConnectionEndPointNodeUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-node-edge-point-uuid") String aggregatedConnectionEndPointNodeEdgePointUuid,@ApiParam(value = "Id of aggregated-connection-end-point",required=true) @PathVariable("aggregated-connection-end-point-connection-end-point-uuid") String aggregatedConnectionEndPointConnectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityConnectionEndPointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidclientNodeEdgePointNodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/client-node-edge-point={topology-uuid},{client-node-edge-point-node-uuid},{client-node-edge-point-node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidClientNodeEdgePointtopologyUuidclientNodeEdgePointNodeUuidclientNodeEdgePointNodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("client-node-edge-point-node-uuid") String clientNodeEdgePointNodeUuid,@ApiParam(value = "Id of client-node-edge-point",required=true) @PathVariable("client-node-edge-point-node-edge-point-uuid") String clientNodeEdgePointNodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.ControlFrameFilter", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacFilterConfigGet", notes = "This attribute models the FilterConfig MI defined in section 8.3/G.8021. It indicates the configured filter action for each of the 33 group MAC addresses for control frames. The 33 MAC addresses are:                  - All bridges address: 01-80-C2-00-00-10,                  - Reserved addresses: 01-80-C2-00-00-00 to 01-80-C2-00-00-0F,                  - GARP Application addresses: 01-80-C2-00-00-20 to 01-80-C2-00-00-2F.                  The filter action is Pass or Block.                   If the destination address of the incoming ETH_CI_D matches one of the above addresses, the filter process shall perform the corresponding configured filter action.                   If none of the above addresses match, the ETH_CI_D is passed.", response = TapiEthControlFrameFilter.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.ControlFrameFilter", response = TapiEthControlFrameFilter.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/filter-config/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthControlFrameFilter> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacFilterConfigGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"c-2-00-00-0-c\" : false,\n  \"c-2-00-00-2-a\" : false,\n  \"c-2-00-00-0-b\" : false,\n  \"c-2-00-00-0-e\" : false,\n  \"c-2-00-00-2-c\" : false,\n  \"c-2-00-00-0-d\" : false,\n  \"c-2-00-00-2-b\" : false,\n  \"c-2-00-00-2-e\" : false,\n  \"c-2-00-00-0-f\" : false,\n  \"c-2-00-00-2-d\" : false,\n  \"c-2-00-00-2-f\" : false,\n  \"c-2-00-00-10\" : false,\n  \"c-2-00-00-09\" : false,\n  \"c-2-00-00-07\" : false,\n  \"c-2-00-00-29\" : false,\n  \"c-2-00-00-08\" : false,\n  \"c-2-00-00-05\" : false,\n  \"c-2-00-00-27\" : false,\n  \"c-2-00-00-06\" : false,\n  \"c-2-00-00-28\" : false,\n  \"c-2-00-00-03\" : false,\n  \"c-2-00-00-25\" : false,\n  \"c-2-00-00-04\" : false,\n  \"c-2-00-00-26\" : false,\n  \"c-2-00-00-01\" : false,\n  \"c-2-00-00-23\" : false,\n  \"c-2-00-00-02\" : false,\n  \"c-2-00-00-24\" : false,\n  \"c-2-00-00-21\" : false,\n  \"c-2-00-00-00\" : false,\n  \"c-2-00-00-22\" : false,\n  \"c-2-00-00-20\" : false,\n  \"c-2-00-00-0-a\" : false\n}", TapiEthControlFrameFilter.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCtpCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacGet", notes = "none", response = TapiEthEthCtpCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpCommonPac", response = TapiEthEthCtpCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCtpCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"csf-rdi-fdi-enable\" : false,\n  \"vlan-config\" : 1,\n  \"filter-config\" : {\n    \"c-2-00-00-0-c\" : false,\n    \"c-2-00-00-2-a\" : false,\n    \"c-2-00-00-0-b\" : false,\n    \"c-2-00-00-0-e\" : false,\n    \"c-2-00-00-2-c\" : false,\n    \"c-2-00-00-0-d\" : false,\n    \"c-2-00-00-2-b\" : false,\n    \"c-2-00-00-2-e\" : false,\n    \"c-2-00-00-0-f\" : false,\n    \"c-2-00-00-2-d\" : false,\n    \"c-2-00-00-2-f\" : false,\n    \"c-2-00-00-10\" : false,\n    \"c-2-00-00-09\" : false,\n    \"c-2-00-00-07\" : false,\n    \"c-2-00-00-29\" : false,\n    \"c-2-00-00-08\" : false,\n    \"c-2-00-00-05\" : false,\n    \"c-2-00-00-27\" : false,\n    \"c-2-00-00-06\" : false,\n    \"c-2-00-00-28\" : false,\n    \"c-2-00-00-03\" : false,\n    \"c-2-00-00-25\" : false,\n    \"c-2-00-00-04\" : false,\n    \"c-2-00-00-26\" : false,\n    \"c-2-00-00-01\" : false,\n    \"c-2-00-00-23\" : false,\n    \"c-2-00-00-02\" : false,\n    \"c-2-00-00-24\" : false,\n    \"c-2-00-00-21\" : false,\n    \"c-2-00-00-00\" : false,\n    \"c-2-00-00-22\" : false,\n    \"c-2-00-00-20\" : false,\n    \"c-2-00-00-0-a\" : false\n  },\n  \"csf-report\" : false,\n  \"mac-length\" : 1,\n  \"traffic-shaping-pac\" : {\n    \"codirectional\" : false,\n    \"sched-config\" : \"sched-config\",\n    \"prio-config-list\" : [ null, null ],\n    \"queue-config-list\" : [ {\n      \"queue-id\" : 1,\n      \"queue-threshold\" : 1,\n      \"queue-depth\" : 7\n    }, {\n      \"queue-id\" : 1,\n      \"queue-threshold\" : 1,\n      \"queue-depth\" : 7\n    } ]\n  },\n  \"filter-config-snk\" : [ \"filter-config-snk\", \"filter-config-snk\" ],\n  \"pll-thr\" : 5,\n  \"csf-config\" : \"DISABLED\",\n  \"collector-max-delay\" : 6,\n  \"is-ssf-reported\" : false,\n  \"auxiliary-function-position-sequence\" : [ 0, 0 ],\n  \"traffic-conditioning-pac\" : {\n    \"codirectional\" : false,\n    \"cond-config-list\" : [ {\n      \"queue-id\" : 3,\n      \"coupling-flag\" : false,\n      \"cbs\" : 5,\n      \"ebs\" : 7,\n      \"cir\" : 2,\n      \"colour-mode\" : \"COLOUR_BLIND\",\n      \"eir\" : 9\n    }, {\n      \"queue-id\" : 3,\n      \"coupling-flag\" : false,\n      \"cbs\" : 5,\n      \"ebs\" : 7,\n      \"cir\" : 2,\n      \"colour-mode\" : \"COLOUR_BLIND\",\n      \"eir\" : 9\n    } ],\n    \"prio-config-list\" : [ {\n      \"queue-id\" : 4,\n      \"priority\" : 2\n    }, {\n      \"queue-id\" : 4,\n      \"priority\" : 2\n    } ]\n  }\n}", TapiEthEthCtpCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet", notes = "This attribute indicates for the conditioner process the conditioning parameters:                  - Queue ID: Indicates the Queue ID                  - Committed Information Rate (CIR): number of bits per second                  - Committed Burst Size (CBS): number of bytes                  - Excess Information Rate (EIR): number of bits per second                  - Excess Burst Size (EBS): number of bytes                  - Coupling flag (CF): 0 or 1                  - Color mode (CM): color-blind and color-aware.", response = TapiEthTrafficConditioningConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningConfiguration", response = TapiEthTrafficConditioningConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/cond-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficConditioningConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacCondConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of cond-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 3,\n  \"coupling-flag\" : false,\n  \"cbs\" : 5,\n  \"ebs\" : 7,\n  \"cir\" : 2,\n  \"colour-mode\" : \"COLOUR_BLIND\",\n  \"eir\" : 9\n}", TapiEthTrafficConditioningConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficConditioningPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacGet", notes = "none", response = TapiEthTrafficConditioningPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficConditioningPac", response = TapiEthTrafficConditioningPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficConditioningPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : false,\n  \"cond-config-list\" : [ {\n    \"queue-id\" : 3,\n    \"coupling-flag\" : false,\n    \"cbs\" : 5,\n    \"ebs\" : 7,\n    \"cir\" : 2,\n    \"colour-mode\" : \"COLOUR_BLIND\",\n    \"eir\" : 9\n  }, {\n    \"queue-id\" : 3,\n    \"coupling-flag\" : false,\n    \"cbs\" : 5,\n    \"ebs\" : 7,\n    \"cir\" : 2,\n    \"colour-mode\" : \"COLOUR_BLIND\",\n    \"eir\" : 9\n  } ],\n  \"prio-config-list\" : [ {\n    \"queue-id\" : 4,\n    \"priority\" : 2\n  }, {\n    \"queue-id\" : 4,\n    \"priority\" : 2\n  } ]\n}", TapiEthTrafficConditioningPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet", notes = "This attribute indicates the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-conditioning-pac/prio-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficConditioningPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 4,\n  \"priority\" : 2\n}", TapiEthPriorityConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.TrafficShapingPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacGet", notes = "none", response = TapiEthTrafficShapingPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.TrafficShapingPac", response = TapiEthTrafficShapingPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthTrafficShapingPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"codirectional\" : false,\n  \"sched-config\" : \"sched-config\",\n  \"prio-config-list\" : [ null, null ],\n  \"queue-config-list\" : [ {\n    \"queue-id\" : 1,\n    \"queue-threshold\" : 1,\n    \"queue-depth\" : 7\n  }, {\n    \"queue-id\" : 1,\n    \"queue-threshold\" : 1,\n    \"queue-depth\" : 7\n  } ]\n}", TapiEthTrafficShapingPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet", notes = "This attribute configures the Priority Splitter function for the mapping of the Ethernet frame priority (ETH_CI_P) values to the output queue.", response = TapiEthPriorityConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityConfiguration", response = TapiEthPriorityConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/prio-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacPrioConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of prio-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 4,\n  \"priority\" : 2\n}", TapiEthPriorityConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.QueueConfiguration", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet", notes = "This attribute configures the Queue depth and Dropping threshold parameters of the Queue process. The Queue depth sets the maximum size of the queue in bytes. An incoming ETH_CI traffic unit is dropped if there is insufficient space in the queue to hold the whole unit. The Dropping threshold sets the threshold of the queue. If the queue is filled beyond this threshold, incoming ETH_CI traffic units accompanied by the ETH_CI_DE signal set are dropped.", response = TapiEthQueueConfiguration.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.QueueConfiguration", response = TapiEthQueueConfiguration.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/eth-ctp-common-pac/traffic-shaping-pac/queue-config-list={queue-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthQueueConfiguration> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpEthCtpCommonPacTrafficShapingPacQueueConfigListqueueIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of queue-config-list",required=true) @PathVariable("queue-id") Integer queueId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"queue-id\" : 1,\n  \"queue-threshold\" : 1,\n  \"queue-depth\" : 7\n}", TapiEthQueueConfiguration.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthCtpPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet", notes = "none", response = TapiEthEthCtpPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthCtpPac", response = TapiEthEthCtpPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-ctp/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthCtpPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthCtpGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-ctp-common-pac\" : {\n    \"csf-rdi-fdi-enable\" : false,\n    \"vlan-config\" : 1,\n    \"filter-config\" : {\n      \"c-2-00-00-0-c\" : false,\n      \"c-2-00-00-2-a\" : false,\n      \"c-2-00-00-0-b\" : false,\n      \"c-2-00-00-0-e\" : false,\n      \"c-2-00-00-2-c\" : false,\n      \"c-2-00-00-0-d\" : false,\n      \"c-2-00-00-2-b\" : false,\n      \"c-2-00-00-2-e\" : false,\n      \"c-2-00-00-0-f\" : false,\n      \"c-2-00-00-2-d\" : false,\n      \"c-2-00-00-2-f\" : false,\n      \"c-2-00-00-10\" : false,\n      \"c-2-00-00-09\" : false,\n      \"c-2-00-00-07\" : false,\n      \"c-2-00-00-29\" : false,\n      \"c-2-00-00-08\" : false,\n      \"c-2-00-00-05\" : false,\n      \"c-2-00-00-27\" : false,\n      \"c-2-00-00-06\" : false,\n      \"c-2-00-00-28\" : false,\n      \"c-2-00-00-03\" : false,\n      \"c-2-00-00-25\" : false,\n      \"c-2-00-00-04\" : false,\n      \"c-2-00-00-26\" : false,\n      \"c-2-00-00-01\" : false,\n      \"c-2-00-00-23\" : false,\n      \"c-2-00-00-02\" : false,\n      \"c-2-00-00-24\" : false,\n      \"c-2-00-00-21\" : false,\n      \"c-2-00-00-00\" : false,\n      \"c-2-00-00-22\" : false,\n      \"c-2-00-00-20\" : false,\n      \"c-2-00-00-0-a\" : false\n    },\n    \"csf-report\" : false,\n    \"mac-length\" : 1,\n    \"traffic-shaping-pac\" : {\n      \"codirectional\" : false,\n      \"sched-config\" : \"sched-config\",\n      \"prio-config-list\" : [ null, null ],\n      \"queue-config-list\" : [ {\n        \"queue-id\" : 1,\n        \"queue-threshold\" : 1,\n        \"queue-depth\" : 7\n      }, {\n        \"queue-id\" : 1,\n        \"queue-threshold\" : 1,\n        \"queue-depth\" : 7\n      } ]\n    },\n    \"filter-config-snk\" : [ \"filter-config-snk\", \"filter-config-snk\" ],\n    \"pll-thr\" : 5,\n    \"csf-config\" : \"DISABLED\",\n    \"collector-max-delay\" : 6,\n    \"is-ssf-reported\" : false,\n    \"auxiliary-function-position-sequence\" : [ 0, 0 ],\n    \"traffic-conditioning-pac\" : {\n      \"codirectional\" : false,\n      \"cond-config-list\" : [ {\n        \"queue-id\" : 3,\n        \"coupling-flag\" : false,\n        \"cbs\" : 5,\n        \"ebs\" : 7,\n        \"cir\" : 2,\n        \"colour-mode\" : \"COLOUR_BLIND\",\n        \"eir\" : 9\n      }, {\n        \"queue-id\" : 3,\n        \"coupling-flag\" : false,\n        \"cbs\" : 5,\n        \"ebs\" : 7,\n        \"cir\" : 2,\n        \"colour-mode\" : \"COLOUR_BLIND\",\n        \"eir\" : 9\n      } ],\n      \"prio-config-list\" : [ {\n        \"queue-id\" : 4,\n        \"priority\" : 2\n      }, {\n        \"queue-id\" : 4,\n        \"priority\" : 2\n      } ]\n    }\n  },\n  \"partner-system-priority\" : 5,\n  \"partner-oper-key\" : 5,\n  \"actor-system-priority\" : 6,\n  \"actor-oper-key\" : 0,\n  \"data-rate\" : 1,\n  \"actor-system-id\" : \"actor-system-id\",\n  \"partner-system-id\" : \"partner-system-id\"\n}", TapiEthEthCtpPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTerminationCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacGet", notes = "none", response = TapiEthEthTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationCommonPac", response = TapiEthEthTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/eth-termination-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTerminationCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"filter-config-1\" : [ \"filter-config-1\", \"filter-config-1\" ],\n  \"ether-type\" : \"C_Tag\",\n  \"priority-code-point-config\" : \"8P0D\",\n  \"frametype-config\" : \"ADMIT_ONLY_VLAN_TAGGED_FRAMES\",\n  \"port-vid\" : \"1\",\n  \"priority-regenerate\" : {\n    \"priority-0\" : 6,\n    \"priority-1\" : 7,\n    \"priority-2\" : 1,\n    \"priority-3\" : 4,\n    \"priority-4\" : 5,\n    \"priority-5\" : 9,\n    \"priority-6\" : 9,\n    \"priority-7\" : 6\n  }\n}", TapiEthEthTerminationCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.PriorityMapping", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacPriorityRegenerateGet", notes = "This attribute models the ETHx/ETH-m _A_Sk_MI_P_Regenerate information defined in G.8021.", response = TapiEthPriorityMapping.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.PriorityMapping", response = TapiEthPriorityMapping.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/eth-termination-common-pac/priority-regenerate/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthPriorityMapping> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermEthTerminationCommonPacPriorityRegenerateGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"priority-0\" : 6,\n  \"priority-1\" : 7,\n  \"priority-2\" : 1,\n  \"priority-3\" : 4,\n  \"priority-4\" : 5,\n  \"priority-5\" : 9,\n  \"priority-6\" : 9,\n  \"priority-7\" : 6\n}", TapiEthPriorityMapping.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet", notes = "none", response = TapiEthEthTerminationPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthTerminationPac", response = TapiEthEthTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/eth-term/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEthTermGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-termination-common-pac\" : {\n    \"filter-config-1\" : [ \"filter-config-1\", \"filter-config-1\" ],\n    \"ether-type\" : \"C_Tag\",\n    \"priority-code-point-config\" : \"8P0D\",\n    \"frametype-config\" : \"ADMIT_ONLY_VLAN_TAGGED_FRAMES\",\n    \"port-vid\" : \"1\",\n    \"priority-regenerate\" : {\n      \"priority-0\" : 6,\n      \"priority-1\" : 7,\n      \"priority-2\" : 1,\n      \"priority-3\" : 4,\n      \"priority-4\" : 5,\n      \"priority-5\" : 9,\n      \"priority-6\" : 9,\n      \"priority-7\" : 6\n    }\n  }\n}", TapiEthEthTerminationPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EtyTerminationCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermEtyTerminationCommonPacGet", notes = "none", response = TapiEthEtyTerminationCommonPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationCommonPac", response = TapiEthEtyTerminationCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/ety-term/ety-termination-common-pac/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEtyTerminationCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermEtyTerminationCommonPacGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"is-fts-enabled\" : false,\n  \"is-tx-pause-enabled\" : false\n}", TapiEthEtyTerminationCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EtyTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet", notes = "none", response = TapiEthEtyTerminationPac.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EtyTerminationPac", response = TapiEthEtyTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/ety-term/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEtyTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecEtyTermGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEthEtyTerminationPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.eth.EthConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet", notes = "Augments the base LayerProtocol information in ConnectionEndPoint with ETH-specific information", response = TapiEthEthConnectionEndPointSpec.class, tags={ "tapi-eth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.eth.EthConnectionEndPointSpec", response = TapiEthEthConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/eth-connection-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEthEthConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidEthConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"eth-term\" : {\n    \"eth-termination-common-pac\" : {\n      \"filter-config-1\" : [ \"filter-config-1\", \"filter-config-1\" ],\n      \"ether-type\" : \"C_Tag\",\n      \"priority-code-point-config\" : \"8P0D\",\n      \"frametype-config\" : \"ADMIT_ONLY_VLAN_TAGGED_FRAMES\",\n      \"port-vid\" : \"1\",\n      \"priority-regenerate\" : {\n        \"priority-0\" : 6,\n        \"priority-1\" : 7,\n        \"priority-2\" : 1,\n        \"priority-3\" : 4,\n        \"priority-4\" : 5,\n        \"priority-5\" : 9,\n        \"priority-6\" : 9,\n        \"priority-7\" : 6\n      }\n    }\n  },\n  \"ety-term\" : \"\",\n  \"eth-ctp\" : {\n    \"eth-ctp-common-pac\" : {\n      \"csf-rdi-fdi-enable\" : false,\n      \"vlan-config\" : 1,\n      \"filter-config\" : {\n        \"c-2-00-00-0-c\" : false,\n        \"c-2-00-00-2-a\" : false,\n        \"c-2-00-00-0-b\" : false,\n        \"c-2-00-00-0-e\" : false,\n        \"c-2-00-00-2-c\" : false,\n        \"c-2-00-00-0-d\" : false,\n        \"c-2-00-00-2-b\" : false,\n        \"c-2-00-00-2-e\" : false,\n        \"c-2-00-00-0-f\" : false,\n        \"c-2-00-00-2-d\" : false,\n        \"c-2-00-00-2-f\" : false,\n        \"c-2-00-00-10\" : false,\n        \"c-2-00-00-09\" : false,\n        \"c-2-00-00-07\" : false,\n        \"c-2-00-00-29\" : false,\n        \"c-2-00-00-08\" : false,\n        \"c-2-00-00-05\" : false,\n        \"c-2-00-00-27\" : false,\n        \"c-2-00-00-06\" : false,\n        \"c-2-00-00-28\" : false,\n        \"c-2-00-00-03\" : false,\n        \"c-2-00-00-25\" : false,\n        \"c-2-00-00-04\" : false,\n        \"c-2-00-00-26\" : false,\n        \"c-2-00-00-01\" : false,\n        \"c-2-00-00-23\" : false,\n        \"c-2-00-00-02\" : false,\n        \"c-2-00-00-24\" : false,\n        \"c-2-00-00-21\" : false,\n        \"c-2-00-00-00\" : false,\n        \"c-2-00-00-22\" : false,\n        \"c-2-00-00-20\" : false,\n        \"c-2-00-00-0-a\" : false\n      },\n      \"csf-report\" : false,\n      \"mac-length\" : 1,\n      \"traffic-shaping-pac\" : {\n        \"codirectional\" : false,\n        \"sched-config\" : \"sched-config\",\n        \"prio-config-list\" : [ null, null ],\n        \"queue-config-list\" : [ {\n          \"queue-id\" : 1,\n          \"queue-threshold\" : 1,\n          \"queue-depth\" : 7\n        }, {\n          \"queue-id\" : 1,\n          \"queue-threshold\" : 1,\n          \"queue-depth\" : 7\n        } ]\n      },\n      \"filter-config-snk\" : [ \"filter-config-snk\", \"filter-config-snk\" ],\n      \"pll-thr\" : 5,\n      \"csf-config\" : \"DISABLED\",\n      \"collector-max-delay\" : 6,\n      \"is-ssf-reported\" : false,\n      \"auxiliary-function-position-sequence\" : [ 0, 0 ],\n      \"traffic-conditioning-pac\" : {\n        \"codirectional\" : false,\n        \"cond-config-list\" : [ {\n          \"queue-id\" : 3,\n          \"coupling-flag\" : false,\n          \"cbs\" : 5,\n          \"ebs\" : 7,\n          \"cir\" : 2,\n          \"colour-mode\" : \"COLOUR_BLIND\",\n          \"eir\" : 9\n        }, {\n          \"queue-id\" : 3,\n          \"coupling-flag\" : false,\n          \"cbs\" : 5,\n          \"ebs\" : 7,\n          \"cir\" : 2,\n          \"colour-mode\" : \"COLOUR_BLIND\",\n          \"eir\" : 9\n        } ],\n        \"prio-config-list\" : [ {\n          \"queue-id\" : 4,\n          \"priority\" : 2\n        }, {\n          \"queue-id\" : 4,\n          \"priority\" : 2\n        } ]\n      }\n    },\n    \"partner-system-priority\" : 5,\n    \"partner-oper-key\" : 5,\n    \"actor-system-priority\" : 6,\n    \"actor-oper-key\" : 0,\n    \"data-rate\" : 1,\n    \"actor-system-id\" : \"actor-system-id\",\n    \"partner-system-id\" : \"partner-system-id\"\n  }\n}", TapiEthEthConnectionEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.ceplist.ConnectionEndPoint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet", notes = "none", response = TapiConnectivityCeplistConnectionEndPoint.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.ceplist.ConnectionEndPoint", response = TapiConnectivityCeplistConnectionEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityCeplistConnectionEndPoint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityCeplistConnectionEndPoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet", notes = "none", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelConnectionEndPointSpec", response = TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"media-channel\" : {\n    \"measured-power-egress\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    },\n    \"occupied-spectrum\" : {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    }\n  }\n}", TapiPhotonicMediaMediaChannelConnectionEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPropertiesPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet", notes = "none", response = TapiPhotonicMediaMediaChannelPropertiesPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPropertiesPac", response = TapiPhotonicMediaMediaChannelPropertiesPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelPropertiesPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"measured-power-egress\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  },\n  \"occupied-spectrum\" : {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  }\n}", TapiPhotonicMediaMediaChannelPropertiesPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-egress/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerEgressGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/measured-power-ingress/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelMeasuredPowerIngressGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/media-channel-connection-end-point-spec/media-channel/occupied-spectrum/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMediaChannelConnectionEndPointSpecMediaChannelOccupiedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MepMipList", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet", notes = "none", response = TapiOamMepMipList.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepMipList", response = TapiOamMepMipList.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMepMipList> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"mip\" : [ \"\", \"\" ],\n  \"mep\" : [ \"\", \"\" ]\n}", TapiOamMepMipList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MepRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet", notes = "none", response = TapiOamMepRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MepRef", response = TapiOamMepRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mep={meg-uuid},{mep-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMepRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMepmegUuidmepLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("meg-uuid") String megUuid,@ApiParam(value = "Id of mep",required=true) @PathVariable("mep-local-id") String mepLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMepRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.oam.MipRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet", notes = "none", response = TapiOamMipRef.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.oam.MipRef", response = TapiOamMipRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/mep-mip-list/mip={meg-uuid},{mip-local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOamMipRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidMepMipListMipmegUuidmipLocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("meg-uuid") String megUuid,@ApiParam(value = "Id of mip",required=true) @PathVariable("mip-local-id") String mipLocalId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiOamMipRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecGet", notes = "none", response = TapiOduOduConnectionEndPointSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduConnectionEndPointSpec", response = TapiOduOduConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"odu-term-and-adapter\" : {\n    \"accepted-payload-type\" : {\n      \"hex-payload-type\" : 0,\n      \"named-payload-type\" : \"UNKNOWN\"\n    },\n    \"opu-tributary-slot-size\" : \"1G25\",\n    \"auto-payload-type\" : false,\n    \"configured-mapping-type\" : \"AMP\",\n    \"configured-client-type\" : \"configured-client-type\"\n  },\n  \"odu-protection\" : {\n    \"aps-level\" : 5,\n    \"aps-enable\" : true\n  },\n  \"odu-common\" : {\n    \"odu-rate\" : 0,\n    \"odu-rate-tolerance\" : 6,\n    \"odu-type\" : \"odu-type\"\n  },\n  \"odu-ctp\" : {\n    \"accepted-msi\" : \"accepted-msi\",\n    \"tributary-port-number\" : 1,\n    \"tributary-slot-list\" : [ 5, 5 ]\n  }\n}", TapiOduOduConnectionEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduCommonPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduCommonGet", notes = "none", response = TapiOduOduCommonPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduCommonPac", response = TapiOduOduCommonPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/odu-common/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduCommonPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduCommonGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"odu-rate\" : 0,\n  \"odu-rate-tolerance\" : 6,\n  \"odu-type\" : \"odu-type\"\n}", TapiOduOduCommonPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduCtpPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduCtpGet", notes = "none", response = TapiOduOduCtpPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduCtpPac", response = TapiOduOduCtpPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/odu-ctp/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduCtpPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduCtpGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"accepted-msi\" : \"accepted-msi\",\n  \"tributary-port-number\" : 1,\n  \"tributary-slot-list\" : [ 5, 5 ]\n}", TapiOduOduCtpPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduProtectionPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduProtectionGet", notes = "none", response = TapiOduOduProtectionPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduProtectionPac", response = TapiOduOduProtectionPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/odu-protection/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduProtectionPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduProtectionGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"aps-level\" : 5,\n  \"aps-enable\" : true\n}", TapiOduOduProtectionPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduPayloadType", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduTermAndAdapterAcceptedPayloadTypeGet", notes = "This attribute is applicable when the ODU CTP object instance represents a lower order ODU CTP Sink at the client layer of the ODUP/ODU[i]j or ODUP/ODUj-21 adaptation function.                   This attribute is a 2-digit Hex code that indicates the new accepted payload type.                  Valid values are defined in Table 15-8 of ITU-T Recommendation G.709 with one additional value UN_INTERPRETABLE.", response = TapiOduOduPayloadType.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduPayloadType", response = TapiOduOduPayloadType.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/odu-term-and-adapter/accepted-payload-type/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduPayloadType> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduTermAndAdapterAcceptedPayloadTypeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"hex-payload-type\" : 0,\n  \"named-payload-type\" : \"UNKNOWN\"\n}", TapiOduOduPayloadType.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduTerminationAndClientAdaptationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduTermAndAdapterGet", notes = "none", response = TapiOduOduTerminationAndClientAdaptationPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduTerminationAndClientAdaptationPac", response = TapiOduOduTerminationAndClientAdaptationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/odu-connection-end-point-spec/odu-term-and-adapter/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduTerminationAndClientAdaptationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOduConnectionEndPointSpecOduTermAndAdapterGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"accepted-payload-type\" : {\n    \"hex-payload-type\" : 0,\n    \"named-payload-type\" : \"UNKNOWN\"\n  },\n  \"opu-tributary-slot-size\" : \"1G25\",\n  \"auto-payload-type\" : false,\n  \"configured-mapping-type\" : \"AMP\",\n  \"configured-client-type\" : \"configured-client-type\"\n}", TapiOduOduTerminationAndClientAdaptationPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet", notes = "none", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiAssemblyConnectionEndPointSpec", response = TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"otsi-adapter\" : {\n    \"number-of-otsi\" : 7,\n    \"fec-parameters\" : {\n      \"uncorrectable-bytes\" : 2,\n      \"corrected-bits\" : 0,\n      \"pre-fec-ber\" : 5,\n      \"uncorrectable-bits\" : 5,\n      \"corrected-bytes\" : 6,\n      \"post-fec-ber\" : 1\n    }\n  }\n}", TapiPhotonicMediaOtsiAssemblyConnectionEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FecProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterFecParametersGet", notes = "none", response = TapiPhotonicMediaFecProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FecProperties", response = TapiPhotonicMediaFecProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/otsi-adapter/fec-parameters/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFecProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterFecParametersGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"uncorrectable-bytes\" : 2,\n  \"corrected-bits\" : 0,\n  \"pre-fec-ber\" : 5,\n  \"uncorrectable-bits\" : 5,\n  \"corrected-bytes\" : 6,\n  \"post-fec-ber\" : 1\n}", TapiPhotonicMediaFecProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiServerAdaptationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet", notes = "none", response = TapiPhotonicMediaOtsiServerAdaptationPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiServerAdaptationPac", response = TapiPhotonicMediaOtsiServerAdaptationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-assembly-connection-end-point-spec/otsi-adapter/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiServerAdaptationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiAssemblyConnectionEndPointSpecOtsiAdapterGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"number-of-otsi\" : 7,\n  \"fec-parameters\" : {\n    \"uncorrectable-bytes\" : 2,\n    \"corrected-bits\" : 0,\n    \"pre-fec-ber\" : 5,\n    \"uncorrectable-bits\" : 5,\n    \"corrected-bytes\" : 6,\n    \"post-fec-ber\" : 1\n  }\n}", TapiPhotonicMediaOtsiServerAdaptationPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiConnectionEndPointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet", notes = "Augments the base LayerProtocol information in ConnectionEndPoint with OCH-specific information", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiConnectionEndPointSpec", response = TapiPhotonicMediaOtsiConnectionEndPointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiConnectionEndPointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"otsi-termination\" : {\n    \"selected-application-identifier\" : {\n      \"application-identifier-type\" : \"PROPRIETARY\",\n      \"application-code\" : \"application-code\"\n    },\n    \"received-power\" : {\n      \"power-spectral-density\" : \"power-spectral-density\",\n      \"total-power\" : \"total-power\"\n    },\n    \"selected-central-frequency\" : {\n      \"central-frequency\" : 0,\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      }\n    },\n    \"selected-modulation\" : \"RZ\",\n    \"laser-properties\" : {\n      \"laser-application-type\" : \"PUMP\",\n      \"laser-status\" : \"ON\",\n      \"laser-bias-current\" : \"laser-bias-current\",\n      \"laser-temperature\" : \"laser-temperature\"\n    },\n    \"selected-spectrum\" : {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    }\n  }\n}", TapiPhotonicMediaOtsiConnectionEndPointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.OtsiTerminationPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet", notes = "none", response = TapiPhotonicMediaOtsiTerminationPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.OtsiTerminationPac", response = TapiPhotonicMediaOtsiTerminationPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaOtsiTerminationPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"selected-application-identifier\" : {\n    \"application-identifier-type\" : \"PROPRIETARY\",\n    \"application-code\" : \"application-code\"\n  },\n  \"received-power\" : {\n    \"power-spectral-density\" : \"power-spectral-density\",\n    \"total-power\" : \"total-power\"\n  },\n  \"selected-central-frequency\" : {\n    \"central-frequency\" : 0,\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    }\n  },\n  \"selected-modulation\" : \"RZ\",\n  \"laser-properties\" : {\n    \"laser-application-type\" : \"PUMP\",\n    \"laser-status\" : \"ON\",\n    \"laser-bias-current\" : \"laser-bias-current\",\n    \"laser-temperature\" : \"laser-temperature\"\n  },\n  \"selected-spectrum\" : {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  }\n}", TapiPhotonicMediaOtsiTerminationPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.LaserProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet", notes = "Laser properties.", response = TapiPhotonicMediaLaserProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.LaserProperties", response = TapiPhotonicMediaLaserProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/laser-properties/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaLaserProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationLaserPropertiesGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"laser-application-type\" : \"PUMP\",\n  \"laser-status\" : \"ON\",\n  \"laser-bias-current\" : \"laser-bias-current\",\n  \"laser-temperature\" : \"laser-temperature\"\n}", TapiPhotonicMediaLaserProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet", notes = "none", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/received-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationReceivedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.ApplicationIdentifier", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet", notes = "This attribute indicates the selected Application Identifier that is used by the OCh trail termination function. The syntax of ApplicationIdentifier is a pair {ApplicationIdentifierType, PrintableString}. The value of ApplicationIdentifierType is either STANDARD or PROPRIETARY. The value of PrintableString represents the standard application code as defined in the ITU-T Recommendations or a vendor-specific proprietary code. If the ApplicationIdentifierType is STANDARD the value of PrintableString represents a standard application code as defined in the ITU-T Recommendations. If the ApplicationIdentifierType is PROPRIETARY, the first six characters of the PrintableString must contain the Hexadecimal representation of an OUI assigned to the vendor whose implementation generated the Application Identifier; the remaining octets of the PrintableString are unspecified. The value of this attribute of an object instance has to be one of the values identified in the attribute SupportableApplicationIdentifierList of the same object instance. The values and value ranges of the optical interface parameters of a standard application code must be consistent with those values specified in the ITU-T Recommendation for that application code.", response = TapiPhotonicMediaApplicationIdentifier.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.ApplicationIdentifier", response = TapiPhotonicMediaApplicationIdentifier.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-application-identifier/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaApplicationIdentifier> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedApplicationIdentifierGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"application-identifier-type\" : \"PROPRIETARY\",\n  \"application-code\" : \"application-code\"\n}", TapiPhotonicMediaApplicationIdentifier.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.CentralFrequency", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet", notes = "none", response = TapiPhotonicMediaCentralFrequency.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.CentralFrequency", response = TapiPhotonicMediaCentralFrequency.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-central-frequency/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaCentralFrequency> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedCentralFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"central-frequency\" : 0,\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  }\n}", TapiPhotonicMediaCentralFrequency.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/selected-spectrum/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationSelectedSpectrumGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.PowerProperties", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet", notes = "Measured power at the Transmitter.", response = TapiPhotonicMediaPowerProperties.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.PowerProperties", response = TapiPhotonicMediaPowerProperties.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/otsi-connection-end-point-spec/otsi-termination/transmited-power/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaPowerProperties> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidOtsiConnectionEndPointSpecOtsiTerminationTransmitedPowerGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"power-spectral-density\" : \"power-spectral-density\",\n  \"total-power\" : \"total-power\"\n}", TapiPhotonicMediaPowerProperties.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/connection-end-point={connection-end-point-uuid}/parent-node-edge-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListConnectionEndPointconnectionEndPointUuidParentNodeEdgePointGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of connection-end-point",required=true) @PathVariable("connection-end-point-uuid") String connectionEndPointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.connectivity.context.topologycontext.topology.node.nodeedgepoint.CepList", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListGet", notes = "none", response = TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.connectivity.context.topologycontext.topology.node.nodeedgepoint.CepList", response = TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/cep-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidCepListGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiConnectivityContextTopologycontextTopologyNodeNodeedgepointCepList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.node.NodeEdgePoint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeNodeEdgePoint.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.node.NodeEdgePoint", response = TapiTopologyNodeNodeEdgePoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeNodeEdgePoint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeNodeEdgePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet", notes = "NodeEdgePoint mapped to more than ServiceInterfacePoint (slicing/virtualizing) or a ServiceInterfacePoint mapped to more than one NodeEdgePoint (load balancing/Resilience) should be considered experimental", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/mapped-service-interface-point={service-interface-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMappedServiceInterfacePointserviceInterfacePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of mapped-service-interface-point",required=true) @PathVariable("service-interface-point-uuid") String serviceInterfacePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelNodeEdgePointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecGet", notes = "Augments the base LayerProtocol information in NodeEdgePoint with OCH-specific information", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelNodeEdgePointSpec", response = TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelNodeEdgePointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"mc-pool\" : {\n    \"supportable-spectrum\" : [ null, null ],\n    \"available-spectrum\" : [ {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    }, {\n      \"frequency-constraint\" : {\n        \"grid-type\" : \"DWDM\",\n        \"adjustment-granularity\" : \"G_100GHZ\"\n      },\n      \"lower-frequency\" : 0,\n      \"upper-frequency\" : 6\n    } ],\n    \"occupied-spectrum\" : [ null, null ]\n  }\n}", TapiPhotonicMediaMediaChannelNodeEdgePointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/available-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolAvailableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of available-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.MediaChannelPoolCapabilityPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet", notes = "none", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.MediaChannelPoolCapabilityPac", response = TapiPhotonicMediaMediaChannelPoolCapabilityPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaMediaChannelPoolCapabilityPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"supportable-spectrum\" : [ null, null ],\n  \"available-spectrum\" : [ {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  }, {\n    \"frequency-constraint\" : {\n      \"grid-type\" : \"DWDM\",\n      \"adjustment-granularity\" : \"G_100GHZ\"\n    },\n    \"lower-frequency\" : 0,\n    \"upper-frequency\" : 6\n  } ],\n  \"occupied-spectrum\" : [ null, null ]\n}", TapiPhotonicMediaMediaChannelPoolCapabilityPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/occupied-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolOccupiedSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of occupied-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.FrequencyConstraint", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet", notes = "none", response = TapiPhotonicMediaFrequencyConstraint.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.FrequencyConstraint", response = TapiPhotonicMediaFrequencyConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/frequency-constraint/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaFrequencyConstraint> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyFrequencyConstraintGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"grid-type\" : \"DWDM\",\n  \"adjustment-granularity\" : \"G_100GHZ\"\n}", TapiPhotonicMediaFrequencyConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.photonic.media.SpectrumBand", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet", notes = "none", response = TapiPhotonicMediaSpectrumBand.class, tags={ "tapi-photonic-media", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.photonic.media.SpectrumBand", response = TapiPhotonicMediaSpectrumBand.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/media-channel-node-edge-point-spec/mc-pool/supportable-spectrum={upper-frequency},{lower-frequency}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiPhotonicMediaSpectrumBand> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidMediaChannelNodeEdgePointSpecMcPoolSupportableSpectrumupperFrequencylowerFrequencyGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("upper-frequency") Integer upperFrequency,@ApiParam(value = "Id of supportable-spectrum",required=true) @PathVariable("lower-frequency") Integer lowerFrequency) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"frequency-constraint\" : {\n    \"grid-type\" : \"DWDM\",\n    \"adjustment-granularity\" : \"G_100GHZ\"\n  },\n  \"lower-frequency\" : 0,\n  \"upper-frequency\" : 6\n}", TapiPhotonicMediaSpectrumBand.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduNodeEdgePointSpec", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidOduNodeEdgePointSpecGet", notes = "Augments the base LayerProtocol information in NodeEdgePoint with ODU-specific information", response = TapiOduOduNodeEdgePointSpec.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduNodeEdgePointSpec", response = TapiOduOduNodeEdgePointSpec.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/odu-node-edge-point-spec/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduNodeEdgePointSpec> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidOduNodeEdgePointSpecGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"odu-pool\" : {\n    \"max-client-size\" : 1,\n    \"max-client-instances\" : 6,\n    \"client-capacity\" : 0\n  }\n}", TapiOduOduNodeEdgePointSpec.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.odu.OduPoolPac", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidOduNodeEdgePointSpecOduPoolGet", notes = "none", response = TapiOduOduPoolPac.class, tags={ "tapi-odu", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.odu.OduPoolPac", response = TapiOduOduPoolPac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/odu-node-edge-point-spec/odu-pool/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiOduOduPoolPac> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidOduNodeEdgePointSpecOduPoolGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"max-client-size\" : 1,\n  \"max-client-instances\" : 6,\n  \"client-capacity\" : 0\n}", TapiOduOduPoolPac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.AccessPortRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidSupportingAccessPortAccessPortGet", notes = "none", response = TapiEquipmentAccessPortRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.AccessPortRef", response = TapiEquipmentAccessPortRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/supporting-access-port/access-port/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentAccessPortRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidSupportingAccessPortAccessPortGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiEquipmentAccessPortRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.SupportingAccessPort", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidSupportingAccessPortGet", notes = "none", response = TapiEquipmentSupportingAccessPort.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.SupportingAccessPort", response = TapiEquipmentSupportingAccessPort.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/supporting-access-port/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentSupportingAccessPort> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidSupportingAccessPortGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"access-port\" : \"\"\n}", TapiEquipmentSupportingAccessPort.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-edge-point={node-edge-point-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeEdgePointnodeEdgePointUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/composed-rule-group={topology-uuid},{composed-rule-group-node-uuid},{composed-rule-group-node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeRuleGroupRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidComposedRuleGrouptopologyUuidcomposedRuleGroupNodeUuidcomposedRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-uuid") String composedRuleGroupNodeUuid,@ApiParam(value = "Id of composed-rule-group",required=true) @PathVariable("composed-rule-group-node-rule-group-uuid") String composedRuleGroupNodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeRuleGroupRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroup", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroup.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroup", response = TapiTopologyNodeRuleGroup.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeRuleGroup> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeRuleGroup.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeRuleGroupRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet", notes = "none", response = TapiTopologyNodeRuleGroupRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeRuleGroupRef", response = TapiTopologyNodeRuleGroupRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/associated-node-rule-group={topology-uuid},{associated-node-rule-group-node-uuid},{associated-node-rule-group-node-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeRuleGroupRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAssociatedNodeRuleGrouptopologyUuidassociatedNodeRuleGroupNodeUuidassociatedNodeRuleGroupNodeRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-uuid") String associatedNodeRuleGroupNodeUuid,@ApiParam(value = "Id of associated-node-rule-group",required=true) @PathVariable("associated-node-rule-group-node-rule-group-uuid") String associatedNodeRuleGroupNodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeRuleGroupRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet", notes = "Capacity available to be assigned.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/available-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidAvailableCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidCostCharacteristiccostNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.InterRuleGroup", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet", notes = "none", response = TapiTopologyInterRuleGroup.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.InterRuleGroup", response = TapiTopologyInterRuleGroup.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyInterRuleGroup> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyInterRuleGroup.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet", notes = "none", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRule> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyRule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/inter-rule-group={inter-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidInterRuleGroupinterRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of inter-rule-group",required=true) @PathVariable("inter-rule-group-uuid") String interRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.NodeEdgePointRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet", notes = "none", response = TapiTopologyNodeEdgePointRef.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.NodeEdgePointRef", response = TapiTopologyNodeEdgePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/node-edge-point={topology-uuid},{node-edge-point-node-uuid},{node-edge-point-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyNodeEdgePointRef> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidNodeEdgePointtopologyUuidnodeEdgePointNodeUuidnodeEdgePointUuidGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("topology-uuid") String topologyUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-node-uuid") String nodeEdgePointNodeUuid,@ApiParam(value = "Id of node-edge-point",required=true) @PathVariable("node-edge-point-uuid") String nodeEdgePointUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyNodeEdgePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.RiskCharacteristic", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet", notes = "A list of risk characteristics for consideration in an analysis of shared risk. Each element of the list represents a specific risk consideration.", response = TapiTopologyRiskCharacteristic.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.RiskCharacteristic", response = TapiTopologyRiskCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/risk-characteristic={risk-characteristic-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRiskCharacteristic> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRiskCharacteristicriskCharacteristicNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of risk-characteristic",required=true) @PathVariable("risk-characteristic-name") String riskCharacteristicName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"risk-characteristic-name\" : \"risk-characteristic-name\",\n  \"risk-identifier-list\" : [ \"risk-identifier-list\", \"risk-identifier-list\" ]\n}", TapiTopologyRiskCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.Rule", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet", notes = "none", response = TapiTopologyRule.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.Rule", response = TapiTopologyRule.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyRule> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiTopologyRule.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/rule={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidRulelocalIdNamevalueNameGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid,@ApiParam(value = "Id of rule",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/node-rule-group={node-rule-group-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidNodeRuleGroupnodeRuleGroupUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid,@ApiParam(value = "Id of node-rule-group",required=true) @PathVariable("node-rule-group-uuid") String nodeRuleGroupUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.SupportingPhysicalSpan", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidSupportingPhysicalSpanGet", notes = "none", response = TapiEquipmentSupportingPhysicalSpan.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.SupportingPhysicalSpan", response = TapiEquipmentSupportingPhysicalSpan.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/supporting-physical-span/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentSupportingPhysicalSpan> dataContextTopologyContextTopologyuuidNodenodeUuidSupportingPhysicalSpanGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"physical-span\" : {\n    \"physical-span-uuid\" : \"physical-span-uuid\"\n  }\n}", TapiEquipmentSupportingPhysicalSpan.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.equipment.PhysicalSpanRef", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidSupportingPhysicalSpanPhysicalSpanGet", notes = "none", response = TapiEquipmentPhysicalSpanRef.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.equipment.PhysicalSpanRef", response = TapiEquipmentPhysicalSpanRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/supporting-physical-span/physical-span/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiEquipmentPhysicalSpanRef> dataContextTopologyContextTopologyuuidNodenodeUuidSupportingPhysicalSpanPhysicalSpanGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"physical-span-uuid\" : \"physical-span-uuid\"\n}", TapiEquipmentPhysicalSpanRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet", notes = "An optimistic view of the capacity of the TopologicalEntity assuming that any shared capacity is available to be taken.", response = TapiCommonCapacity.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/topology-context/topology={uuid}/node={node-uuid}/total-potential-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextTopologyContextTopologyuuidNodenodeUuidTotalPotentialCapacityTotalSizeGet(@ApiParam(value = "Id of topology",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of node",required=true) @PathVariable("node-uuid") String nodeUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextDelete", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextDelete() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextGet", notes = "Augments the base TAPI Context with VirtualNetworkService information", response = TapiVirtualNetworkVirtualNetworkContext.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkContext", response = TapiVirtualNetworkVirtualNetworkContext.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiVirtualNetworkVirtualNetworkContext> dataContextVirtualNetworkContextGet() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"virtual-nw-service\" : [ \"\", \"\" ]\n}", TapiVirtualNetworkVirtualNetworkContext.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextPost", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextPost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkContext", nickname = "dataContextVirtualNetworkContextPut", notes = "Augments the base TAPI Context with VirtualNetworkService information", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextPut(@ApiParam(value = "tapi.virtual.network.VirtualNetworkContext to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkContext body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServicePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServicePost(@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkServiceEndPoint", response = TapiVirtualNetworkVirtualNetworkServiceEndPoint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiVirtualNetworkVirtualNetworkServiceEndPoint> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiVirtualNetworkVirtualNetworkServiceEndPoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkServiceEndPoint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.virtual.network.VirtualNetworkServiceEndPoint to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkServiceEndPoint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/end-point={local-id}/service-interface-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidEndPointlocalIdServiceInterfacePointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of end-point",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkService.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkService", response = TapiVirtualNetworkVirtualNetworkService.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiVirtualNetworkVirtualNetworkService> dataContextVirtualNetworkContextVirtualNwServiceuuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiVirtualNetworkVirtualNetworkService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkService", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkService to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkService body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleGet", notes = "none", response = TapiCommonTimeRange.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.TimeRange", response = TapiCommonTimeRange.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonTimeRange> dataContextVirtualNetworkContextVirtualNwServiceuuidScheduleGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"start-time\" : \"start-time\",\n  \"end-time\" : \"end-time\"\n}", TapiCommonTimeRange.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added to list"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.TimeRange", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/schedule/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidSchedulePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.TimeRange to be added or updated"  )  @Valid @RequestBody TapiCommonTimeRange body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStateDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet", notes = "none", response = TapiCommonAdminStatePac.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.AdminStatePac", response = TapiCommonAdminStatePac.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonAdminStatePac> dataContextVirtualNetworkContextVirtualNwServiceuuidStateGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"operational-state\" : \"DISABLED\",\n  \"administrative-state\" : \"LOCKED\",\n  \"lifecycle-state\" : \"PLANNED\"\n}", TapiCommonAdminStatePac.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStatePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.AdminStatePac to be added to list"  )  @Valid @RequestBody TapiCommonAdminStatePac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.AdminStatePac", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/state/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidStatePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.common.AdminStatePac to be added or updated"  )  @Valid @RequestBody TapiCommonAdminStatePac body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.TopologyRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet", notes = "none", response = TapiTopologyTopologyRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.TopologyRef", response = TapiTopologyTopologyRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/topology/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyTopologyRef> dataContextVirtualNetworkContextVirtualNwServiceuuidTopologyGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"topology-uuid\" : \"topology-uuid\"\n}", TapiTopologyTopologyRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added to list"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.topology.CostCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", response = TapiTopologyCostCharacteristic.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.CostCharacteristic", response = TapiTopologyCostCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyCostCharacteristic> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"cost-value\" : \"cost-value\",\n  \"cost-algorithm\" : \"cost-algorithm\",\n  \"cost-name\" : \"cost-name\"\n}", TapiTopologyCostCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.CostCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut", notes = "The list of costs where each cost relates to some aspect of the TopologicalEntity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/cost-characteristic={cost-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdCostCharacteristiccostNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of cost-characteristic",required=true) @PathVariable("cost-name") String costName,@ApiParam(value = "tapi.topology.CostCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyCostCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNwServiceRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet", notes = "none", response = TapiVirtualNetworkVirtualNwServiceRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNwServiceRef", response = TapiVirtualNetworkVirtualNwServiceRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/diversity-exclusion={virtual-nw-service-uuid}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiVirtualNetworkVirtualNwServiceRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdDiversityExclusionvirtualNwServiceUuidGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of diversity-exclusion",required=true) @PathVariable("virtual-nw-service-uuid") String virtualNwServiceUuid) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"virtual-nw-service-uuid\" : \"virtual-nw-service-uuid\"\n}", TapiVirtualNetworkVirtualNwServiceRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet", notes = "none", response = TapiVirtualNetworkVirtualNetworkConstraint.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.virtual.network.VirtualNetworkConstraint", response = TapiVirtualNetworkVirtualNetworkConstraint.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiVirtualNetworkVirtualNetworkConstraint> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("\"\"", TapiVirtualNetworkVirtualNetworkConstraint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristicPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added to list"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", response = TapiTopologyLatencyCharacteristic.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.topology.LatencyCharacteristic", response = TapiTopologyLatencyCharacteristic.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiTopologyLatencyCharacteristic> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"traffic-property-name\" : \"traffic-property-name\",\n  \"fixed-latency-characteristic\" : \"fixed-latency-characteristic\",\n  \"wander-characteristic\" : \"wander-characteristic\",\n  \"jitter-characteristic\" : \"jitter-characteristic\",\n  \"queing-latency-characteristic\" : \"queing-latency-characteristic\"\n}", TapiTopologyLatencyCharacteristic.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.topology.LatencyCharacteristic", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut", notes = "The effect on the latency of a queuing process. This only has significant effect for packet based systems and has a complex characteristic.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/latency-characteristic={traffic-property-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdLatencyCharacteristictrafficPropertyNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of latency-characteristic",required=true) @PathVariable("traffic-property-name") String trafficPropertyName,@ApiParam(value = "tapi.topology.LatencyCharacteristic to be added or updated"  )  @Valid @RequestBody TapiTopologyLatencyCharacteristic body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.NameAndValue to be added to list"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", response = TapiCommonNameAndValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.NameAndValue", response = TapiCommonNameAndValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonNameAndValue> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNameGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"value-name\" : \"value-name\",\n  \"value\" : \"value\"\n}", TapiCommonNameAndValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.NameAndValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut", notes = "List of names. This value is unique in some namespace but may change during the life of the entity.                  A name carries no semantics with respect to the purpose of the entity.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/name={value-name}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdNamevalueNamePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "Id of name",required=true) @PathVariable("value-name") String valueName,@ApiParam(value = "tapi.common.NameAndValue to be added or updated"  )  @Valid @RequestBody TapiCommonNameAndValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.virtual.network.VirtualNetworkConstraint", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.virtual.network.VirtualNetworkConstraint to be added or updated"  )  @Valid @RequestBody TapiVirtualNetworkVirtualNetworkConstraint body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet", notes = "none", response = TapiCommonCapacity.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.Capacity", response = TapiCommonCapacity.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacity> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"total-size\" : {\n    \"unit\" : \"TB\",\n    \"value\" : 0\n  }\n}", TapiCommonCapacity.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added to list"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.Capacity", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut", notes = "none", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityPut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.Capacity to be added or updated"  )  @Valid @RequestBody TapiCommonCapacity body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "removes tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Object deleted"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeDelete(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", response = TapiCommonCapacityValue.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.CapacityValue", response = TapiCommonCapacityValue.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonCapacityValue> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizeGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"unit\" : \"TB\",\n  \"value\" : 0\n}", TapiCommonCapacityValue.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 400, message = "Internal error"),
        @ApiResponse(code = 409, message = "Object already exists") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePost(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added to list"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "creates or updates tapi.common.CapacityValue", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut", notes = "Total capacity of the TopologicalEntity in MB/s. In case of bandwidthProfile, this is expected to same as the committedInformationRate.", tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Object created"),
        @ApiResponse(code = 204, message = "Object modified"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/requested-capacity/total-size/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdRequestedCapacityTotalSizePut(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId,@ApiParam(value = "tapi.common.CapacityValue to be added or updated"  )  @Valid @RequestBody TapiCommonCapacityValue body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/sink-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSinkServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "returns tapi.common.ServiceInterfacePointRef", nickname = "dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet", notes = "none", response = TapiCommonServiceInterfacePointRef.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "tapi.common.ServiceInterfacePointRef", response = TapiCommonServiceInterfacePointRef.class),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/data/context/virtual-network-context/virtual-nw-service={uuid}/vnw-constraint={local-id}/src-service-end-point/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<TapiCommonServiceInterfacePointRef> dataContextVirtualNetworkContextVirtualNwServiceuuidVnwConstraintlocalIdSrcServiceEndPointGet(@ApiParam(value = "Id of virtual-nw-service",required=true) @PathVariable("uuid") String uuid,@ApiParam(value = "Id of vnw-constraint",required=true) @PathVariable("local-id") String localId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"service-interface-point-uuid\" : \"service-interface-point-uuid\"\n}", TapiCommonServiceInterfacePointRef.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default DataApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
