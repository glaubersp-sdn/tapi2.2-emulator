/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.TapiCommonGetServiceInterfacePointDetails;
import io.swagger.model.TapiCommonGetServiceInterfacePointList;
import io.swagger.model.TapiConnectivityCreateConnectivityService;
import io.swagger.model.TapiConnectivityGetConnectionDetails;
import io.swagger.model.TapiConnectivityGetConnectionEndPointDetails;
import io.swagger.model.TapiConnectivityGetConnectivityServiceDetails;
import io.swagger.model.TapiConnectivityGetConnectivityServiceList;
import io.swagger.model.TapiConnectivityUpdateConnectivityService;
import io.swagger.model.TapiEquipmentGetDevice;
import io.swagger.model.TapiEquipmentGetDeviceList;
import io.swagger.model.TapiEquipmentGetPhysicalSpan;
import io.swagger.model.TapiEquipmentGetPhysicalSpanList;
import io.swagger.model.TapiNotificationCreateNotificationSubscriptionService;
import io.swagger.model.TapiNotificationGetNotificationList;
import io.swagger.model.TapiNotificationGetNotificationSubscriptionServiceDetails;
import io.swagger.model.TapiNotificationGetNotificationSubscriptionServiceList;
import io.swagger.model.TapiNotificationGetSupportedNotificationTypes;
import io.swagger.model.TapiNotificationUpdateNotificationSubscriptionService;
import io.swagger.model.TapiOamCreateOamJob;
import io.swagger.model.TapiOamCreateOamProfile;
import io.swagger.model.TapiOamCreateOamService;
import io.swagger.model.TapiOamCreateOamServicePoint;
import io.swagger.model.TapiOamGetMeg;
import io.swagger.model.TapiOamGetOamJob;
import io.swagger.model.TapiOamGetOamJobList;
import io.swagger.model.TapiOamGetOamProfile;
import io.swagger.model.TapiOamGetOamProfileList;
import io.swagger.model.TapiOamGetOamService;
import io.swagger.model.TapiOamGetOamServiceList;
import io.swagger.model.TapiOamGetOamServicePoint;
import io.swagger.model.TapiOamUpdateOamJob;
import io.swagger.model.TapiOamUpdateOamProfile;
import io.swagger.model.TapiOamUpdateOamService;
import io.swagger.model.TapiOamUpdateOamServicePoint;
import io.swagger.model.TapiPathComputationComputeP2PPath;
import io.swagger.model.TapiPathComputationDeleteP2PPath;
import io.swagger.model.TapiPathComputationOptimizeP2PPath;
import io.swagger.model.TapiTopologyGetLinkDetails;
import io.swagger.model.TapiTopologyGetNodeDetails;
import io.swagger.model.TapiTopologyGetNodeEdgePointDetails;
import io.swagger.model.TapiTopologyGetTopologyDetails;
import io.swagger.model.TapiTopologyGetTopologyList;
import io.swagger.model.TapiVirtualNetworkCreateVirtualNetworkService;
import io.swagger.model.TapiVirtualNetworkDeleteVirtualNetworkService;
import io.swagger.model.TapiVirtualNetworkGetVirtualNetworkServiceDetails;
import io.swagger.model.TapiVirtualNetworkGetVirtualNetworkServiceList;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.annotations.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-09-07T12:33:48.081-03:00[America/Sao_Paulo]")
@Api(value = "operations", description = "the operations API")
public interface OperationsApi {

    Logger log = LoggerFactory.getLogger(OperationsApi.class);

    default Optional<ObjectMapper> getObjectMapper() {
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest() {
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @ApiOperation(value = "operates on tapi.path.computation.ComputeP2PPath", nickname = "operationsComputeP2PPathPost", notes = "operates on tapi.path.computation.ComputeP2PPath", response = TapiPathComputationComputeP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationComputeP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/compute-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiPathComputationComputeP2PPath> operationsComputeP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiPathComputationComputeP2PPath.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.CreateConnectivityService", nickname = "operationsCreateConnectivityServicePost", notes = "operates on tapi.connectivity.CreateConnectivityService", response = TapiConnectivityCreateConnectivityService.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityCreateConnectivityService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-connectivity-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityCreateConnectivityService> operationsCreateConnectivityServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiConnectivityCreateConnectivityService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.notification.CreateNotificationSubscriptionService", nickname = "operationsCreateNotificationSubscriptionServicePost", notes = "operates on tapi.notification.CreateNotificationSubscriptionService", response = TapiNotificationCreateNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationCreateNotificationSubscriptionService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-notification-subscription-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationCreateNotificationSubscriptionService> operationsCreateNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"subscription-service\" : \"\"\n  }\n}", TapiNotificationCreateNotificationSubscriptionService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.CreateOamJob", nickname = "operationsCreateOamJobPost", notes = "operates on tapi.oam.CreateOamJob", response = TapiOamCreateOamJob.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamCreateOamJob.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-oam-job/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamCreateOamJob> operationsCreateOamJobPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-job\" : \"\"\n  }\n}", TapiOamCreateOamJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.CreateOamProfile", nickname = "operationsCreateOamProfilePost", notes = "operates on tapi.oam.CreateOamProfile", response = TapiOamCreateOamProfile.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamCreateOamProfile.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-oam-profile/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamCreateOamProfile> operationsCreateOamProfilePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-profile\" : \"\"\n  }\n}", TapiOamCreateOamProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.CreateOamServicePoint", nickname = "operationsCreateOamServicePointPost", notes = "operates on tapi.oam.CreateOamServicePoint", response = TapiOamCreateOamServicePoint.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamCreateOamServicePoint.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-oam-service-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamCreateOamServicePoint> operationsCreateOamServicePointPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service-point\" : \"\"\n  }\n}", TapiOamCreateOamServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.CreateOamService", nickname = "operationsCreateOamServicePost", notes = "operates on tapi.oam.CreateOamService", response = TapiOamCreateOamService.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamCreateOamService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-oam-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamCreateOamService> operationsCreateOamServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service\" : \"\"\n  }\n}", TapiOamCreateOamService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.virtual.network.CreateVirtualNetworkService", nickname = "operationsCreateVirtualNetworkServicePost", notes = "operates on tapi.virtual.network.CreateVirtualNetworkService", response = TapiVirtualNetworkCreateVirtualNetworkService.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiVirtualNetworkCreateVirtualNetworkService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/create-virtual-network-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiVirtualNetworkCreateVirtualNetworkService> operationsCreateVirtualNetworkServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiVirtualNetworkCreateVirtualNetworkService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.DeleteConnectivityService", nickname = "operationsDeleteConnectivityServicePost", notes = "operates on tapi.connectivity.DeleteConnectivityService", tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-connectivity-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteConnectivityServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.notification.DeleteNotificationSubscriptionService", nickname = "operationsDeleteNotificationSubscriptionServicePost", notes = "operates on tapi.notification.DeleteNotificationSubscriptionService", tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-notification-subscription-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.DeleteOamJob", nickname = "operationsDeleteOamJobPost", notes = "operates on tapi.oam.DeleteOamJob", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-oam-job/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteOamJobPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.DeleteOamProfile", nickname = "operationsDeleteOamProfilePost", notes = "operates on tapi.oam.DeleteOamProfile", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-oam-profile/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteOamProfilePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.DeleteOamServicePoint", nickname = "operationsDeleteOamServicePointPost", notes = "operates on tapi.oam.DeleteOamServicePoint", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-oam-service-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteOamServicePointPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.DeleteOamService", nickname = "operationsDeleteOamServicePost", notes = "operates on tapi.oam.DeleteOamService", tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-oam-service/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsDeleteOamServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.path.computation.DeleteP2PPath", nickname = "operationsDeleteP2PPathPost", notes = "operates on tapi.path.computation.DeleteP2PPath", response = TapiPathComputationDeleteP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationDeleteP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiPathComputationDeleteP2PPath> operationsDeleteP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiPathComputationDeleteP2PPath.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.virtual.network.DeleteVirtualNetworkService", nickname = "operationsDeleteVirtualNetworkServicePost", notes = "operates on tapi.virtual.network.DeleteVirtualNetworkService", response = TapiVirtualNetworkDeleteVirtualNetworkService.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiVirtualNetworkDeleteVirtualNetworkService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/delete-virtual-network-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiVirtualNetworkDeleteVirtualNetworkService> operationsDeleteVirtualNetworkServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiVirtualNetworkDeleteVirtualNetworkService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.GetConnectionDetails", nickname = "operationsGetConnectionDetailsPost", notes = "operates on tapi.connectivity.GetConnectionDetails", response = TapiConnectivityGetConnectionDetails.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityGetConnectionDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-connection-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityGetConnectionDetails> operationsGetConnectionDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"connection\" : \"\"\n  }\n}", TapiConnectivityGetConnectionDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.GetConnectionEndPointDetails", nickname = "operationsGetConnectionEndPointDetailsPost", notes = "operates on tapi.connectivity.GetConnectionEndPointDetails", response = TapiConnectivityGetConnectionEndPointDetails.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityGetConnectionEndPointDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-connection-end-point-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityGetConnectionEndPointDetails> operationsGetConnectionEndPointDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"connection-end-point\" : \"\"\n  }\n}", TapiConnectivityGetConnectionEndPointDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.GetConnectivityServiceDetails", nickname = "operationsGetConnectivityServiceDetailsPost", notes = "operates on tapi.connectivity.GetConnectivityServiceDetails", response = TapiConnectivityGetConnectivityServiceDetails.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityGetConnectivityServiceDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-connectivity-service-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityGetConnectivityServiceDetails> operationsGetConnectivityServiceDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiConnectivityGetConnectivityServiceDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetConnectivityServiceListPost", notes = "", response = TapiConnectivityGetConnectivityServiceList.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityGetConnectivityServiceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-connectivity-service-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityGetConnectivityServiceList> operationsGetConnectivityServiceListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : [ \"\", \"\" ]\n  }\n}", TapiConnectivityGetConnectivityServiceList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetDeviceListPost", notes = "", response = TapiEquipmentGetDeviceList.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiEquipmentGetDeviceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-device-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiEquipmentGetDeviceList> operationsGetDeviceListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"device\" : [ \"\", \"\" ]\n  }\n}", TapiEquipmentGetDeviceList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.equipment.GetDevice", nickname = "operationsGetDevicePost", notes = "operates on tapi.equipment.GetDevice", response = TapiEquipmentGetDevice.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiEquipmentGetDevice.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-device/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiEquipmentGetDevice> operationsGetDevicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"device\" : \"\"\n  }\n}", TapiEquipmentGetDevice.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.topology.GetLinkDetails", nickname = "operationsGetLinkDetailsPost", notes = "operates on tapi.topology.GetLinkDetails", response = TapiTopologyGetLinkDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetLinkDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-link-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiTopologyGetLinkDetails> operationsGetLinkDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"link\" : \"\"\n  }\n}", TapiTopologyGetLinkDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.GetMeg", nickname = "operationsGetMegPost", notes = "operates on tapi.oam.GetMeg", response = TapiOamGetMeg.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetMeg.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-meg/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetMeg> operationsGetMegPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"meg\" : \"\"\n  }\n}", TapiOamGetMeg.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.topology.GetNodeDetails", nickname = "operationsGetNodeDetailsPost", notes = "operates on tapi.topology.GetNodeDetails", response = TapiTopologyGetNodeDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetNodeDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-node-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiTopologyGetNodeDetails> operationsGetNodeDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"node\" : \"\"\n  }\n}", TapiTopologyGetNodeDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.topology.GetNodeEdgePointDetails", nickname = "operationsGetNodeEdgePointDetailsPost", notes = "operates on tapi.topology.GetNodeEdgePointDetails", response = TapiTopologyGetNodeEdgePointDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetNodeEdgePointDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-node-edge-point-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiTopologyGetNodeEdgePointDetails> operationsGetNodeEdgePointDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"node-edge-point\" : \"\"\n  }\n}", TapiTopologyGetNodeEdgePointDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.notification.GetNotificationList", nickname = "operationsGetNotificationListPost", notes = "operates on tapi.notification.GetNotificationList", response = TapiNotificationGetNotificationList.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-notification-list/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationGetNotificationList> operationsGetNotificationListPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"notification\" : [ \"\", \"\" ]\n  }\n}", TapiNotificationGetNotificationList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.notification.GetNotificationSubscriptionServiceDetails", nickname = "operationsGetNotificationSubscriptionServiceDetailsPost", notes = "operates on tapi.notification.GetNotificationSubscriptionServiceDetails", response = TapiNotificationGetNotificationSubscriptionServiceDetails.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationSubscriptionServiceDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-notification-subscription-service-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationGetNotificationSubscriptionServiceDetails> operationsGetNotificationSubscriptionServiceDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"subscription-service\" : \"\"\n  }\n}", TapiNotificationGetNotificationSubscriptionServiceDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetNotificationSubscriptionServiceListPost", notes = "", response = TapiNotificationGetNotificationSubscriptionServiceList.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetNotificationSubscriptionServiceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-notification-subscription-service-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationGetNotificationSubscriptionServiceList> operationsGetNotificationSubscriptionServiceListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"subscription-service\" : [ \"\", \"\" ]\n  }\n}", TapiNotificationGetNotificationSubscriptionServiceList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetOamJobListPost", notes = "", response = TapiOamGetOamJobList.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamJobList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-job-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamJobList> operationsGetOamJobListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-job\" : [ \"\", \"\" ]\n  }\n}", TapiOamGetOamJobList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.GetOamJob", nickname = "operationsGetOamJobPost", notes = "operates on tapi.oam.GetOamJob", response = TapiOamGetOamJob.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamJob.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-job/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamJob> operationsGetOamJobPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-job\" : \"\"\n  }\n}", TapiOamGetOamJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetOamProfileListPost", notes = "", response = TapiOamGetOamProfileList.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamProfileList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-profile-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamProfileList> operationsGetOamProfileListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-profile\" : [ \"\", \"\" ]\n  }\n}", TapiOamGetOamProfileList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.GetOamProfile", nickname = "operationsGetOamProfilePost", notes = "operates on tapi.oam.GetOamProfile", response = TapiOamGetOamProfile.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamProfile.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-profile/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamProfile> operationsGetOamProfilePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-profile\" : \"\"\n  }\n}", TapiOamGetOamProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetOamServiceListPost", notes = "", response = TapiOamGetOamServiceList.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamServiceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-service-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamServiceList> operationsGetOamServiceListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service\" : [ \"\", \"\" ]\n  }\n}", TapiOamGetOamServiceList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.GetOamServicePoint", nickname = "operationsGetOamServicePointPost", notes = "operates on tapi.oam.GetOamServicePoint", response = TapiOamGetOamServicePoint.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamServicePoint.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-service-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamServicePoint> operationsGetOamServicePointPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service-point\" : \"\"\n  }\n}", TapiOamGetOamServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.GetOamService", nickname = "operationsGetOamServicePost", notes = "operates on tapi.oam.GetOamService", response = TapiOamGetOamService.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamGetOamService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-oam-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamGetOamService> operationsGetOamServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service\" : \"\"\n  }\n}", TapiOamGetOamService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetPhysicalSpanListPost", notes = "", response = TapiEquipmentGetPhysicalSpanList.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiEquipmentGetPhysicalSpanList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-physical-span-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiEquipmentGetPhysicalSpanList> operationsGetPhysicalSpanListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"physical-span\" : [ \"\", \"\" ]\n  }\n}", TapiEquipmentGetPhysicalSpanList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.equipment.GetPhysicalSpan", nickname = "operationsGetPhysicalSpanPost", notes = "operates on tapi.equipment.GetPhysicalSpan", response = TapiEquipmentGetPhysicalSpan.class, tags={ "tapi-equipment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiEquipmentGetPhysicalSpan.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-physical-span/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiEquipmentGetPhysicalSpan> operationsGetPhysicalSpanPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"physical-span\" : \"\"\n  }\n}", TapiEquipmentGetPhysicalSpan.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.common.GetServiceInterfacePointDetails", nickname = "operationsGetServiceInterfacePointDetailsPost", notes = "operates on tapi.common.GetServiceInterfacePointDetails", response = TapiCommonGetServiceInterfacePointDetails.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiCommonGetServiceInterfacePointDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-service-interface-point-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiCommonGetServiceInterfacePointDetails> operationsGetServiceInterfacePointDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"sip\" : \"\"\n  }\n}", TapiCommonGetServiceInterfacePointDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetServiceInterfacePointListPost", notes = "", response = TapiCommonGetServiceInterfacePointList.class, tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiCommonGetServiceInterfacePointList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-service-interface-point-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiCommonGetServiceInterfacePointList> operationsGetServiceInterfacePointListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"sip\" : [ \"\", \"\" ]\n  }\n}", TapiCommonGetServiceInterfacePointList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetSupportedNotificationTypesPost", notes = "", response = TapiNotificationGetSupportedNotificationTypes.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationGetSupportedNotificationTypes.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-supported-notification-types/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationGetSupportedNotificationTypes> operationsGetSupportedNotificationTypesPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"supported-notification-types\" : [ \"supported-notification-types\", \"supported-notification-types\" ],\n    \"supported-object-types\" : [ \"supported-object-types\", \"supported-object-types\" ]\n  }\n}", TapiNotificationGetSupportedNotificationTypes.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.topology.GetTopologyDetails", nickname = "operationsGetTopologyDetailsPost", notes = "operates on tapi.topology.GetTopologyDetails", response = TapiTopologyGetTopologyDetails.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetTopologyDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-topology-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiTopologyGetTopologyDetails> operationsGetTopologyDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"topology\" : \"\"\n  }\n}", TapiTopologyGetTopologyDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetTopologyListPost", notes = "", response = TapiTopologyGetTopologyList.class, tags={ "tapi-topology", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiTopologyGetTopologyList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-topology-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiTopologyGetTopologyList> operationsGetTopologyListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"topology\" : [ \"\", \"\" ]\n  }\n}", TapiTopologyGetTopologyList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.virtual.network.GetVirtualNetworkServiceDetails", nickname = "operationsGetVirtualNetworkServiceDetailsPost", notes = "operates on tapi.virtual.network.GetVirtualNetworkServiceDetails", response = TapiVirtualNetworkGetVirtualNetworkServiceDetails.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiVirtualNetworkGetVirtualNetworkServiceDetails.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-virtual-network-service-details/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiVirtualNetworkGetVirtualNetworkServiceDetails> operationsGetVirtualNetworkServiceDetailsPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiVirtualNetworkGetVirtualNetworkServiceDetails.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "", nickname = "operationsGetVirtualNetworkServiceListPost", notes = "", response = TapiVirtualNetworkGetVirtualNetworkServiceList.class, tags={ "tapi-virtual-network", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiVirtualNetworkGetVirtualNetworkServiceList.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/get-virtual-network-service-list/",
        produces = { "application/yang-data+json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<TapiVirtualNetworkGetVirtualNetworkServiceList> operationsGetVirtualNetworkServiceListPost() {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : [ \"\", \"\" ]\n  }\n}", TapiVirtualNetworkGetVirtualNetworkServiceList.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.path.computation.OptimizeP2PPath", nickname = "operationsOptimizeP2PPathPost", notes = "operates on tapi.path.computation.OptimizeP2PPath", response = TapiPathComputationOptimizeP2PPath.class, tags={ "tapi-path-computation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiPathComputationOptimizeP2PPath.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/optimize-p-2-p-path/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiPathComputationOptimizeP2PPath> operationsOptimizeP2PPathPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiPathComputationOptimizeP2PPath.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.connectivity.UpdateConnectivityService", nickname = "operationsUpdateConnectivityServicePost", notes = "operates on tapi.connectivity.UpdateConnectivityService", response = TapiConnectivityUpdateConnectivityService.class, tags={ "tapi-connectivity", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiConnectivityUpdateConnectivityService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-connectivity-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiConnectivityUpdateConnectivityService> operationsUpdateConnectivityServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"service\" : \"\"\n  }\n}", TapiConnectivityUpdateConnectivityService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.notification.UpdateNotificationSubscriptionService", nickname = "operationsUpdateNotificationSubscriptionServicePost", notes = "operates on tapi.notification.UpdateNotificationSubscriptionService", response = TapiNotificationUpdateNotificationSubscriptionService.class, tags={ "tapi-notification", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiNotificationUpdateNotificationSubscriptionService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-notification-subscription-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiNotificationUpdateNotificationSubscriptionService> operationsUpdateNotificationSubscriptionServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"subscription-service\" : \"\"\n  }\n}", TapiNotificationUpdateNotificationSubscriptionService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.UpdateOamJob", nickname = "operationsUpdateOamJobPost", notes = "operates on tapi.oam.UpdateOamJob", response = TapiOamUpdateOamJob.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamUpdateOamJob.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-oam-job/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamUpdateOamJob> operationsUpdateOamJobPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-job\" : \"\"\n  }\n}", TapiOamUpdateOamJob.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.UpdateOamProfile", nickname = "operationsUpdateOamProfilePost", notes = "operates on tapi.oam.UpdateOamProfile", response = TapiOamUpdateOamProfile.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamUpdateOamProfile.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-oam-profile/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamUpdateOamProfile> operationsUpdateOamProfilePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-profile\" : \"\"\n  }\n}", TapiOamUpdateOamProfile.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.UpdateOamServicePoint", nickname = "operationsUpdateOamServicePointPost", notes = "operates on tapi.oam.UpdateOamServicePoint", response = TapiOamUpdateOamServicePoint.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamUpdateOamServicePoint.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-oam-service-point/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamUpdateOamServicePoint> operationsUpdateOamServicePointPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service-point\" : \"\"\n  }\n}", TapiOamUpdateOamServicePoint.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.oam.UpdateOamService", nickname = "operationsUpdateOamServicePost", notes = "operates on tapi.oam.UpdateOamService", response = TapiOamUpdateOamService.class, tags={ "tapi-oam", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Correct response", response = TapiOamUpdateOamService.class),
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-oam-service/",
        produces = { "application/yang-data+json" }, 
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<TapiOamUpdateOamService> operationsUpdateOamServicePost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"output\" : {\n    \"oam-service\" : \"\"\n  }\n}", TapiOamUpdateOamService.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "operates on tapi.common.UpdateServiceInterfacePoint", nickname = "operationsUpdateServiceInterfacePointPost", notes = "operates on tapi.common.UpdateServiceInterfacePoint", tags={ "tapi-common", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "No response"),
        @ApiResponse(code = 400, message = "Internal error") })
    @RequestMapping(value = "/operations/update-service-interface-point/",
        consumes = { "application/yang-data+json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> operationsUpdateServiceInterfacePointPost(@ApiParam(value = ""  )  @Valid @RequestBody Object body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default OperationsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
